'use client';
import {
  Container,
  Typography,
  Box,
  Paper,
  Alert,
  Button,
  TextField,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Checkbox,
  Radio,
  RadioGroup,
  FormControlLabel,
  FormLabel,
  FormGroup,
  Switch,
  Slider,
  Rating,
  Autocomplete,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Chip,
  Card,
  CardContent,
  Tabs,
  Tab,
  Stack,
  Avatar,
  Divider,
  InputAdornment,
  IconButton,
} from '@mui/material';
import {
  ArrowBack,
  ArrowForward,
  CheckCircle,
  Edit,
  Person,
  Email,
  Phone,
  Lock,
  Visibility,
  VisibilityOff,
  Search,
  Assignment,
  PlayArrow,
  Lightbulb,
  Code,
  Rule,
  CheckBox,
  RadioButtonChecked,
  TextFields,
} from '@mui/icons-material';
import Link from 'next/link';
import { useState } from 'react';

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;
  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`lesson-tabpanel-${index}`}
      aria-labelledby={`lesson-tab-${index}`}
      {...other}
    >
      {value === index && <Box sx={{ py: 3 }}>{children}</Box>}
    </div>
  );
}

const textFieldVariants = [
  {
    variant: 'outlined',
    description: '‡∏Å‡∏£‡∏≠‡∏ö‡∏£‡∏≠‡∏ö‡πÜ ‡∏ü‡∏¥‡∏•‡∏î‡πå - ‡πÉ‡∏ä‡πâ‡∏ö‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î',
    usage: '‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ, ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
    pros: ['‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô', '‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå', '‡πÉ‡∏ä‡πâ‡∏á‡πà‡∏≤‡∏¢'],
    cons: ['‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡∏Å‡∏ß‡πà‡∏≤ variant ‡∏≠‡∏∑‡πà‡∏ô']
  },
  {
    variant: 'filled',
    description: '‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ï‡πá‡∏° ‡∏°‡∏µ‡πÄ‡∏™‡πâ‡∏ô‡∏•‡πà‡∏≤‡∏á',
    usage: 'UI ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏°‡πÄ‡∏î‡∏¥‡∏£‡πå‡∏ô',
    pros: ['‡∏î‡∏π‡πÇ‡∏°‡πÄ‡∏î‡∏¥‡∏£‡πå‡∏ô', '‡πÇ‡∏î‡∏î‡πÄ‡∏î‡πà‡∏ô', '‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö dark theme'],
    cons: ['‡∏≠‡∏≤‡∏à‡∏î‡∏π‡∏´‡∏ô‡∏±‡∏Å‡πÑ‡∏õ', '‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏ó‡∏∏‡∏Å design']
  },
  {
    variant: 'standard',
    description: '‡πÄ‡∏™‡πâ‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô - ‡∏°‡∏¥‡∏ô‡∏¥‡∏°‡∏≠‡∏•',
    usage: 'UI ‡πÅ‡∏ö‡∏ö‡∏°‡∏¥‡∏ô‡∏¥‡∏°‡∏≠‡∏•, ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏á‡πà‡∏≤‡∏¢',
    pros: ['‡∏Å‡∏∞‡∏ó‡∏±‡∏î‡∏£‡∏±‡∏î', '‡∏°‡∏¥‡∏ô‡∏¥‡∏°‡∏≠‡∏•', '‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà'],
    cons: ['‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏û‡∏≠', '‡πÉ‡∏ä‡πâ‡∏¢‡∏≤‡∏Å']
  }
];

const inputTypes = [
  { type: 'text', label: '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ', icon: <TextFields />, example: '‡∏ä‡∏∑‡πà‡∏≠, ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà' },
  { type: 'email', label: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•', icon: <Email />, example: 'user@example.com' },
  { type: 'password', label: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô', icon: <Lock />, example: '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢' },
  { type: 'number', label: '‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç', icon: <Rule />, example: '‡∏≠‡∏≤‡∏¢‡∏∏, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô' },
  { type: 'tel', label: '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£', icon: <Phone />, example: '081-234-5678' },
  { type: 'search', label: '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤', icon: <Search />, example: '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤' }
];

export default function MUILesson5Page() {
  const [activeTab, setActiveTab] = useState(0);
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    password: '',
    age: '',
    gender: '',
    interests: [] as string[],
    newsletter: false,
    rating: 0,
    province: '',
    occupation: ''
  });
  const [showPassword, setShowPassword] = useState(false);
  const [errors, setErrors] = useState<Record<string, string>>({});

  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setActiveTab(newValue);
  };

  const handleInputChange = (field: string, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    // Clear error when user starts typing
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  };

  const validateForm = () => {
    const newErrors: Record<string, string> = {};
    
    if (!formData.name.trim()) {
      newErrors.name = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠';
    }
    
    if (!formData.email.trim()) {
      newErrors.email = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•';
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
    }
    
    if (!formData.password) {
      newErrors.password = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô';
    } else if (formData.password.length < 6) {
      newErrors.password = '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = () => {
    if (validateForm()) {
      alert('‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ' + JSON.stringify(formData, null, 2));
    }
  };

  return (
    <Container maxWidth="lg">
      <Box sx={{ py: 4 }}>
        {/* Header */}
        <Box sx={{ mb: 4 }}>
          <Button
            startIcon={<ArrowBack />}
            component={Link}
            href="/mui-tutorial"
            sx={{ mb: 2 }}
          >
            ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
          </Button>
          
          <Typography variant="h1" sx={{ mb: 2, display: 'flex', alignItems: 'center', gap: 2 }}>
            <Edit color="primary" sx={{ fontSize: '3rem' }} />
            ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 5: Forms ‡πÅ‡∏•‡∏∞ Inputs
          </Typography>
          
          <Typography variant="h5" color="text.secondary" sx={{ mb: 3 }}>
            ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ MUI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà! üìã
          </Typography>
          
          <Box sx={{ display: 'flex', gap: 2, mb: 3, flexWrap: 'wrap' }}>
            <Chip icon={<TextFields />} label="TextField" color="primary" />
            <Chip icon={<CheckBox />} label="Checkbox & Radio" color="secondary" />
            <Chip icon={<Assignment />} label="Select & Autocomplete" color="success" />
            <Chip icon={<Rule />} label="Form Validation" color="warning" />
          </Box>
          
          <Alert severity="info" sx={{ mb: 3 }}>
            <Typography variant="body2">
              üéØ <strong>‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ô‡∏µ‡πâ:</strong> ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
              <br />
              ‚è±Ô∏è <strong>‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤:</strong> 40 ‡∏ô‡∏≤‡∏ó‡∏µ | 
              üìä <strong>‡∏£‡∏∞‡∏î‡∏±‡∏ö:</strong> ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
            </Typography>
          </Alert>

          {/* Why Forms Matter */}
          <Paper sx={{ p: 3, mb: 4, bgcolor: 'warning.50', border: '2px solid', borderColor: 'warning.200' }}>
            <Typography variant="h6" sx={{ mb: 2, display: 'flex', alignItems: 'center', gap: 1 }}>
              <Lightbulb color="warning" /> üí° ‡∏ó‡∏≥‡πÑ‡∏°‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ñ‡∏∂‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç?
            </Typography>
            
            <Box sx={{ pl: 2, borderLeft: '3px solid', borderColor: 'warning.main', mb: 2 }}>
              <Typography variant="body2" sx={{ mb: 1 }}>
                ‚Ä¢ üìù <strong>Data Collection:</strong> ‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
              </Typography>
              <Typography variant="body2" sx={{ mb: 1 }}>
                ‚Ä¢ ‚úÖ <strong>User Experience:</strong> ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢
              </Typography>
              <Typography variant="body2" sx={{ mb: 1 }}>
                ‚Ä¢ üîí <strong>Data Validation:</strong> ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á server
              </Typography>
              <Typography variant="body2">
                ‚Ä¢ üöÄ <strong>Conversion Rate:</strong> ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏î‡∏µ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
              </Typography>
            </Box>

            <Alert severity="warning" sx={{ mt: 2 }}>
              <Typography variant="body2">
                ‚ú® <strong>‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:</strong> ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ ‡∏°‡∏µ validation ‡∏î‡∏µ ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°!
              </Typography>
            </Alert>
          </Paper>
        </Box>

        {/* Learning Objectives */}
        <Paper sx={{ p: 3, mb: 4 }}>
          <Typography variant="h6" sx={{ mb: 2, display: 'flex', alignItems: 'center', gap: 1 }}>
            <CheckCircle color="primary" /> üéØ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏à‡∏ö‡∏ö‡∏ó‡∏ô‡∏µ‡πâ ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ:
          </Typography>
          
          <Box sx={{ display: 'flex', flexDirection: { xs: 'column', md: 'row' }, gap: 4 }}>
            <Box sx={{ flex: 1 }}>
              <List dense>
                <ListItem>
                  <ListItemIcon><CheckCircle color="success" sx={{ fontSize: 20 }} /></ListItemIcon>
                  <ListItemText 
                    primary="‡πÉ‡∏ä‡πâ TextField ‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç" 
                    secondary="variants, types, validation, styling"
                  />
                </ListItem>
                <ListItem>
                  <ListItemIcon><CheckCircle color="success" sx={{ fontSize: 20 }} /></ListItemIcon>
                  <ListItemText 
                    primary="Checkbox, Radio, Switch" 
                    secondary="‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ"
                  />
                </ListItem>
                <ListItem>
                  <ListItemIcon><CheckCircle color="success" sx={{ fontSize: 20 }} /></ListItemIcon>
                  <ListItemText 
                    primary="Select ‡πÅ‡∏•‡∏∞ Autocomplete" 
                    secondary="dropdown ‡πÅ‡∏•‡∏∞ search ‡πÑ‡∏î‡πâ"
                  />
                </ListItem>
              </List>
            </Box>
            
            <Box sx={{ flex: 1 }}>
              <List dense>
                <ListItem>
                  <ListItemIcon><CheckCircle color="success" sx={{ fontSize: 20 }} /></ListItemIcon>
                  <ListItemText 
                    primary="Form Validation" 
                    secondary="‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á error"
                  />
                </ListItem>
                <ListItem>
                  <ListItemIcon><CheckCircle color="success" sx={{ fontSize: 20 }} /></ListItemIcon>
                  <ListItemText 
                    primary="Form State Management" 
                    secondary="‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ state ‡∏Ç‡∏≠‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û"
                  />
                </ListItem>
                <ListItem>
                  <ListItemIcon><CheckCircle color="success" sx={{ fontSize: 20 }} /></ListItemIcon>
                  <ListItemText 
                    primary="UX Best Practices" 
                    secondary="‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏î‡∏µ"
                  />
                </ListItem>
              </List>
            </Box>
          </Box>
        </Paper>

        {/* Tabs */}
        <Box sx={{ width: '100%' }}>
          <Tabs 
            value={activeTab} 
            onChange={handleTabChange}
            variant="scrollable"
            scrollButtons="auto"
            sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}
          >
            <Tab 
              label="üìù TextField Master" 
              icon={<TextFields />}
              iconPosition="start"
            />
            <Tab 
              label="‚òëÔ∏è Checkboxes & Radio" 
              icon={<CheckBox />}
              iconPosition="start"
            />
            <Tab 
              label="üìã Select & Autocomplete" 
              icon={<Assignment />}
              iconPosition="start"
            />
            <Tab 
              label="‚úÖ Form Validation" 
              icon={<Rule />}
              iconPosition="start"
            />
            <Tab 
              label="üöÄ Complete Form" 
              icon={<PlayArrow />}
              iconPosition="start"
            />
          </Tabs>
        </Box>

        {/* Tab 1: TextField Master */}
        <TabPanel value={activeTab} index={0}>
          <Typography variant="h3" sx={{ mb: 3 }}>üìù TextField Master</Typography>
          
          <Typography variant="body1" sx={{ mb: 3 }}>
            TextField ‡πÄ‡∏õ‡πá‡∏ô component ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÉ‡∏ô MUI ‡∏°‡∏µ 3 variants ‡∏´‡∏•‡∏±‡∏Å
          </Typography>

          <Typography variant="h5" sx={{ mb: 2 }}>üéØ TextField Variants</Typography>

          <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', md: 'repeat(3, 1fr)' }, gap: 3, mb: 4 }}>
            {textFieldVariants.map((field, index) => (
              <Card key={field.variant}>
                <CardContent>
                  <Typography variant="h6" sx={{ mb: 2, fontWeight: 600, textTransform: 'capitalize' }}>
                    {field.variant}
                  </Typography>
                  
                  <Typography variant="body2" sx={{ mb: 2 }}>
                    {field.description}
                  </Typography>
                  
                  <TextField
                    variant={field.variant as any}
                    label={`${field.variant} TextField`}
                    fullWidth
                    sx={{ mb: 2 }}
                  />
                  
                  <Typography variant="subtitle2" sx={{ mb: 1, color: 'primary.main', fontWeight: 600 }}>
                    ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö:
                  </Typography>
                  <Typography variant="body2" sx={{ mb: 2, color: 'text.secondary' }}>
                    {field.usage}
                  </Typography>
                  
                  <Box sx={{ mb: 2 }}>
                    <Typography variant="subtitle2" sx={{ mb: 1, color: 'success.main' }}>
                      ‚úÖ ‡∏Ç‡πâ‡∏≠‡∏î‡∏µ:
                    </Typography>
                    {field.pros.map((pro, i) => (
                      <Typography key={i} variant="body2" sx={{ fontSize: '0.8rem', color: 'text.secondary' }}>
                        ‚Ä¢ {pro}
                      </Typography>
                    ))}
                  </Box>
                  
                  <Box>
                    <Typography variant="subtitle2" sx={{ mb: 1, color: 'error.main' }}>
                      ‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á:
                    </Typography>
                    {field.cons.map((con, i) => (
                      <Typography key={i} variant="body2" sx={{ fontSize: '0.8rem', color: 'text.secondary' }}>
                        ‚Ä¢ {con}
                      </Typography>
                    ))}
                  </Box>
                </CardContent>
              </Card>
            ))}
          </Box>

          <Typography variant="h5" sx={{ mb: 2 }}>üîß Input Types</Typography>
          
          <Card sx={{ mb: 3 }}>
            <CardContent>
              <Typography variant="h6" sx={{ mb: 2 }}>
                üì± HTML Input Types ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡πà‡∏≠‡∏¢
              </Typography>
              
              <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', md: 'repeat(2, 1fr)' }, gap: 3, mb: 3 }}>
                {inputTypes.map((input) => (
                  <Box key={input.type} sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                    <Avatar sx={{ bgcolor: 'primary.light', color: 'primary.main' }}>
                      {input.icon}
                    </Avatar>
                    <Box sx={{ flex: 1 }}>
                      <Typography variant="subtitle1" sx={{ fontWeight: 600 }}>
                        {input.label} ({input.type})
                      </Typography>
                      <Typography variant="body2" color="text.secondary">
                        {input.example}
                      </Typography>
                    </Box>
                  </Box>
                ))}
              </Box>

              <Typography variant="subtitle2" sx={{ mb: 2 }}>
                üíª ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
              </Typography>
              
              <Box sx={{ p: 2, bgcolor: 'grey.100', borderRadius: 1, mb: 3 }}>
                <Typography variant="body2" component="pre" sx={{ fontFamily: 'monospace', fontSize: '0.875rem' }}>
{`// Basic TextField
<TextField 
  label="‡∏ä‡∏∑‡πà‡∏≠" 
  variant="outlined" 
  fullWidth 
/>

// Email TextField
<TextField 
  type="email"
  label="‡∏≠‡∏µ‡πÄ‡∏°‡∏•" 
  variant="outlined" 
  fullWidth 
/>

// Password TextField
<TextField 
  type="password"
  label="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" 
  variant="outlined" 
  fullWidth 
/>

// Number TextField
<TextField 
  type="number"
  label="‡∏≠‡∏≤‡∏¢‡∏∏" 
  variant="outlined" 
  fullWidth 
  inputProps={{ min: 0, max: 120 }}
/>`}
                </Typography>
              </Box>

              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                <TextField
                  label="‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"
                  variant="outlined"
                  fullWidth
                  placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"
                />
                
                <TextField
                  type="email"
                  label="‡∏≠‡∏µ‡πÄ‡∏°‡∏•"
                  variant="outlined"
                  fullWidth
                  placeholder="example@email.com"
                />
                
                <TextField
                  type="password"
                  label="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
                  variant="outlined"
                  fullWidth
                  InputProps={{
                    endAdornment: (
                      <InputAdornment position="end">
                        <IconButton
                          onClick={() => setShowPassword(!showPassword)}
                          edge="end"
                        >
                          {showPassword ? <VisibilityOff /> : <Visibility />}
                        </IconButton>
                      </InputAdornment>
                    ),
                  }}
                />
                
                <TextField
                  type="number"
                  label="‡∏≠‡∏≤‡∏¢‡∏∏"
                  variant="outlined"
                  fullWidth
                  inputProps={{ min: 0, max: 120 }}
                />
              </Box>
            </CardContent>
          </Card>

          <Typography variant="h5" sx={{ mb: 2 }}>üé® TextField ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á</Typography>
          
          <Card>
            <CardContent>
              <Typography variant="h6" sx={{ mb: 2 }}>
                ‚ö° TextField Features
              </Typography>
              
              <Box sx={{ p: 2, bgcolor: 'grey.100', borderRadius: 1, mb: 3 }}>
                <Typography variant="body2" component="pre" sx={{ fontFamily: 'monospace', fontSize: '0.875rem' }}>
{`// TextField with Icons
<TextField 
  label="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"
  InputProps={{
    startAdornment: (
      <InputAdornment position="start">
        <Search />
      </InputAdornment>
    ),
  }}
/>

// Multiline TextField
<TextField 
  label="‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"
  multiline
  rows={4}
  fullWidth
/>

// Helper Text
<TextField 
  label="‡∏≠‡∏µ‡πÄ‡∏°‡∏•"
  helperText="‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÅ‡∏ä‡∏£‡πå‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"
  fullWidth
/>

// Error State
<TextField 
  label="‡∏≠‡∏µ‡πÄ‡∏°‡∏•"
  error
  helperText="‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
  fullWidth
/>`}
                </Typography>
              </Box>

              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                <TextField
                  label="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
                  variant="outlined"
                  fullWidth
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <Search />
                      </InputAdornment>
                    ),
                  }}
                />
                
                <TextField
                  label="‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"
                  multiline
                  rows={4}
                  fullWidth
                  placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì..."
                />
                
                <TextField
                  label="‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠"
                  fullWidth
                  helperText="‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"
                />
                
                <TextField
                  label="‡∏≠‡∏µ‡πÄ‡∏°‡∏•"
                  fullWidth
                  error
                  helperText="‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
                />
              </Box>

              <Alert severity="info" sx={{ mt: 3 }}>
                <Typography variant="body2">
                  üí° <strong>‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö:</strong> ‡πÉ‡∏ä‡πâ helperText ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ ‡πÅ‡∏•‡∏∞ error state ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
                </Typography>
              </Alert>
            </CardContent>
          </Card>
        </TabPanel>

        {/* Tab 2: Checkboxes & Radio */}
        <TabPanel value={activeTab} index={1}>
          <Typography variant="h3" sx={{ mb: 3 }}>‚òëÔ∏è Checkboxes & Radio</Typography>
          
          <Typography variant="body1" sx={{ mb: 3 }}>
            Checkbox ‡πÅ‡∏•‡∏∞ Radio Button ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
          </Typography>

          <Typography variant="h5" sx={{ mb: 2 }}>‚òëÔ∏è Checkbox</Typography>
          
          <Card sx={{ mb: 3 }}>
            <CardContent>
              <Typography variant="h6" sx={{ mb: 2 }}>
                üìù ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Checkbox
              </Typography>
              
              <Box sx={{ p: 2, bgcolor: 'grey.100', borderRadius: 1, mb: 3 }}>
                <Typography variant="body2" component="pre" sx={{ fontFamily: 'monospace', fontSize: '0.875rem' }}>
{`// Basic Checkbox
<FormControlLabel
  control={<Checkbox />}
  label="‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç"
/>

// Checkbox Group
<FormGroup>
  <FormControlLabel control={<Checkbox />} label="React" />
  <FormControlLabel control={<Checkbox />} label="Angular" />
  <FormControlLabel control={<Checkbox />} label="Vue" />
</FormGroup>`}
                </Typography>
              </Box>

              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                <FormControlLabel
                  control={
                    <Checkbox
                      checked={formData.newsletter}
                      onChange={(e) => handleInputChange('newsletter', e.target.checked)}
                    />
                  }
                  label="‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£‡∏ó‡∏≤‡∏á Email"
                />
                
                <FormLabel component="legend">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠):</FormLabel>
                <FormGroup>
                  {['Programming', 'Design', 'Marketing', 'Data Science'].map((interest) => (
                    <FormControlLabel
                      key={interest}
                      control={
                        <Checkbox
                          checked={formData.interests.includes(interest)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              handleInputChange('interests', [...formData.interests, interest]);
                            } else {
                              handleInputChange('interests', formData.interests.filter(i => i !== interest));
                            }
                          }}
                        />
                      }
                      label={interest}
                    />
                  ))}
                </FormGroup>
              </Box>
            </CardContent>
          </Card>

          <Typography variant="h5" sx={{ mb: 2 }}>üîò Radio Buttons</Typography>
          
          <Card sx={{ mb: 3 }}>
            <CardContent>
              <Typography variant="h6" sx={{ mb: 2 }}>
                üéØ ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Radio
              </Typography>
              
              <Box sx={{ p: 2, bgcolor: 'grey.100', borderRadius: 1, mb: 3 }}>
                <Typography variant="body2" component="pre" sx={{ fontFamily: 'monospace', fontSize: '0.875rem' }}>
{`// Radio Group
<FormControl>
  <FormLabel>‡πÄ‡∏û‡∏®</FormLabel>
  <RadioGroup value={gender} onChange={handleChange}>
    <FormControlLabel value="male" control={<Radio />} label="‡∏ä‡∏≤‡∏¢" />
    <FormControlLabel value="female" control={<Radio />} label="‡∏´‡∏ç‡∏¥‡∏á" />
    <FormControlLabel value="other" control={<Radio />} label="‡∏≠‡∏∑‡πà‡∏ô‡πÜ" />
  </RadioGroup>
</FormControl>`}
                </Typography>
              </Box>

              <FormControl>
                <FormLabel>‡πÄ‡∏û‡∏®</FormLabel>
                <RadioGroup
                  value={formData.gender}
                  onChange={(e) => handleInputChange('gender', e.target.value)}
                >
                  <FormControlLabel value="male" control={<Radio />} label="‡∏ä‡∏≤‡∏¢" />
                  <FormControlLabel value="female" control={<Radio />} label="‡∏´‡∏ç‡∏¥‡∏á" />
                  <FormControlLabel value="other" control={<Radio />} label="‡∏≠‡∏∑‡πà‡∏ô‡πÜ" />
                </RadioGroup>
              </FormControl>
            </CardContent>
          </Card>

          <Typography variant="h5" sx={{ mb: 2 }}>üéöÔ∏è Switch & Slider</Typography>
          
          <Card>
            <CardContent>
              <Typography variant="h6" sx={{ mb: 2 }}>
                ‚ö° ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à
              </Typography>
              
              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>
                <Box>
                  <Typography variant="subtitle1" sx={{ mb: 1 }}>Switch:</Typography>
                  <FormControlLabel
                    control={<Switch />}
                    label="‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"
                  />
                </Box>
                
                <Box>
                  <Typography variant="subtitle1" sx={{ mb: 1 }}>Slider:</Typography>
                  <Typography gutterBottom>‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à</Typography>
                  <Slider
                    defaultValue={30}
                    valueLabelDisplay="auto"
                    step={10}
                    marks
                    min={0}
                    max={100}
                  />
                </Box>
                
                <Box>
                  <Typography variant="subtitle1" sx={{ mb: 1 }}>Rating:</Typography>
                  <Rating
                    value={formData.rating}
                    onChange={(event, newValue) => {
                      handleInputChange('rating', newValue);
                    }}
                  />
                </Box>
              </Box>
            </CardContent>
          </Card>
        </TabPanel>

        {/* Tab 3: Select & Autocomplete */}
        <TabPanel value={activeTab} index={2}>
          <Typography variant="h3" sx={{ mb: 3 }}>üìã Select & Autocomplete</Typography>
          
          <Typography variant="body1" sx={{ mb: 3 }}>
            Select ‡πÅ‡∏•‡∏∞ Autocomplete ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
          </Typography>

          <Typography variant="h5" sx={{ mb: 2 }}>üìã Select</Typography>
          
          <Card sx={{ mb: 3 }}>
            <CardContent>
              <Typography variant="h6" sx={{ mb: 2 }}>
                üéØ ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Select
              </Typography>
              
              <Box sx={{ p: 2, bgcolor: 'grey.100', borderRadius: 1, mb: 3 }}>
                <Typography variant="body2" component="pre" sx={{ fontFamily: 'monospace', fontSize: '0.875rem' }}>
{`// Basic Select
<FormControl fullWidth>
  <InputLabel>‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î</InputLabel>
  <Select value={province} onChange={handleChange}>
    <MenuItem value="bangkok">‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø</MenuItem>
    <MenuItem value="chiangmai">‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà</MenuItem>
    <MenuItem value="phuket">‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï</MenuItem>
  </Select>
</FormControl>`}
                </Typography>
              </Box>

              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                <FormControl fullWidth>
                  <InputLabel>‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î</InputLabel>
                  <Select
                    value={formData.province || ''}
                    onChange={(e) => handleInputChange('province', e.target.value)}
                  >
                    <MenuItem value="bangkok">‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£</MenuItem>
                    <MenuItem value="chiangmai">‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà</MenuItem>
                    <MenuItem value="phuket">‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï</MenuItem>
                    <MenuItem value="khonkaen">‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô</MenuItem>
                    <MenuItem value="songkhla">‡∏™‡∏á‡∏Ç‡∏•‡∏≤</MenuItem>
                  </Select>
                </FormControl>
                
                <FormControl fullWidth>
                  <InputLabel>‡∏≠‡∏≤‡∏ä‡∏µ‡∏û</InputLabel>
                  <Select
                    value={formData.occupation || ''}
                    onChange={(e) => handleInputChange('occupation', e.target.value)}
                  >
                    <MenuItem value="developer">‡∏ô‡∏±‡∏Å‡∏û‡∏±‡∏í‡∏ô‡∏≤</MenuItem>
                    <MenuItem value="designer">‡∏ô‡∏±‡∏Å‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö</MenuItem>
                    <MenuItem value="marketer">‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î</MenuItem>
                    <MenuItem value="student">‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô/‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤</MenuItem>
                    <MenuItem value="other">‡∏≠‡∏∑‡πà‡∏ô‡πÜ</MenuItem>
                  </Select>
                </FormControl>
              </Box>
            </CardContent>
          </Card>

          <Typography variant="h5" sx={{ mb: 2 }}>üîç Autocomplete</Typography>
          
          <Card>
            <CardContent>
              <Typography variant="h6" sx={{ mb: 2 }}>
                ‚ö° Autocomplete ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
              </Typography>
              
              <Box sx={{ p: 2, bgcolor: 'grey.100', borderRadius: 1, mb: 3 }}>
                <Typography variant="body2" component="pre" sx={{ fontFamily: 'monospace', fontSize: '0.875rem' }}>
{`// Autocomplete
<Autocomplete
  options={countries}
  getOptionLabel={(option) => option.label}
  renderInput={(params) => (
    <TextField {...params} label="‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®" />
  )}
/>`}
                </Typography>
              </Box>

              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                <Autocomplete
                  options={[
                    'JavaScript', 'TypeScript', 'Python', 'Java', 'C++', 'Go', 'Rust', 'PHP'
                  ]}
                  renderInput={(params) => <TextField {...params} label="‡∏†‡∏≤‡∏©‡∏≤‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏ô‡∏±‡∏î" />}
                />
                
                <Autocomplete
                  multiple
                  options={['React', 'Vue', 'Angular', 'Svelte', 'Next.js', 'Nuxt.js']}
                  renderInput={(params) => <TextField {...params} label="Framework ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" />}
                  renderTags={(value, getTagProps) =>
                    value.map((option, index) => (
                      <Chip variant="outlined" label={option} {...getTagProps({ index })} key={index} />
                    ))
                  }
                />
              </Box>
            </CardContent>
          </Card>
        </TabPanel>

        {/* Tab 4: Form Validation */}
        <TabPanel value={activeTab} index={3}>
          <Typography variant="h3" sx={{ mb: 3 }}>‚úÖ Form Validation</Typography>
          
          <Typography variant="body1" sx={{ mb: 3 }}>
            ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á error message ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û
          </Typography>

          <Card sx={{ mb: 3 }}>
            <CardContent>
              <Typography variant="h6" sx={{ mb: 2 }}>
                üéØ Validation Pattern
              </Typography>
              
              <Box sx={{ p: 2, bgcolor: 'grey.100', borderRadius: 1, mb: 3 }}>
                <Typography variant="body2" component="pre" sx={{ fontFamily: 'monospace', fontSize: '0.875rem' }}>
{`// Validation Function
const validateForm = () => {
  const newErrors = {};
  
  if (!formData.name.trim()) {
    newErrors.name = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠';
  }
  
  if (!formData.email.trim()) {
    newErrors.email = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•';
  } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {
    newErrors.email = '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
  }
  
  setErrors(newErrors);
  return Object.keys(newErrors).length === 0;
};`}
                </Typography>
              </Box>

              <Typography variant="subtitle1" sx={{ mb: 2, fontWeight: 600 }}>
                ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Form ‡∏û‡∏£‡πâ‡∏≠‡∏° Validation:
              </Typography>
              
              <Box component="form" sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                <Box sx={{ display: 'flex', flexDirection: { xs: 'column', md: 'row' }, gap: 2 }}>
                  <TextField
                    label="‡∏ä‡∏∑‡πà‡∏≠"
                    value={formData.name}
                    onChange={(e) => handleInputChange('name', e.target.value)}
                    error={!!errors.name}
                    helperText={errors.name}
                    fullWidth
                    required
                  />
                  <TextField
                    type="email"
                    label="‡∏≠‡∏µ‡πÄ‡∏°‡∏•"
                    value={formData.email}
                    onChange={(e) => handleInputChange('email', e.target.value)}
                    error={!!errors.email}
                    helperText={errors.email}
                    fullWidth
                    required
                  />
                </Box>
                
                <TextField
                  type="password"
                  label="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
                  value={formData.password}
                  onChange={(e) => handleInputChange('password', e.target.value)}
                  error={!!errors.password}
                  helperText={errors.password}
                  fullWidth
                />
                
                <Button
                  variant="contained"
                  onClick={validateForm}
                  fullWidth
                  sx={{ mt: 2 }}
                >
                  ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Validation
                </Button>
              </Box>
            </CardContent>
          </Card>

          <Card>
            <CardContent>
              <Typography variant="h6" sx={{ mb: 2 }}>
                üìã Validation Best Practices
              </Typography>

              <List>
                <ListItem>
                  <ListItemIcon><CheckCircle color="success" /></ListItemIcon>
                  <ListItemText 
                    primary="Real-time validation" 
                    secondary="‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏™‡∏£‡πá‡∏à"
                  />
                </ListItem>
                <ListItem>
                  <ListItemIcon><CheckCircle color="success" /></ListItemIcon>
                  <ListItemText 
                    primary="Clear error messages" 
                    secondary="‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢"
                  />
                </ListItem>
                <ListItem>
                  <ListItemIcon><CheckCircle color="success" /></ListItemIcon>
                  <ListItemText 
                    primary="Visual feedback" 
                    secondary="‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡πÅ‡∏•‡∏∞‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"
                  />
                </ListItem>
              </List>
            </CardContent>
          </Card>
        </TabPanel>

        {/* Tab 5: Complete Form */}
        <TabPanel value={activeTab} index={4}>
          <Typography variant="h3" sx={{ mb: 3 }}>üöÄ Complete Form</Typography>
          
          <Typography variant="body1" sx={{ mb: 3 }}>
            ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏°‡∏≤
          </Typography>

          <Card>
            <CardContent>
              <Typography variant="h5" sx={{ mb: 3, textAlign: 'center' }}>
                üìù ‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
              </Typography>
              
              <Box component="form" sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>
                <Box sx={{ display: 'flex', flexDirection: { xs: 'column', md: 'row' }, gap: 2 }}>
                  <TextField
                    label="‡∏ä‡∏∑‡πà‡∏≠"
                    value={formData.name}
                    onChange={(e) => handleInputChange('name', e.target.value)}
                    error={!!errors.name}
                    helperText={errors.name}
                    fullWidth
                    required
                  />
                  <TextField
                    type="email"
                    label="‡∏≠‡∏µ‡πÄ‡∏°‡∏•"
                    value={formData.email}
                    onChange={(e) => handleInputChange('email', e.target.value)}
                    error={!!errors.email}
                    helperText={errors.email}
                    fullWidth
                    required
                  />
                </Box>
                
                <TextField
                  type="password"
                  label="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
                  value={formData.password}
                  onChange={(e) => handleInputChange('password', e.target.value)}
                  error={!!errors.password}
                  helperText={errors.password}
                  fullWidth
                />
                
                <TextField
                  type="number"
                  label="‡∏≠‡∏≤‡∏¢‡∏∏"
                  value={formData.age}
                  onChange={(e) => handleInputChange('age', e.target.value)}
                  inputProps={{ min: 13, max: 120 }}
                  fullWidth
                />
                
                <FormControl>
                  <FormLabel>‡πÄ‡∏û‡∏®</FormLabel>
                  <RadioGroup
                    value={formData.gender}
                    onChange={(e) => handleInputChange('gender', e.target.value)}
                    row
                  >
                    <FormControlLabel value="male" control={<Radio />} label="‡∏ä‡∏≤‡∏¢" />
                    <FormControlLabel value="female" control={<Radio />} label="‡∏´‡∏ç‡∏¥‡∏á" />
                    <FormControlLabel value="other" control={<Radio />} label="‡∏≠‡∏∑‡πà‡∏ô‡πÜ" />
                  </RadioGroup>
                </FormControl>
                
                <FormControl>
                  <FormLabel>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠)</FormLabel>
                  <FormGroup row>
                    {['Programming', 'Design', 'Marketing', 'Data Science'].map((interest) => (
                      <FormControlLabel
                        key={interest}
                        control={
                          <Checkbox
                            checked={formData.interests.includes(interest)}
                            onChange={(e) => {
                              if (e.target.checked) {
                                handleInputChange('interests', [...formData.interests, interest]);
                              } else {
                                handleInputChange('interests', formData.interests.filter(i => i !== interest));
                              }
                            }}
                          />
                        }
                        label={interest}
                      />
                    ))}
                  </FormGroup>
                </FormControl>
                
                <Box>
                  <Typography component="legend">‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à</Typography>
                  <Rating
                    value={formData.rating}
                    onChange={(event, newValue) => {
                      handleInputChange('rating', newValue);
                    }}
                  />
                </Box>
                
                <FormControlLabel
                  control={
                    <Checkbox
                      checked={formData.newsletter}
                      onChange={(e) => handleInputChange('newsletter', e.target.checked)}
                    />
                  }
                  label="‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô"
                />
                
                <Divider />
                
                <Stack direction="row" spacing={2} justifyContent="center">
                  <Button variant="outlined" color="inherit">
                    ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                  </Button>
                  <Button 
                    variant="contained" 
                    onClick={handleSubmit}
                    size="large"
                  >
                    ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
                  </Button>
                </Stack>
              </Box>
            </CardContent>
          </Card>
        </TabPanel>

        {/* Navigation */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mt: 6 }}>
          <Button
            startIcon={<ArrowBack />}
            component={Link}
            href="/mui-tutorial/lesson-4"
            variant="outlined"
          >
            ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 4: Buttons ‡πÅ‡∏•‡∏∞ Actions
          </Button>
          
          <Chip 
            label="5 / 8"
            color="primary"
            variant="filled"
          />
          
          <Button
            endIcon={<ArrowForward />}
            component={Link}
            href="/mui-tutorial/lesson-6"
            variant="contained"
          >
            ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 6: Navigation Components
          </Button>
        </Box>
      </Box>
    </Container>
  );
} 