'use client';
import {
  Container,
  Typography,
  Box,
  Paper,
  Alert,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Chip,
  Button,
  Card,
  CardContent,
  Tabs,
  Tab,
  Stack,
  Avatar,
  LinearProgress,
  CircularProgress,
  Tooltip,
  Grid,
  Accordion,
  AccordionSummary,
  AccordionDetails,
} from '@mui/material';
import {
  ArrowBack,
  ArrowForward,
  CheckCircle,
  Warning,
  Error as ErrorIcon,
  Architecture,
  PlayArrow,
  Lightbulb,
  Timer,
  Refresh,
  Security,
  BugReport,
  TrendingUp,
  Code,
  Build,
  Speed,
  CheckBox,
  ExpandMore,
  Star,
  AutoFixHigh,
  Psychology,
  Engineering,
  Settings,
} from '@mui/icons-material';
import Link from 'next/link';
import { useState } from 'react';

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;
  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`lesson-tabpanel-${index}`}
      aria-labelledby={`lesson-tab-${index}`}
      {...other}
    >
      {value === index && <Box sx={{ py: 3 }}>{children}</Box>}
    </div>
  );
}

// Demo Components
interface Pattern {
  name: string;
  description: string;
  difficulty: 'easy' | 'medium' | 'hard';
  useCase: string;
  pros: string[];
  cons: string[];
}

function PatternComparison() {
  const [selectedPattern, setSelectedPattern] = useState<string>('compound-component');
  
  const patterns: Record<string, Pattern> = {
    'compound-component': {
      name: 'Compound Component Pattern',
      description: 'Components ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ä‡∏¥‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏ï‡πà‡∏≠',
      difficulty: 'medium',
      useCase: 'Modal, Dropdown, Tabs ‡∏ó‡∏µ‡πà‡∏°‡∏µ sub-components',
      pros: ['‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô', '‡πÅ‡∏¢‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô', 'Re-usable ‡∏™‡∏π‡∏á'],
      cons: ['‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô', '‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à Context']
    },
    'render-props': {
      name: 'Render Props Pattern',
      description: '‡∏™‡πà‡∏á function ‡πÄ‡∏õ‡πá‡∏ô prop ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏ä‡∏£‡πå logic ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á components',
      difficulty: 'hard',
      useCase: 'Data fetching, Mouse tracking, Form handling',
      pros: ['‡πÅ‡∏ä‡∏£‡πå logic ‡πÑ‡∏î‡πâ‡∏î‡∏µ', '‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏™‡∏π‡∏á', 'Testable'],
      cons: ['Callback hell', '‡∏¢‡∏≤‡∏Å‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô']
    },
    'custom-hooks': {
      name: 'Custom Hooks Pattern',
      description: '‡πÅ‡∏¢‡∏Å logic ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô hook ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ',
      difficulty: 'easy',
      useCase: 'API calls, Form validation, Local storage',
      pros: ['‡∏á‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ', 'Reusable', 'Testable'],
      cons: ['‡∏≠‡∏≤‡∏à over-abstract', '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏π‡πâ rules of hooks']
    },
    'hoc': {
      name: 'Higher-Order Component (HOC)',
      description: 'Function ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö component ‡πÅ‡∏•‡∏∞ return component ‡πÉ‡∏´‡∏°‡πà',
      difficulty: 'hard',
      useCase: 'Authentication, Logging, Theme wrapping',
      pros: ['Reusable logic', 'Separation of concerns'],
      cons: ['Wrapper hell', 'Props collision', 'Debugging ‡∏¢‡∏≤‡∏Å']
    }
  };

  const currentPattern = patterns[selectedPattern];
  
  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'easy': return 'success';
      case 'medium': return 'warning';
      case 'hard': return 'error';
      default: return 'default';
    }
  };

  return (
    <Card>
      <CardContent>
        <Typography variant="h6" sx={{ mb: 2 }}>
          üß© Design Patterns Comparison
        </Typography>
        
        <Box sx={{ mb: 3 }}>
          {Object.entries(patterns).map(([key, pattern]) => (
            <Button
              key={key}
              variant={selectedPattern === key ? 'contained' : 'outlined'}
              onClick={() => setSelectedPattern(key)}
              sx={{ mr: 1, mb: 1 }}
              size="small"
            >
              {pattern.name.split(' ')[0]}
            </Button>
          ))}
        </Box>

        <Paper sx={{ p: 3, bgcolor: 'grey.50' }}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>
            <Avatar sx={{ bgcolor: 'primary.main' }}>
              <Psychology />
            </Avatar>
            <Box>
              <Typography variant="h6">{currentPattern.name}</Typography>
              <Chip 
                label={currentPattern.difficulty.toUpperCase()} 
                color={getDifficultyColor(currentPattern.difficulty) as any}
                size="small"
              />
            </Box>
          </Box>

          <Typography variant="body2" sx={{ mb: 2 }}>
            {currentPattern.description}
          </Typography>
          
          <Typography variant="subtitle2" sx={{ mb: 1 }}>
            üéØ Use Case:
          </Typography>
          <Typography variant="body2" sx={{ mb: 2, fontStyle: 'italic' }}>
            {currentPattern.useCase}
          </Typography>

          <Grid container spacing={2}>
            <Grid item xs={12} md={6}>
              <Typography variant="subtitle2" sx={{ mb: 1, color: 'success.main' }}>
                ‚úÖ ‡∏Ç‡πâ‡∏≠‡∏î‡∏µ:
              </Typography>
              <List dense>
                {currentPattern.pros.map((pro, index) => (
                  <ListItem key={index} sx={{ py: 0.25 }}>
                    <ListItemIcon sx={{ minWidth: 24 }}>
                      <CheckCircle color="success" sx={{ fontSize: 16 }} />
                    </ListItemIcon>
                    <ListItemText 
                      primary={pro}
                      primaryTypographyProps={{ fontSize: '0.85rem' }}
                    />
                  </ListItem>
                ))}
              </List>
            </Grid>
            
            <Grid item xs={12} md={6}>
              <Typography variant="subtitle2" sx={{ mb: 1, color: 'error.main' }}>
                ‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏µ‡∏¢:
              </Typography>
              <List dense>
                {currentPattern.cons.map((con, index) => (
                  <ListItem key={index} sx={{ py: 0.25 }}>
                    <ListItemIcon sx={{ minWidth: 24 }}>
                      <Warning color="error" sx={{ fontSize: 16 }} />
                    </ListItemIcon>
                    <ListItemText 
                      primary={con}
                      primaryTypographyProps={{ fontSize: '0.85rem' }}
                    />
                  </ListItem>
                ))}
              </List>
            </Grid>
          </Grid>
        </Paper>

        <Alert severity="info" sx={{ mt: 2 }}>
          <Typography variant="body2">
            üí° <strong>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Pattern ‡∏¢‡∏±‡∏á‡πÑ‡∏á?</strong> ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å Custom Hooks ‡∏Å‡πà‡∏≠‡∏ô (‡∏á‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î) 
            ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡πÑ‡∏õ Compound Components ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
          </Typography>
        </Alert>
      </CardContent>
    </Card>
  );
}

function BestPracticesChecklist() {
  const [checkedItems, setCheckedItems] = useState<Set<string>>(new Set());
  
  const practices = [
    { id: 'folder-structure', category: '‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á', text: '‡∏à‡∏±‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏ö‡∏ö feature-based', impact: 'high' },
    { id: 'typescript', category: 'Type Safety', text: '‡πÉ‡∏ä‡πâ TypeScript ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà', impact: 'high' },
    { id: 'error-boundaries', category: 'Error Handling', text: '‡πÉ‡∏™‡πà Error Boundaries', impact: 'high' },
    { id: 'loading-states', category: 'UX', text: '‡∏°‡∏µ Loading states ‡∏ó‡∏∏‡∏Å‡∏ó‡∏µ‡πà', impact: 'medium' },
    { id: 'seo', category: 'SEO', text: '‡πÉ‡∏™‡πà meta tags ‡πÅ‡∏•‡∏∞ structured data', impact: 'high' },
    { id: 'performance', category: 'Performance', text: '‡πÉ‡∏ä‡πâ Next.js Image ‡πÅ‡∏•‡∏∞ dynamic imports', impact: 'high' },
    { id: 'testing', category: 'Testing', text: '‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô tests ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö critical paths', impact: 'medium' },
    { id: 'env-vars', category: 'Security', text: '‡πÄ‡∏Å‡πá‡∏ö secrets ‡πÉ‡∏ô environment variables', impact: 'high' },
    { id: 'code-review', category: 'Team', text: '‡∏ó‡∏≥ code review ‡∏Å‡πà‡∏≠‡∏ô merge', impact: 'medium' },
    { id: 'monitoring', category: 'Production', text: '‡∏ï‡∏±‡πâ‡∏á error monitoring', impact: 'medium' },
  ];

  const toggleCheck = (id: string) => {
    const newChecked = new Set(checkedItems);
    if (newChecked.has(id)) {
      newChecked.delete(id);
    } else {
      newChecked.add(id);
    }
    setCheckedItems(newChecked);
  };

  const getImpactColor = (impact: string) => {
    switch (impact) {
      case 'high': return 'error';
      case 'medium': return 'warning';
      case 'low': return 'success';
      default: return 'default';
    }
  };

  const completionRate = (checkedItems.size / practices.length) * 100;

  return (
    <Card>
      <CardContent>
        <Typography variant="h6" sx={{ mb: 2 }}>
          ‚úÖ Production-Ready Checklist
        </Typography>
        
        <Box sx={{ mb: 3 }}>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
            <Typography variant="body2">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Production</Typography>
            <Typography variant="body2" sx={{ fontWeight: 600 }}>
              {Math.round(completionRate)}%
            </Typography>
          </Box>
          <LinearProgress 
            variant="determinate" 
            value={completionRate}
            sx={{ 
              height: 8, 
              borderRadius: 4,
              bgcolor: 'grey.200',
              '& .MuiLinearProgress-bar': {
                borderRadius: 4,
                bgcolor: completionRate === 100 ? 'success.main' : 'primary.main'
              }
            }}
          />
        </Box>

        <Stack spacing={1}>
          {practices.map((practice) => (
            <Card 
              key={practice.id}
              variant="outlined"
              sx={{ 
                cursor: 'pointer',
                transition: 'all 0.2s',
                bgcolor: checkedItems.has(practice.id) ? 'success.50' : 'transparent',
                borderColor: checkedItems.has(practice.id) ? 'success.main' : 'divider',
                '&:hover': {
                  bgcolor: checkedItems.has(practice.id) ? 'success.100' : 'grey.50'
                }
              }}
              onClick={() => toggleCheck(practice.id)}
            >
              <CardContent sx={{ py: 1.5, px: 2, '&:last-child': { pb: 1.5 } }}>
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                  <CheckBox 
                    color={checkedItems.has(practice.id) ? 'success' : 'disabled'}
                    sx={{ fontSize: 20 }}
                  />
                  <Box sx={{ flex: 1 }}>
                    <Typography variant="body2" sx={{ fontWeight: 500 }}>
                      {practice.text}
                    </Typography>
                  </Box>
                  <Chip 
                    label={practice.category} 
                    size="small" 
                    variant="outlined"
                    sx={{ fontSize: '0.7rem' }}
                  />
                  <Chip 
                    label={practice.impact}
                    size="small"
                    color={getImpactColor(practice.impact) as any}
                    sx={{ fontSize: '0.7rem', minWidth: 60 }}
                  />
                </Box>
              </CardContent>
            </Card>
          ))}
        </Stack>

        {completionRate === 100 && (
          <Alert severity="success" sx={{ mt: 2 }}>
            <Typography variant="body2">
              üéâ <strong>‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢!</strong> ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Production ‡πÅ‡∏•‡πâ‡∏ß!
            </Typography>
          </Alert>
        )}

        {completionRate < 70 && (
          <Alert severity="warning" sx={{ mt: 2 }}>
            <Typography variant="body2">
              ‚ö†Ô∏è <strong>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</strong> ‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 70% ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏≠‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô Production
            </Typography>
          </Alert>
        )}
      </CardContent>
    </Card>
  );
}

export default function Lesson16Page() {
  const [activeTab, setActiveTab] = useState(0);

  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setActiveTab(newValue);
  };

  return (
    <Container maxWidth="lg">
      <Box sx={{ py: 4 }}>
        {/* Header */}
        <Box sx={{ mb: 4 }}>
          <Button
            startIcon={<ArrowBack />}
            component={Link}
            href="/nextjs-basics"
            sx={{ mb: 2 }}
          >
            ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
          </Button>
          
          <Typography variant="h1" sx={{ mb: 2, display: 'flex', alignItems: 'center', gap: 2 }}>
            <Architecture color="primary" sx={{ fontSize: '3rem' }} />
            ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 16: Advanced Patterns & Best Practices
          </Typography>
          
          <Typography variant="h5" color="text.secondary" sx={{ mb: 3 }}>
            ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏î‡∏µ 
            ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û! üéØ
          </Typography>
          
          <Box sx={{ display: 'flex', gap: 2, mb: 3, flexWrap: 'wrap' }}>
            <Chip icon={<Psychology />} label="Design Patterns" color="primary" />
            <Chip icon={<Engineering />} label="Architecture" color="secondary" />
            <Chip icon={<BugReport />} label="Error Handling" color="error" />
            <Chip icon={<Speed />} label="Performance" color="success" />
            <Chip icon={<Security />} label="Security" color="warning" />
          </Box>
          
          <Alert severity="info" sx={{ mb: 3 }}>
            <Typography variant="body2">
              üéØ <strong>‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ô‡∏µ‡πâ:</strong> ‡∏¢‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û
              <br />
              ‚è±Ô∏è <strong>‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤:</strong> 60 ‡∏ô‡∏≤‡∏ó‡∏µ | 
              üìä <strong>‡∏£‡∏∞‡∏î‡∏±‡∏ö:</strong> ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà
            </Typography>
          </Alert>

          {/* What are Advanced Patterns */}
          <Paper sx={{ p: 3, mb: 4, bgcolor: 'primary.50', border: '2px solid', borderColor: 'primary.200' }}>
            <Typography variant="h6" sx={{ mb: 2, display: 'flex', alignItems: 'center', gap: 1 }}>
              <Lightbulb color="primary" /> ü§î Advanced Patterns ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£? (‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ)
            </Typography>
            
            <Typography variant="body1" sx={{ mb: 2 }}>
              ‡∏•‡∏≠‡∏á‡∏ô‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô <strong>‡∏™‡∏ñ‡∏≤‡∏õ‡∏ô‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏ö‡πâ‡∏≤‡∏ô</strong>:
            </Typography>

            <Box sx={{ pl: 2, borderLeft: '3px solid', borderColor: 'primary.main', mb: 2 }}>
              <Typography variant="body2" sx={{ mb: 1 }}>
                ‚Ä¢ üè† <strong>‡∏ö‡πâ‡∏≤‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤:</strong> ‡πÅ‡∏Ñ‡πà‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á ‡πÜ ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏Ñ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡πÇ‡∏Ñ‡πâ‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô)
              </Typography>
              <Typography variant="body2" sx={{ mb: 1 }}>
                ‚Ä¢ üèõÔ∏è <strong>‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏î‡∏µ:</strong> ‡∏°‡∏µ patterns ‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£ (Advanced Patterns)
              </Typography>
              <Typography variant="body2" sx={{ mb: 1 }}>
                ‚Ä¢ üîß <strong>Best Practices:</strong> ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
              </Typography>
              <Typography variant="body2">
                ‚Ä¢ üìè <strong>Standards:</strong> ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ö‡πâ‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏î‡πâ‡∏ô‡∏≤‡∏ô ‡πÜ
              </Typography>
            </Box>

            <Alert severity="success" sx={{ mt: 2 }}>
              <Typography variant="body2">
                ‚ú® <strong>‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:</strong> ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢ ‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÑ‡∏î‡πâ ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÑ‡∏î‡πâ ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£!
              </Typography>
            </Alert>
          </Paper>
        </Box>

        {/* Learning Objectives */}
        <Paper sx={{ p: 3, mb: 4 }}>
          <Typography variant="h6" sx={{ mb: 2, display: 'flex', alignItems: 'center', gap: 1 }}>
            <CheckCircle color="primary" /> üéØ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏à‡∏ö‡∏ö‡∏ó‡∏ô‡∏µ‡πâ ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ:
          </Typography>
          
          <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', md: '1fr 1fr' }, gap: 2 }}>
            <Box>
              <List dense>
                <ListItem>
                  <ListItemIcon><CheckCircle color="success" sx={{ fontSize: 20 }} /></ListItemIcon>
                  <ListItemText 
                    primary="‡πÉ‡∏ä‡πâ Design Patterns ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç" 
                    secondary="Compound Component, Custom Hooks, etc."
                  />
                </ListItem>
                <ListItem>
                  <ListItemIcon><CheckCircle color="success" sx={{ fontSize: 20 }} /></ListItemIcon>
                  <ListItemText 
                    primary="‡∏à‡∏±‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ" 
                    secondary="‡πÅ‡∏ö‡∏ö scalable ‡πÅ‡∏•‡∏∞ maintainable"
                  />
                </ListItem>
                <ListItem>
                  <ListItemIcon><CheckCircle color="success" sx={{ fontSize: 20 }} /></ListItemIcon>
                  <ListItemText 
                    primary="Handle Errors ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û" 
                    secondary="Error Boundaries, Graceful degradation"
                  />
                </ListItem>
              </List>
            </Box>
            
            <Box>
              <List dense>
                <ListItem>
                  <ListItemIcon><CheckCircle color="success" sx={{ fontSize: 20 }} /></ListItemIcon>
                  <ListItemText 
                    primary="‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà Production-ready" 
                    secondary="Performance, Security, Monitoring"
                  />
                </ListItem>
                <ListItem>
                  <ListItemIcon><CheckCircle color="success" sx={{ fontSize: 20 }} /></ListItemIcon>
                  <ListItemText 
                    primary="‡∏ó‡∏≥ Code Review ‡πÑ‡∏î‡πâ" 
                    secondary="‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏î‡∏µ"
                  />
                </ListItem>
                <ListItem>
                  <ListItemIcon><CheckCircle color="success" sx={{ fontSize: 20 }} /></ListItemIcon>
                  <ListItemText 
                    primary="‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô Architecture" 
                    secondary="‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà"
                  />
                </ListItem>
              </List>
            </Box>
          </Box>
        </Paper>

        {/* Tabs */}
        <Box sx={{ width: '100%' }}>
          <Tabs 
            value={activeTab} 
            onChange={handleTabChange}
            variant="scrollable"
            scrollButtons="auto"
            sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}
          >
            <Tab 
              label="üß© Design Patterns" 
              icon={<Psychology />}
              iconPosition="start"
            />
            <Tab 
              label="üèóÔ∏è Architecture" 
              icon={<Engineering />}
              iconPosition="start"
            />
            <Tab 
              label="üö® Error Handling" 
              icon={<BugReport />}
              iconPosition="start"
            />
            <Tab 
              label="üéØ Production Tips" 
              icon={<Star />}
              iconPosition="start"
            />
            <Tab 
              label="üéÆ ‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" 
              icon={<PlayArrow />}
              iconPosition="start"
            />
          </Tabs>
        </Box>

        {/* Tab 1: Design Patterns */}
        <TabPanel value={activeTab} index={0}>
          <Typography variant="h3" sx={{ mb: 3 }}>üß© Design Patterns</Typography>
          
          <Typography variant="body1" sx={{ mb: 3 }}>
            ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
          </Typography>

          <Typography variant="h5" sx={{ mb: 2 }}>üé® Patterns ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏£‡∏π‡πâ</Typography>
          
          <Grid container spacing={3} sx={{ mb: 4 }}>
            <Grid item xs={12} md={6}>
              <Card>
                <CardContent>
                  <Typography variant="h6" sx={{ mb: 2, color: 'primary.main' }}>
                    üîß Custom Hooks Pattern
                  </Typography>
                  <Typography variant="body2" sx={{ mb: 2 }}>
                    ‡πÅ‡∏¢‡∏Å logic ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô hook ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ
                  </Typography>
                  <Box sx={{ p: 2, bgcolor: 'grey.100', borderRadius: 1, mb: 2 }}>
                    <Typography variant="body2" component="pre" sx={{ fontFamily: 'monospace', fontSize: '0.8rem' }}>
{`// useApi.ts
function useApi<T>(url: string) {
  const [data, setData] = useState<T | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    fetch(url)
      .then(res => res.json())
      .then(setData)
      .catch(err => setError(err.message))
      .finally(() => setLoading(false));
  }, [url]);

  return { data, loading, error };
}`}
                    </Typography>
                  </Box>
                  <Alert severity="success" sx={{ fontSize: '0.8rem' }}>
                    ‚úÖ ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏´‡∏•‡∏≤‡∏¢ component ‡πÑ‡∏î‡πâ, ‡πÄ‡∏ó‡∏™‡∏ï‡πå‡∏á‡πà‡∏≤‡∏¢
                  </Alert>
                </CardContent>
              </Card>
            </Grid>

            <Grid item xs={12} md={6}>
              <Card>
                <CardContent>
                  <Typography variant="h6" sx={{ mb: 2, color: 'secondary.main' }}>
                    üß± Compound Component
                  </Typography>
                  <Typography variant="body2" sx={{ mb: 2 }}>
                    Components ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
                  </Typography>
                  <Box sx={{ p: 2, bgcolor: 'grey.100', borderRadius: 1, mb: 2 }}>
                    <Typography variant="body2" component="pre" sx={{ fontFamily: 'monospace', fontSize: '0.8rem' }}>
{`// Modal.tsx
export function Modal({ children }) {
  return <div className="modal">{children}</div>;
}

Modal.Header = ({ children }) => (
  <div className="modal-header">{children}</div>
);

Modal.Body = ({ children }) => (
  <div className="modal-body">{children}</div>
);

// ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
<Modal>
  <Modal.Header>Title</Modal.Header>
  <Modal.Body>Content</Modal.Body>
</Modal>`}
                    </Typography>
                  </Box>
                  <Alert severity="info" sx={{ fontSize: '0.8rem' }}>
                    ‚úÖ ‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô, ‡∏°‡∏µ structure ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
                  </Alert>
                </CardContent>
              </Card>
            </Grid>
          </Grid>
        </TabPanel>

        {/* Tab 2: Architecture */}
        <TabPanel value={activeTab} index={1}>
          <Typography variant="h3" sx={{ mb: 3 }}>üèóÔ∏è Architecture</Typography>
          
          <Typography variant="h5" sx={{ mb: 2 }}>üìÅ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏ö‡∏ö Feature-based</Typography>
          <Box sx={{ p: 2, bgcolor: 'grey.100', borderRadius: 1, mb: 3 }}>
            <Typography variant="body2" component="pre" sx={{ fontFamily: 'monospace' }}>
{`src/
‚îú‚îÄ‚îÄ app/                    # Next.js 13+ App Router
‚îú‚îÄ‚îÄ components/             # Shared components
‚îÇ   ‚îú‚îÄ‚îÄ ui/                # Base UI components (Button, Input)
‚îÇ   ‚îî‚îÄ‚îÄ layout/            # Layout components (Header, Footer)
‚îú‚îÄ‚îÄ features/              # Feature-based modules
‚îÇ   ‚îú‚îÄ‚îÄ auth/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/    # Auth-specific components
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ hooks/         # Auth-related hooks
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ services/      # Auth API calls
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ types/         # Auth type definitions
‚îÇ   ‚îî‚îÄ‚îÄ dashboard/
‚îú‚îÄ‚îÄ lib/                   # Utilities, configurations
‚îú‚îÄ‚îÄ hooks/                 # Global custom hooks
‚îî‚îÄ‚îÄ types/                 # Global type definitions`}
            </Typography>
          </Box>
        </TabPanel>

        {/* Tab 3: Error Handling */}
        <TabPanel value={activeTab} index={2}>
          <Typography variant="h3" sx={{ mb: 3 }}>üö® Error Handling</Typography>
          
          <Typography variant="h5" sx={{ mb: 2 }}>üõ°Ô∏è Error Boundary</Typography>
          <Box sx={{ p: 2, bgcolor: 'grey.100', borderRadius: 1, mb: 3 }}>
            <Typography variant="body2" component="pre" sx={{ fontFamily: 'monospace' }}>
{`'use client';
import { Component, ReactNode } from 'react';

interface Props {
  children: ReactNode;
  fallback?: ReactNode;
}

interface State {
  hasError: boolean;
  error?: Error;
}

export class ErrorBoundary extends Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: any) {
    console.error('Error caught by boundary:', error, errorInfo);
    // ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á error reporting service
  }

  render() {
    if (this.state.hasError) {
      return this.props.fallback || (
        <div className="error-fallback">
          <h2>Something went wrong</h2>
          <button onClick={() => this.setState({ hasError: false })}>
            Try again
          </button>
        </div>
      );
    }

    return this.props.children;
  }
}`}
            </Typography>
          </Box>
        </TabPanel>

        {/* Tab 4: Production Tips */}
        <TabPanel value={activeTab} index={3}>
          <Typography variant="h3" sx={{ mb: 3 }}>üéØ Production Tips</Typography>
          
          <Typography variant="h5" sx={{ mb: 2 }}>‚ö° Performance Best Practices</Typography>
          
          <Accordion>
            <AccordionSummary expandIcon={<ExpandMore />}>
              <Typography variant="h6">üñºÔ∏è Image Optimization</Typography>
            </AccordionSummary>
            <AccordionDetails>
              <Box sx={{ p: 2, bgcolor: 'grey.100', borderRadius: 1 }}>
                <Typography variant="body2" component="pre" sx={{ fontFamily: 'monospace' }}>
{`// ‡πÉ‡∏ä‡πâ Next.js Image component
import Image from 'next/image';

// ‚úÖ ‡∏î‡∏µ
<Image
  src="/hero.jpg"
  alt="Hero image"
  width={800}
  height={600}
  priority={true}  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ above-the-fold
  placeholder="blur"
  sizes="(max-width: 768px) 100vw, 800px"
/>

// ‚ùå ‡πÑ‡∏°‡πà‡∏î‡∏µ
<img src="/hero.jpg" alt="Hero" style={{width: '100%'}} />`}
                </Typography>
              </Box>
            </AccordionDetails>
          </Accordion>

          <Accordion>
            <AccordionSummary expandIcon={<ExpandMore />}>
              <Typography variant="h6">üîê Security Checklist</Typography>
            </AccordionSummary>
            <AccordionDetails>
              <List>
                <ListItem>
                  <ListItemIcon><CheckBox color="success" /></ListItemIcon>
                  <ListItemText primary="‡πÉ‡∏ä‡πâ HTTPS ‡∏ó‡∏∏‡∏Å‡∏ó‡∏µ‡πà" />
                </ListItem>
                <ListItem>
                  <ListItemIcon><CheckBox color="success" /></ListItemIcon>
                  <ListItemText primary="Validate input ‡∏ó‡∏±‡πâ‡∏á client ‡πÅ‡∏•‡∏∞ server" />
                </ListItem>
                <ListItem>
                  <ListItemIcon><CheckBox color="success" /></ListItemIcon>
                  <ListItemText primary="‡πÉ‡∏ä‡πâ Content Security Policy (CSP)" />
                </ListItem>
                <ListItem>
                  <ListItemIcon><CheckBox color="success" /></ListItemIcon>
                  <ListItemText primary="‡πÄ‡∏Å‡πá‡∏ö secrets ‡πÉ‡∏ô environment variables" />
                </ListItem>
              </List>
            </AccordionDetails>
          </Accordion>
        </TabPanel>

        {/* Tab 5: Interactive Demo */}
        <TabPanel value={activeTab} index={4}>
          <Typography variant="h3" sx={{ mb: 3 }}>üéÆ ‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</Typography>
          
          <Typography variant="body1" sx={{ mb: 3 }}>
            ‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö Design Patterns ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Production
          </Typography>

          <Stack spacing={4}>
            <PatternComparison />
            <BestPracticesChecklist />
          </Stack>
        </TabPanel>

        {/* Conclusion */}
        <Paper sx={{ p: 4, bgcolor: 'success.50', border: '2px solid', borderColor: 'success.200' }}>
          <Typography variant="h5" sx={{ mb: 2, color: 'success.main' }}>
            üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡πÅ‡∏•‡πâ‡∏ß!
          </Typography>
          <Typography variant="body1" sx={{ mb: 3 }}>
            ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á 
            ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô Next.js ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß!
          </Typography>
          
          <Alert severity="success" sx={{ mb: 3 }}>
            <Typography variant="body2">
              üöÄ <strong>‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ:</strong> ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á, 
              ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ä‡∏∏‡∏°‡∏ä‡∏ô developer, ‡πÅ‡∏•‡∏∞‡πÅ‡∏ä‡∏£‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô!
            </Typography>
          </Alert>
        </Paper>

        {/* Navigation */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mt: 6 }}>
          <Button
            startIcon={<ArrowBack />}
            component={Link}
            href="/nextjs-basics/lesson-15"
            variant="outlined"
          >
            ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 15: Deployment
          </Button>
          
          <Chip 
            label="16 / 16"
            color="success"
            variant="filled"
          />
          
          <Button
            endIcon={<Star />}
            component={Link}
            href="/nextjs-basics"
            variant="contained"
            color="success"
          >
            ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
          </Button>
        </Box>
      </Box>
    </Container>
  );
} 