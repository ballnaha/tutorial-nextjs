'use client';
import {
  Container,
  Typography,
  Box,
  Card,
  CardContent,
  Button,
  Chip,
  Alert,
  Stack,
  Paper,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Tab,
  Tabs,
  IconButton,
  Switch,
  TextField,
  Badge,
  Divider,
} from '@mui/material';
import {
  ArrowBack,
  ArrowForward,
  Store,
  Memory,
  Speed,
  CheckCircle,
  Code,
  Add,
  Remove,
  Delete,
  ShoppingCart,
  Person,
  Settings,
  Refresh,
} from '@mui/icons-material';
import Link from 'next/link';
import { useState } from 'react';

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;
  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`lesson-tabpanel-${index}`}
      aria-labelledby={`lesson-tab-${index}`}
      {...other}
    >
      {value === index && <Box sx={{ py: 3 }}>{children}</Box>}
    </div>
  );
}

export default function Lesson10Page() {
  const [activeTab, setActiveTab] = useState(0);
  
  // Demo states
  const [count, setCount] = useState(0);
  const [cartItems, setCartItems] = useState<{id: number, name: string, price: number, quantity: number}[]>([
    { id: 1, name: 'MacBook Pro', price: 59900, quantity: 1 },
    { id: 2, name: 'iPhone 15', price: 32900, quantity: 2 }
  ]);
  const [user, setUser] = useState({ name: 'John Doe', theme: 'light' });

  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setActiveTab(newValue);
  };

  const addToCart = (item: {name: string, price: number}) => {
    const existingItem = cartItems.find(i => i.name === item.name);
    if (existingItem) {
      setCartItems(cartItems.map(i => 
        i.id === existingItem.id 
          ? { ...i, quantity: i.quantity + 1 }
          : i
      ));
    } else {
      setCartItems([...cartItems, { 
        id: Date.now(), 
        name: item.name, 
        price: item.price, 
        quantity: 1 
      }]);
    }
  };

  const removeFromCart = (id: number) => {
    setCartItems(cartItems.filter(item => item.id !== id));
  };

  const getTotalPrice = () => {
    return cartItems.reduce((total, item) => total + (item.price * item.quantity), 0);
  };

  return (
    <Container maxWidth="lg">
      <Box sx={{ py: 4 }}>
        {/* Header */}
        <Box sx={{ mb: 4 }}>
          <Button
            startIcon={<ArrowBack />}
            component={Link}
            href="/nextjs-basics"
            sx={{ mb: 2 }}
          >
            ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
          </Button>
          
          <Typography variant="h1" sx={{ mb: 2, display: 'flex', alignItems: 'center', gap: 2 }}>
            <Store color="primary" sx={{ fontSize: '3rem' }} />
            ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 10: State Management (Zustand)
          </Typography>
          
          <Box sx={{ display: 'flex', gap: 2, mb: 3, flexWrap: 'wrap' }}>
            <Chip icon={<Store />} label="Zustand Store" color="primary" />
            <Chip icon={<Memory />} label="Persist Middleware" color="secondary" />
            <Chip icon={<Speed />} label="DevTools" color="info" />
            <Chip icon={<Code />} label="TypeScript" color="success" />
          </Box>
          
          <Alert severity="info" sx={{ mb: 3 }}>
            <Typography variant="body2">
              ‚è±Ô∏è <strong>‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤:</strong> 45 ‡∏ô‡∏≤‡∏ó‡∏µ | 
              üìä <strong>‡∏£‡∏∞‡∏î‡∏±‡∏ö:</strong> ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á | 
              üéØ <strong>‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢:</strong> ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ global state ‡∏î‡πâ‡∏ß‡∏¢ Zustand ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
            </Typography>
          </Alert>
        </Box>

        {/* Tabs */}
        <Paper sx={{ mb: 4 }}>
          <Tabs 
            value={activeTab} 
            onChange={handleTabChange}
            variant="scrollable"
            scrollButtons="auto"
            sx={{ borderBottom: 1, borderColor: 'divider' }}
          >
            <Tab label="üöÄ Zustand ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?" />
            <Tab label="üì¶ ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á" />
            <Tab label="üè™ Store ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô" />
            <Tab label="üîÑ Actions & Updates" />
            <Tab label="üíæ Persist Middleware" />
            <Tab label="üõ†Ô∏è DevTools" />
            <Tab label="üì± Demo" />
          </Tabs>
        </Paper>

        {/* Tab Panels */}
        <TabPanel value={activeTab} index={0}>
          <Typography variant="h3" sx={{ mb: 3 }}>üöÄ Zustand ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?</Typography>
          
          <Typography variant="body1" sx={{ mb: 3 }}>
            Zustand ‡πÄ‡∏õ‡πá‡∏ô state management library ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πá‡∏Å ‡πÄ‡∏£‡πá‡∏ß ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö React 
            ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á boilerplate code ‡πÄ‡∏¢‡∏≠‡∏∞‡πÜ ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô Redux
          </Typography>

          <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', md: '1fr 1fr' }, gap: 3, mb: 4 }}>
            <Card>
              <CardContent>
                <Typography variant="h5" sx={{ mb: 2, color: 'success.main' }}>
                  ‚úÖ ‡∏Ç‡πâ‡∏≠‡∏î‡∏µ‡∏Ç‡∏≠‡∏á Zustand
                </Typography>
                <List dense>
                  <ListItem>
                    <ListItemIcon><CheckCircle color="success" sx={{ fontSize: 20 }} /></ListItemIcon>
                    <ListItemText primary="‡πÄ‡∏•‡πá‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡πá‡∏ß (2.9kb gzipped)" />
                  </ListItem>
                  <ListItem>
                    <ListItemIcon><CheckCircle color="success" sx={{ fontSize: 20 }} /></ListItemIcon>
                    <ListItemText primary="‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á Provider wrapper" />
                  </ListItem>
                  <ListItem>
                    <ListItemIcon><CheckCircle color="success" sx={{ fontSize: 20 }} /></ListItemIcon>
                    <ListItemText primary="TypeScript support ‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°" />
                  </ListItem>
                  <ListItem>
                    <ListItemIcon><CheckCircle color="success" sx={{ fontSize: 20 }} /></ListItemIcon>
                    <ListItemText primary="‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ ‡πÑ‡∏°‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô" />
                  </ListItem>
                  <ListItem>
                    <ListItemIcon><CheckCircle color="success" sx={{ fontSize: 20 }} /></ListItemIcon>
                    <ListItemText primary="‡∏°‡∏µ middleware ‡πÄ‡∏¢‡∏≠‡∏∞" />
                  </ListItem>
                </List>
              </CardContent>
            </Card>

            <Card>
              <CardContent>
                <Typography variant="h5" sx={{ mb: 2, color: 'info.main' }}>
                  üÜö ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö Redux
                </Typography>
                <Box sx={{ mb: 2 }}>
                  <Typography variant="h6" sx={{ mb: 1 }}>Redux:</Typography>
                  <Typography variant="body2" color="text.secondary">
                    ‚Ä¢ ‡∏ï‡πâ‡∏≠‡∏á actions, reducers, dispatch<br/>
                    ‚Ä¢ ‡∏ï‡πâ‡∏≠‡∏á Provider wrapper<br/>
                    ‚Ä¢ Boilerplate code ‡πÄ‡∏¢‡∏≠‡∏∞<br/>
                    ‚Ä¢ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö app ‡πÉ‡∏´‡∏ç‡πà‡πÜ
                  </Typography>
                </Box>
                <Box>
                  <Typography variant="h6" sx={{ mb: 1 }}>Zustand:</Typography>
                  <Typography variant="body2" color="text.secondary">
                    ‚Ä¢ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô logic ‡∏ï‡∏£‡∏á‡πÑ‡∏õ‡∏ï‡∏£‡∏á‡∏°‡∏≤<br/>
                    ‚Ä¢ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á Provider<br/>
                    ‚Ä¢ Code ‡∏ô‡πâ‡∏≠‡∏¢ ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢<br/>
                    ‚Ä¢ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö app ‡∏ó‡∏∏‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î
                  </Typography>
                </Box>
              </CardContent>
            </Card>
          </Box>

          <Alert severity="success" sx={{ mb: 3 }}>
            <Typography variant="body2">
              <strong>‡πÉ‡∏ä‡πâ Zustand ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà?</strong> ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏£‡πå state ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á components ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà parent-child 
              ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ global state ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ
            </Typography>
          </Alert>
        </TabPanel>

        <TabPanel value={activeTab} index={1}>
          <Typography variant="h3" sx={{ mb: 3 }}>üì¶ ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Zustand</Typography>
          
          <Typography variant="h5" sx={{ mb: 2 }}>1. ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Package</Typography>
          <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 3 }}>
            <Typography variant="body2" component="pre">
{`npm install zustand

# ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ yarn
yarn add zustand

# ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ pnpm  
pnpm add zustand`}
            </Typography>
          </Box>

          <Typography variant="h5" sx={{ mb: 2 }}>2. Optional Dependencies</Typography>
          <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 3 }}>
            <Typography variant="body2" component="pre">
{`# ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö persist middleware (‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô localStorage)
npm install zustand/middleware

# ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö DevTools (debug ‡πÉ‡∏ô browser)
npm install @redux-devtools/extension`}
            </Typography>
          </Box>

          <Typography variant="h5" sx={{ mb: 2 }}>3. TypeScript Types</Typography>
          <Typography variant="body1" sx={{ mb: 3 }}>
            Zustand ‡∏°‡∏µ TypeScript types built-in ‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°! üéâ
          </Typography>

          <Alert severity="info" sx={{ mb: 3 }}>
            <Typography variant="body2">
              <strong>‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏á‡πà‡∏≤‡∏¢‡πÜ:</strong> ‡πÅ‡∏Ñ‡πà `npm install zustand` ‡∏Å‡πá‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß 
              middleware ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            </Typography>
          </Alert>
        </TabPanel>

        <TabPanel value={activeTab} index={2}>
          <Typography variant="h3" sx={{ mb: 3 }}>üè™ ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Store ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô</Typography>
          
          <Typography variant="h5" sx={{ mb: 2 }}>Store ‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤</Typography>
          <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 3 }}>
            <Typography variant="body2" component="pre">
{`// stores/counterStore.ts
import { create } from 'zustand'

interface CounterState {
  count: number
  increment: () => void
  decrement: () => void
  reset: () => void
}

export const useCounterStore = create<CounterState>((set) => ({
  count: 0,
  increment: () => set((state) => ({ count: state.count + 1 })),
  decrement: () => set((state) => ({ count: state.count - 1 })),
  reset: () => set({ count: 0 }),
}))`}
            </Typography>
          </Box>

          <Typography variant="h5" sx={{ mb: 2 }}>‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô Component</Typography>
          <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 3 }}>
            <Typography variant="body2" component="pre">
{`// components/Counter.tsx
'use client'
import { useCounterStore } from '@/stores/counterStore'

export function Counter() {
  const { count, increment, decrement, reset } = useCounterStore()

  return (
    <div>
      <h2>Count: {count}</h2>
      <button onClick={increment}>+1</button>
      <button onClick={decrement}>-1</button>
      <button onClick={reset}>Reset</button>
    </div>
  )
}

// ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ selector ‡πÄ‡∏û‡∏∑‡πà‡∏≠ optimize performance
export function CounterDisplay() {
  const count = useCounterStore((state) => state.count)
  
  return <h2>Count: {count}</h2>
}

export function CounterButtons() {
  const increment = useCounterStore((state) => state.increment)
  const decrement = useCounterStore((state) => state.decrement)
  
  return (
    <div>
      <button onClick={increment}>+1</button>
      <button onClick={decrement}>-1</button>
    </div>
  )
}`}
            </Typography>
          </Box>

          <Typography variant="h5" sx={{ mb: 2 }}>‡∏ó‡∏≥‡πÑ‡∏°‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ Selector?</Typography>
          <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', md: '1fr 1fr' }, gap: 3, mb: 3 }}>
            <Card>
              <CardContent>
                <Typography variant="h6" sx={{ mb: 2, color: 'error.main' }}>‚ùå ‡πÑ‡∏°‡πà‡∏î‡∏µ</Typography>
                <Box className="code-block" sx={{ p: 2, borderRadius: 1 }}>
                  <Typography variant="body2" component="pre">
{`// re-render ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà store ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
const { count, increment, decrement } = useCounterStore()`}
                  </Typography>
                </Box>
              </CardContent>
            </Card>

            <Card>
              <CardContent>
                <Typography variant="h6" sx={{ mb: 2, color: 'success.main' }}>‚úÖ ‡∏î‡∏µ</Typography>
                <Box className="code-block" sx={{ p: 2, borderRadius: 1 }}>
                  <Typography variant="body2" component="pre">
{`// re-render ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ count ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
const count = useCounterStore((state) => state.count)`}
                  </Typography>
                </Box>
              </CardContent>
            </Card>
          </Box>

          <Alert severity="success" sx={{ mb: 3 }}>
            <Typography variant="body2">
              <strong>Performance Tip:</strong> ‡πÉ‡∏ä‡πâ selector ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å store 
              ‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ component re-render ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            </Typography>
          </Alert>
        </TabPanel>

        <TabPanel value={activeTab} index={3}>
          <Typography variant="h3" sx={{ mb: 3 }}>üîÑ Actions ‡πÅ‡∏•‡∏∞ State Updates</Typography>
          
          <Typography variant="h5" sx={{ mb: 2 }}>‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï State ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ</Typography>
          <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 3 }}>
            <Typography variant="body2" component="pre">
{`// stores/userStore.ts
import { create } from 'zustand'

interface User {
  id: string
  name: string
  email: string
  age: number
}

interface UserState {
  user: User | null
  users: User[]
  loading: boolean
  // Actions
  setUser: (user: User) => void
  updateUserName: (name: string) => void
  addUser: (user: User) => void
  removeUser: (id: string) => void
  setLoading: (loading: boolean) => void
  clearUser: () => void
}

export const useUserStore = create<UserState>((set, get) => ({
  user: null,
  users: [],
  loading: false,
  
  // ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ user ‡πÉ‡∏´‡∏°‡πà
  setUser: (user) => set({ user }),
  
  // ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÅ‡∏Ñ‡πà‡∏ö‡∏≤‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå
  updateUserName: (name) => set((state) => ({
    user: state.user ? { ...state.user, name } : null
  })),
  
  // ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° item ‡πÉ‡∏ô array
  addUser: (user) => set((state) => ({
    users: [...state.users, user]
  })),
  
  // ‡∏Å‡∏≤‡∏£‡∏•‡∏ö item ‡∏à‡∏≤‡∏Å array
  removeUser: (id) => set((state) => ({
    users: state.users.filter(user => user.id !== id)
  })),
  
  // ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ loading state
  setLoading: (loading) => set({ loading }),
  
  // ‡∏Å‡∏≤‡∏£ reset state
  clearUser: () => set({ user: null, users: [] }),
}))`}
            </Typography>
          </Box>

          <Typography variant="h5" sx={{ mb: 2 }}>Async Actions</Typography>
          <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 3 }}>
            <Typography variant="body2" component="pre">
{`// ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° async functions ‡πÉ‡∏ô store
export const useUserStore = create<UserState>((set, get) => ({
  // ... state ‡πÅ‡∏•‡∏∞ actions ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
  
  // Async action ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user
  fetchUser: async (id: string) => {
    set({ loading: true })
    try {
      const response = await fetch(\`/api/users/\${id}\`)
      const user = await response.json()
      set({ user, loading: false })
    } catch (error) {
      console.error('Error fetching user:', error)
      set({ loading: false })
    }
  },
  
  // Async action ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  saveUser: async (userData: Partial<User>) => {
    const { user } = get() // ‡∏î‡∏∂‡∏á current state
    if (!user) return
    
    set({ loading: true })
    try {
      const response = await fetch(\`/api/users/\${user.id}\`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(userData)
      })
      const updatedUser = await response.json()
      set({ user: updatedUser, loading: false })
    } catch (error) {
      console.error('Error saving user:', error)
      set({ loading: false })
    }
  }
}))`}
            </Typography>
          </Box>

          <Typography variant="h5" sx={{ mb: 2 }}>‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô get() Function</Typography>
          <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 3 }}>
            <Typography variant="body2" component="pre">
{`// get() ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡πà‡∏≤‡∏ô current state ‡πÉ‡∏ô action
export const useCartStore = create<CartState>((set, get) => ({
  items: [],
  
  addItem: (product: Product) => {
    const { items } = get() // ‡∏≠‡πà‡∏≤‡∏ô current state
    const existingItem = items.find(item => item.id === product.id)
    
    if (existingItem) {
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏û‡∏¥‡πà‡∏° quantity
      set({
        items: items.map(item =>
          item.id === product.id
            ? { ...item, quantity: item.quantity + 1 }
            : item
        )
      })
    } else {
      // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
      set({
        items: [...items, { ...product, quantity: 1 }]
      })
    }
  },
  
  getTotalPrice: () => {
    const { items } = get()
    return items.reduce((total, item) => total + (item.price * item.quantity), 0)
  }
}))`}
            </Typography>
          </Box>

          <Alert severity="info" sx={{ mb: 3 }}>
            <Typography variant="body2">
              <strong>‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ:</strong> ‡πÉ‡∏ä‡πâ `get()` ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô current state ‡πÉ‡∏ô action 
              ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ `set()` ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï state
            </Typography>
          </Alert>
        </TabPanel>

        <TabPanel value={activeTab} index={4}>
          <Typography variant="h3" sx={{ mb: 3 }}>üíæ Persist Middleware</Typography>
          
          <Typography variant="body1" sx={{ mb: 3 }}>
            Persist middleware ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡πÄ‡∏Å‡πá‡∏ö state ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô localStorage, sessionStorage 
            ‡∏´‡∏£‡∏∑‡∏≠ storage ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏´‡∏≤‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠ refresh ‡∏´‡∏ô‡πâ‡∏≤
          </Typography>

          <Typography variant="h5" sx={{ mb: 2 }}>‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á</Typography>
          <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 3 }}>
            <Typography variant="body2" component="pre">
{`npm install zustand`}
            </Typography>
          </Box>

          <Typography variant="h5" sx={{ mb: 2 }}>‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Persist</Typography>
          <Paper sx={{ p: 2, bgcolor: 'grey.100', mb: 3 }}>
            <Typography variant="body2" component="pre" sx={{ fontFamily: 'monospace', fontSize: '0.8rem' }}>
{`// stores/settingsStore.ts
import { create } from 'zustand'
import { persist, createJSONStorage } from 'zustand/middleware'

interface SettingsState {
  theme: 'light' | 'dark'
  language: 'th' | 'en'
  notifications: boolean
  setTheme: (theme: 'light' | 'dark') => void
  setLanguage: (language: 'th' | 'en') => void
  toggleNotifications: () => void
}

export const useSettingsStore = create<SettingsState>()(
  persist(
    (set) => ({
      theme: 'light',
      language: 'th',
      notifications: true,
      
      setTheme: (theme) => set({ theme }),
      setLanguage: (language) => set({ language }),
      toggleNotifications: () => set((state) => ({ 
        notifications: !state.notifications 
      })),
    }),
    {
      name: 'app-settings', // ‡∏ä‡∏∑‡πà‡∏≠ key ‡πÉ‡∏ô localStorage
      storage: createJSONStorage(() => localStorage), // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å storage
    }
  )
)`}
            </Typography>
          </Paper>

          <Typography variant="h5" sx={{ mb: 2 }}>‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Persist ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á</Typography>
          <Paper sx={{ p: 2, bgcolor: 'grey.100', mb: 3 }}>
            <Typography variant="body2" component="pre" sx={{ fontFamily: 'monospace', fontSize: '0.8rem' }}>
{`export const useCartStore = create<CartState>()(
  persist(
    (set, get) => ({
      items: [],
      // ... actions
    }),
    {
      name: 'shopping-cart',
      storage: createJSONStorage(() => localStorage),
      
      // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞ persist ‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÑ‡∏´‡∏ô‡∏ö‡πâ‡∏≤‡∏á
      partialize: (state) => ({ items: state.items }),
      
      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö migration
      version: 1,
      
      // migration function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      migrate: (persistedState: any, version: number) => {
        if (version === 0) {
          // migration ‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô 0 ‡πÄ‡∏õ‡πá‡∏ô 1
          return {
            ...persistedState,
            items: persistedState.products || []
          }
        }
        return persistedState
      },
      
      // custom serialization
      serialize: (state) => JSON.stringify(state),
      deserialize: (str) => JSON.parse(str),
    }
  )
)`}
            </Typography>
          </Paper>

          <Typography variant="h5" sx={{ mb: 2 }}>‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ sessionStorage</Typography>
          <Paper sx={{ p: 2, bgcolor: 'grey.100', mb: 3 }}>
            <Typography variant="body2" component="pre" sx={{ fontFamily: 'monospace' }}>
{`// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà session ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
export const useSessionStore = create<SessionState>()(
  persist(
    (set) => ({
      // state ‡πÅ‡∏•‡∏∞ actions
    }),
    {
      name: 'session-data',
      storage: createJSONStorage(() => sessionStorage),
    }
  )
)`}
            </Typography>
          </Paper>

          <Alert severity="warning" sx={{ mb: 3 }}>
            <Typography variant="body2">
              <strong>‡∏£‡∏∞‡∏ß‡∏±‡∏á:</strong> ‡∏≠‡∏¢‡πà‡∏≤ persist ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ sensitive data ‡πÄ‡∏ä‡πà‡∏ô passwords, tokens 
              ‡πÉ‡∏ô localStorage ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏π‡∏Å‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ú‡πà‡∏≤‡∏ô JavaScript
            </Typography>
          </Alert>
        </TabPanel>

        <TabPanel value={activeTab} index={5}>
          <Typography variant="h3" sx={{ mb: 3 }}>üõ†Ô∏è DevTools Integration</Typography>
          
          <Typography variant="body1" sx={{ mb: 3 }}>
            Zustand ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ Redux DevTools ‡πÑ‡∏î‡πâ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ debug state changes ‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢
          </Typography>

          <Typography variant="h5" sx={{ mb: 2 }}>‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á DevTools</Typography>
          <Paper sx={{ p: 2, bgcolor: 'grey.100', mb: 3 }}>
            <Typography variant="body2" component="pre" sx={{ fontFamily: 'monospace' }}>
{`# ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Redux DevTools Extension ‡πÉ‡∏ô browser ‡∏Å‡πà‡∏≠‡∏ô
# Chrome: Redux DevTools
# Firefox: Redux DevTools

# ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á package ‡πÄ‡∏û‡∏¥‡πà‡∏° Zustand support ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß!`}
            </Typography>
          </Paper>

          <Typography variant="h5" sx={{ mb: 2 }}>‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô DevTools</Typography>
          <Paper sx={{ p: 2, bgcolor: 'grey.100', mb: 3 }}>
            <Typography variant="body2" component="pre" sx={{ fontFamily: 'monospace', fontSize: '0.8rem' }}>
{`import { create } from 'zustand'
import { devtools } from 'zustand/middleware'

interface CounterState {
  count: number
  increment: () => void
  decrement: () => void
}

export const useCounterStore = create<CounterState>()(
  devtools(
    (set) => ({
      count: 0,
      increment: () => set((state) => ({ count: state.count + 1 }), 'increment'),
      decrement: () => set((state) => ({ count: state.count - 1 }), 'decrement'),
    }),
    {
      name: 'counter-store', // ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô DevTools
    }
  )
)`}
            </Typography>
          </Paper>

          <Typography variant="h5" sx={{ mb: 2 }}>‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ DevTools ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö Persist</Typography>
          <Paper sx={{ p: 2, bgcolor: 'grey.100', mb: 3 }}>
            <Typography variant="body2" component="pre" sx={{ fontFamily: 'monospace', fontSize: '0.8rem' }}>
{`import { create } from 'zustand'
import { devtools, persist, createJSONStorage } from 'zustand/middleware'

export const useUserStore = create<UserState>()(
  devtools(
    persist(
      (set) => ({
        // state ‡πÅ‡∏•‡∏∞ actions
      }),
      {
        name: 'user-storage',
        storage: createJSONStorage(() => localStorage),
      }
    ),
    {
      name: 'user-store',
    }
  )
)`}
            </Typography>
          </Paper>

          <Typography variant="h5" sx={{ mb: 2 }}>‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô DevTools</Typography>
          <List>
            <ListItem>
              <ListItemIcon><CheckCircle color="success" /></ListItemIcon>
              <ListItemText primary="‡πÄ‡∏õ‡∏¥‡∏î Browser DevTools (F12)" />
            </ListItem>
            <ListItem>
              <ListItemIcon><CheckCircle color="success" /></ListItemIcon>
              <ListItemText primary="‡πÑ‡∏õ‡∏ó‡∏µ‡πà tab Redux" />
            </ListItem>
            <ListItem>
              <ListItemIcon><CheckCircle color="success" /></ListItemIcon>
              <ListItemText primary="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å store ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π" />
            </ListItem>
            <ListItem>
              <ListItemIcon><CheckCircle color="success" /></ListItemIcon>
              <ListItemText primary="‡∏î‡∏π state changes, actions, time travel" />
            </ListItem>
          </List>

          <Alert severity="info" sx={{ mb: 3 }}>
            <Typography variant="body2">
              <strong>Production:</strong> DevTools ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô development mode ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô 
              ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠ production build
            </Typography>
          </Alert>
        </TabPanel>

        <TabPanel value={activeTab} index={6}>
          <Typography variant="h3" sx={{ mb: 3 }}>üì± Interactive Demo</Typography>
          
          <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', md: '1fr 1fr' }, gap: 3, mb: 4 }}>
            {/* Counter Demo */}
            <Card>
              <CardContent>
                <Typography variant="h5" sx={{ mb: 3 }}>Counter Store Demo</Typography>
                <Box sx={{ textAlign: 'center', mb: 3 }}>
                  <Typography variant="h3" sx={{ mb: 2 }}>{count}</Typography>
                  <Stack direction="row" spacing={2} justifyContent="center">
                    <Button
                      variant="contained"
                      startIcon={<Add />}
                      onClick={() => setCount(count + 1)}
                    >
                      +1
                    </Button>
                    <Button
                      variant="outlined"
                      startIcon={<Remove />}
                      onClick={() => setCount(count - 1)}
                    >
                      -1
                    </Button>
                    <Button
                      variant="outlined"
                      startIcon={<Refresh />}
                      onClick={() => setCount(0)}
                    >
                      Reset
                    </Button>
                  </Stack>
                </Box>
                <Alert severity="info" sx={{ mt: 2 }}>
                  <Typography variant="caption">
                    ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Zustand store ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö counter
                  </Typography>
                </Alert>
              </CardContent>
            </Card>

            {/* User Settings Demo */}
            <Card>
              <CardContent>
                <Typography variant="h5" sx={{ mb: 3 }}>Settings Store Demo</Typography>
                <Stack spacing={2}>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                    <Typography>‡∏ò‡∏µ‡∏°:</Typography>
                    <Switch
                      checked={user.theme === 'dark'}
                      onChange={(e) => setUser({
                        ...user,
                        theme: e.target.checked ? 'dark' : 'light'
                      })}
                      inputProps={{ 'aria-label': 'theme toggle' }}
                    />
                  </Box>
                  <TextField
                    label="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"
                    value={user.name}
                    onChange={(e) => setUser({ ...user, name: e.target.value })}
                    size="small"
                    fullWidth
                  />
                  <Chip
                    icon={<Person />}
                    label={`Theme: ${user.theme}, User: ${user.name}`}
                    color="primary"
                    variant="outlined"
                  />
                </Stack>
                <Alert severity="success" sx={{ mt: 2 }}>
                  <Typography variant="caption">
                    ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô localStorage (Persist)
                  </Typography>
                </Alert>
              </CardContent>
            </Card>
          </Box>

          {/* Shopping Cart Demo */}
          <Card sx={{ mb: 4 }}>
            <CardContent>
              <Typography variant="h5" sx={{ mb: 3, display: 'flex', alignItems: 'center', gap: 1 }}>
                <ShoppingCart />
                Shopping Cart Store Demo
                <Badge badgeContent={cartItems.length} color="primary">
                  <ShoppingCart />
                </Badge>
              </Typography>
              
              <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', md: '2fr 1fr' }, gap: 3 }}>
                <Box>
                  <Typography variant="h6" sx={{ mb: 2 }}>‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤</Typography>
                  {cartItems.length === 0 ? (
                    <Alert severity="info">‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤</Alert>
                  ) : (
                    <Stack spacing={2}>
                      {cartItems.map((item) => (
                        <Card key={item.id} variant="outlined">
                          <CardContent sx={{ py: 2 }}>
                            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                              <Box>
                                <Typography variant="h6">{item.name}</Typography>
                                <Typography variant="body2" color="text.secondary">
                                  ‡∏ø{item.price.toLocaleString()} √ó {item.quantity}
                                </Typography>
                              </Box>
                              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                                <Typography variant="h6">
                                  ‡∏ø{(item.price * item.quantity).toLocaleString()}
                                </Typography>
                                <IconButton
                                  color="error"
                                  onClick={() => removeFromCart(item.id)}
                                  size="small"
                                >
                                  <Delete />
                                </IconButton>
                              </Box>
                            </Box>
                          </CardContent>
                        </Card>
                      ))}
                    </Stack>
                  )}
                </Box>

                <Box>
                  <Typography variant="h6" sx={{ mb: 2 }}>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</Typography>
                  <Stack spacing={2}>
                    <Button
                      variant="outlined"
                      fullWidth
                      onClick={() => addToCart({ name: 'iPad Air', price: 22900 })}
                    >
                      ‡πÄ‡∏û‡∏¥‡πà‡∏° iPad Air (‡∏ø22,900)
                    </Button>
                    <Button
                      variant="outlined"
                      fullWidth
                      onClick={() => addToCart({ name: 'AirPods Pro', price: 8990 })}
                    >
                      ‡πÄ‡∏û‡∏¥‡πà‡∏° AirPods Pro (‡∏ø8,990)
                    </Button>
                    <Divider />
                    <Box sx={{ p: 2, bgcolor: 'primary.50', borderRadius: 1 }}>
                      <Typography variant="h6" textAlign="center">
                        ‡∏£‡∏ß‡∏°: ‡∏ø{getTotalPrice().toLocaleString()}
                      </Typography>
                    </Box>
                  </Stack>
                </Box>
              </Box>
            </CardContent>
          </Card>

          <Alert severity="success" sx={{ mb: 3 }}>
            <Typography variant="body2">
              <strong>‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢!</strong> ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Zustand ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ state ‡πÅ‡∏•‡πâ‡∏ß
              ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á global state ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß! üéâ
            </Typography>
          </Alert>
        </TabPanel>

        {/* Navigation */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mt: 6 }}>
          <Button
            startIcon={<ArrowBack />}
            component={Link}
            href="/nextjs-basics/lesson-9"
            variant="outlined"
          >
            ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 9: Authentication
          </Button>
          
          <Chip 
            label={`${activeTab + 1} / 7`}
            color="primary"
            variant="outlined"
          />
          
          <Button
            endIcon={<ArrowForward />}
            component={Link}
            href="/nextjs-basics/lesson-11"
            variant="outlined"
            disabled
          >
            ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 11: Forms
          </Button>
        </Box>
      </Box>
    </Container>
  );
} 