'use client';
import {
  Container,
  Typography,
  Box,
  Paper,
  Alert,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Chip,
  Button,
  Stepper,
  Step,
  StepLabel,
  StepContent,
  Card,
  CardContent,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Tabs,
  Tab,
  Divider,
} from '@mui/material';
import {
  CheckCircle,
  Code,
  PlayArrow,
  ExpandMore,
  Lightbulb,
  Warning,
  Info,
  Storage,
  Speed,
  Security,
  Cloud,
  Web,
  Settings,
  TableChart,
  ApiOutlined,
  DataObject,
  Memory,
  ArrowBack,
  ArrowForward,
} from '@mui/icons-material';
import Link from 'next/link';
import { useState } from 'react';

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

function CustomTabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`simple-tabpanel-${index}`}
      aria-labelledby={`simple-tab-${index}`}
      {...other}
    >
      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}
    </div>
  );
}

const prismaFeatures = [
  {
    title: 'Type Safety (Enhanced)',
    description: 'Generated TypeScript types ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏° database schema (Prisma 6.x)',
    icon: <Security />,
    color: 'success'
  },
  {
    title: 'Prisma Postgres (GA)',
    description: 'Managed PostgreSQL service ‡∏Ç‡∏≠‡∏á Prisma ‡∏û‡∏£‡πâ‡∏≠‡∏° zero cold starts',
    icon: <Cloud />,
    color: 'primary'
  },
  {
    title: 'TypedSQL',
    description: 'Type-safe raw SQL queries ‡∏î‡πâ‡∏ß‡∏¢ .sql files ‡πÅ‡∏•‡∏∞ auto-completion',
    icon: <Code />,
    color: 'info'
  },
  {
    title: 'Omit API (GA)',
    description: '‡∏ã‡πà‡∏≠‡∏ô fields ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ query (‡∏ú‡πà‡∏≤‡∏ô GA ‡πÅ‡∏•‡πâ‡∏ß)',
    icon: <Security />,
    color: 'warning'
  }
];

export default function Lesson6Page() {
  const [activeStep, setActiveStep] = useState(0);
  const [tabValue, setTabValue] = useState(0);

  const handleNext = () => {
    setActiveStep((prevActiveStep) => prevActiveStep + 1);
  };

  const handleBack = () => {
    setActiveStep((prevActiveStep) => prevActiveStep - 1);
  };

  const handleReset = () => {
    setActiveStep(0);
  };

  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };

  return (
    <Container maxWidth="lg">
      {/* Header */}
      <Box sx={{ py: 4 }}>
        <Typography variant="h1" sx={{ mb: 2 }}>
          üóÑÔ∏è ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 6: Prisma & Database
        </Typography>
        <Typography variant="h5" color="text.secondary" sx={{ mb: 4 }}>
          ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Prisma ORM ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (6.8.0) ‡∏Å‡∏±‡∏ö Next.js 15 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
        </Typography>

        <Box sx={{ display: 'flex', gap: 2, mb: 4 }}>
          <Chip label="50 ‡∏ô‡∏≤‡∏ó‡∏µ" color="primary" />
          <Chip label="‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á" color="secondary" />
          <Chip label="‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å" color="error" />
          <Chip label="Prisma 6.8.0" color="success" />
          <Chip label="Prisma Postgres" color="info" />
        </Box>
      </Box>

      {/* Learning Objectives */}
      <Paper sx={{ p: 3, mb: 4, bgcolor: 'primary.light', color: 'primary.contrastText' }}>
        <Typography variant="h6" sx={{ mb: 2, display: 'flex', alignItems: 'center', gap: 1 }}>
          <Lightbulb /> ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
        </Typography>
        <List dense>
          <ListItem>
            <ListItemIcon sx={{ color: 'inherit' }}>
              <CheckCircle />
            </ListItemIcon>
            <ListItemText primary="‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à Prisma ORM 6.x ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏ô Next.js 15" />
          </ListItem>
          <ListItem>
            <ListItemIcon sx={{ color: 'inherit' }}>
              <CheckCircle />
            </ListItemIcon>
            <ListItemText primary="‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Database Schema ‡πÅ‡∏•‡∏∞ Migrations ‡πÑ‡∏î‡πâ" />
          </ListItem>
          <ListItem>
            <ListItemIcon sx={{ color: 'inherit' }}>
              <CheckCircle />
            </ListItemIcon>
            <ListItemText primary="‡πÉ‡∏ä‡πâ Prisma Client ‡∏Å‡∏±‡∏ö Server Components ‡πÅ‡∏•‡∏∞ API Routes" />
          </ListItem>
          <ListItem>
            <ListItemIcon sx={{ color: 'inherit' }}>
              <CheckCircle />
            </ListItemIcon>
            <ListItemText primary="‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ Prisma Postgres ‡πÅ‡∏•‡∏∞ TypedSQL (‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)" />
          </ListItem>
        </List>
      </Paper>

      {/* What is Prisma */}
      <Paper sx={{ p: 4, mb: 4 }}>
        <Typography variant="h4" sx={{ mb: 3 }}>
          ü§î Prisma ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?
        </Typography>
        
        <Typography variant="body1" sx={{ mb: 3, lineHeight: 1.7 }}>
          <strong>Prisma</strong> ‡πÄ‡∏õ‡πá‡∏ô Next-generation ORM (Object-Relational Mapping) ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Node.js/TypeScript 
          ‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡πâ‡∏ß‡∏¢ type safety ‡πÅ‡∏•‡∏∞ developer experience ‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°
        </Typography>

        <Alert severity="info" sx={{ mb: 3 }}>
          <Typography variant="body2">
            üéâ <strong>Prisma 6.8.0 + Next.js 15:</strong> ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö React 19, 
            Prisma Postgres (GA), TypedSQL, omit API, enhanced caching ‡πÅ‡∏•‡∏∞ performance improvements ‡∏°‡∏≤‡∏Å‡∏°‡∏≤‡∏¢
          </Typography>
        </Alert>

        {/* Features Grid */}
        <Typography variant="h6" sx={{ mb: 3 }}>
          üåü ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏î‡πà‡∏ô‡∏Ç‡∏≠‡∏á Prisma 6.x:
        </Typography>
        
        <Box sx={{ 
          display: 'flex', 
          flexDirection: { xs: 'column', sm: 'row' }, 
          gap: 2,
          flexWrap: 'wrap',
          mb: 4
        }}>
          {prismaFeatures.map((feature, index) => (
            <Box key={index} sx={{ flex: 1, minWidth: '250px' }}>
              <Card sx={{ height: '100%' }}>
                <CardContent>
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>
                    <Box sx={{ color: `${feature.color}.main` }}>
                      {feature.icon}
                    </Box>
                    <Typography variant="h6">
                      {feature.title}
                    </Typography>
                  </Box>
                  <Typography variant="body2">
                    {feature.description}
                  </Typography>
                </CardContent>
              </Card>
            </Box>
          ))}
        </Box>

        {/* Architecture */}
        <Typography variant="h6" sx={{ mb: 2 }}>
          üèóÔ∏è ‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡∏Å‡∏£‡∏£‡∏° Prisma:
        </Typography>

        <Box sx={{ display: 'flex', flexDirection: { xs: 'column', md: 'row' }, gap: 3, mb: 4 }}>
          <Paper sx={{ p: 3, flex: 1, bgcolor: 'grey.50' }}>
            <Typography variant="h6" sx={{ mb: 2, color: 'primary.main' }}>
              üìÑ Prisma Schema
            </Typography>
            <Typography variant="body2" sx={{ mb: 2 }}>
              ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏†‡∏≤‡∏©‡∏≤ DSL ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢
            </Typography>
            <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 2 }}>
              <Typography variant="body2">
                schema.prisma
              </Typography>
            </Box>
          </Paper>

          <Paper sx={{ p: 3, flex: 1, bgcolor: 'success.light' }}>
            <Typography variant="h6" sx={{ mb: 2, color: 'success.dark' }}>
              üîß Prisma Client
            </Typography>
            <Typography variant="body2" sx={{ mb: 2 }}>
              Type-safe client ‡∏ó‡∏µ‡πà generated ‡∏à‡∏≤‡∏Å schema ‡∏û‡∏£‡πâ‡∏≠‡∏° autocomplete
            </Typography>
            <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 2 }}>
              <Typography variant="body2">
                @prisma/client
              </Typography>
            </Box>
          </Paper>

          <Paper sx={{ p: 3, flex: 1, bgcolor: 'info.light' }}>
            <Typography variant="h6" sx={{ mb: 2, color: 'info.dark' }}>
              üóÑÔ∏è Database
            </Typography>
            <Typography variant="body2" sx={{ mb: 2 }}>
              ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö PostgreSQL, MySQL, SQLite, MongoDB ‡πÅ‡∏•‡∏∞‡∏≠‡∏∑‡πà‡∏ô‡πÜ
            </Typography>
            <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 2 }}>
              <Typography variant="body2">
                Various Databases
              </Typography>
            </Box>
          </Paper>
        </Box>
      </Paper>

      {/* Installation & Setup */}
      <Paper sx={{ p: 4, mb: 4 }}>
        <Typography variant="h4" sx={{ mb: 3 }}>
          üíª ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡∏∞ Setup Prisma
        </Typography>

        <Alert severity="warning" sx={{ mb: 3 }}>
          <Typography variant="body2">
            <Warning sx={{ mr: 1, verticalAlign: 'middle' }} />
            <strong>‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô:</strong> ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ Node.js 18.18.0+ ‡πÅ‡∏•‡∏∞ Next.js 15
          </Typography>
        </Alert>

        <Stepper activeStep={activeStep} orientation="vertical">
          <Step>
            <StepLabel>
              <Typography variant="h6">‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Prisma</Typography>
            </StepLabel>
            <StepContent>
              <Typography variant="body1" sx={{ mb: 2 }}>
                ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Prisma CLI ‡πÅ‡∏•‡∏∞ Client ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Next.js 15
              </Typography>
              
              <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 2 }}>
                <Typography variant="body2" component="pre">
{`# ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Prisma CLI
npm install prisma@latest --save-dev

# ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Prisma Client
npm install @prisma/client@latest

# ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á database driver (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á PostgreSQL)
npm install pg @types/pg

# ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ Prisma Postgres (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)
# ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á driver ‡πÄ‡∏û‡∏¥‡πà‡∏°`}
                </Typography>
              </Box>

              <Alert severity="success" sx={{ mb: 2 }}>
                <Typography variant="body2">
                  ‚úÖ <strong>Prisma 6.8.0:</strong> ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Prisma Postgres, TypedSQL ‡πÅ‡∏•‡∏∞ Edge Runtime
                </Typography>
              </Alert>

              <Button variant="contained" onClick={handleNext} sx={{ mt: 1, mr: 1 }}>
                ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
              </Button>
            </StepContent>
          </Step>

          <Step>
            <StepLabel>
              <Typography variant="h6">Initialize Prisma</Typography>
            </StepLabel>
            <StepContent>
              <Typography variant="body1" sx={{ mb: 2 }}>
                ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Prisma schema ‡πÅ‡∏•‡∏∞ environment variables
              </Typography>
              
              <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 2 }}>
                <Box sx={{ bgcolor: 'grey.900', color: 'white', p: 2, borderRadius: 1, fontFamily: 'monospace', mb: 2 }}>
                  <Typography variant="body2">
                    $ npx prisma init
                  </Typography>
                </Box>

                <Typography variant="body2" sx={{ mb: 2 }}>
                  ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ Prisma Postgres (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÉ‡∏´‡∏°‡πà):
                </Typography>

                <Box sx={{ bgcolor: 'grey.900', color: 'white', p: 2, borderRadius: 1, fontFamily: 'monospace', mb: 2 }}>
                  <Typography variant="body2">
                    $ npx prisma@latest init --db prisma
                  </Typography>
                </Box>

                <Typography variant="body2" sx={{ mb: 2 }}>
                  ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå:
                </Typography>

                <List dense sx={{ mb: 2 }}>
                  <ListItem>
                    <ListItemIcon>
                      <CheckCircle color="success" />
                    </ListItemIcon>
                    <ListItemText primary="prisma/schema.prisma - Schema ‡∏Ç‡∏≠‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" />
                  </ListItem>
                  <ListItem>
                    <ListItemIcon>
                      <CheckCircle color="success" />
                    </ListItemIcon>
                    <ListItemText primary=".env - Environment variables" />
                  </ListItem>
                </List>

                <Button variant="contained" onClick={handleNext} sx={{ mt: 1, mr: 1 }}>
                  ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                </Button>
                <Button onClick={handleBack} sx={{ mt: 1, mr: 1 }}>
                  ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
                </Button>
              </Box>
            </StepContent>
          </Step>

          <Step>
            <StepLabel>
              <Typography variant="h6">‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Environment Variables</Typography>
            </StepLabel>
            <StepContent>
              <Typography variant="body1" sx={{ mb: 2 }}>
                ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå .env ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î DATABASE_URL
              </Typography>
              
              <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 2 }}>
                <Typography variant="body2" component="pre">
{`# .env
# Prisma Postgres (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)
DATABASE_URL="prisma+postgres://accelerate.prisma-data.net/?api_key=your_api_key"

# ‡∏´‡∏£‡∏∑‡∏≠ PostgreSQL ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
# DATABASE_URL="postgresql://username:password@localhost:5432/mydb?schema=public"

# ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SQLite (development)
# DATABASE_URL="file:./dev.db"`}
                </Typography>
              </Box>

              <Alert severity="info" sx={{ mb: 2 }}>
                <Typography variant="body2">
                  üí° <strong>Prisma Postgres:</strong> Zero cold starts, global caching, ‡πÅ‡∏•‡∏∞ connection pooling built-in
                </Typography>
              </Alert>

              <Button variant="contained" onClick={handleNext} sx={{ mt: 1, mr: 1 }}>
                ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
              </Button>
              <Button onClick={handleBack} sx={{ mt: 1, mr: 1 }}>
                ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
              </Button>
            </StepContent>
          </Step>

          <Step>
            <StepLabel>
              <Typography variant="h6">‡∏™‡∏£‡πâ‡∏≤‡∏á Prisma Client Instance</Typography>
            </StepLabel>
            <StepContent>
              <Typography variant="body1" sx={{ mb: 2 }}>
                ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Prisma Client instance
              </Typography>
              
              <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 2 }}>
                <Typography variant="body2">
                  $ mkdir lib && touch lib/prisma.ts
                </Typography>
              </Box>

              <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 2 }}>
                <Typography variant="body2" component="pre">
{`// lib/prisma.ts - Prisma 6.x compatible
import { PrismaClient } from '@prisma/client';

const createPrismaClient = () => {
  return new PrismaClient({
    log: process.env.NODE_ENV === 'development' 
      ? ['query', 'error', 'warn'] 
      : ['error'],
    
    // Prisma 6.x: Enhanced transaction options
    transactionOptions: {
      timeout: 10000, // 10 seconds
      maxWait: 5000,  // 5 seconds
      isolationLevel: 'ReadCommitted'
    }
  });
};

const globalForPrisma = globalThis as unknown as {
  prisma: ReturnType<typeof createPrismaClient> | undefined;
};

export const prisma = globalForPrisma.prisma ?? createPrismaClient();

if (process.env.NODE_ENV !== 'production') {
  globalForPrisma.prisma = prisma;
}

// Connection monitoring
export async function checkConnection() {
  try {
    await prisma.$queryRaw\`SELECT 1\`;
    console.log('‚úÖ Database connected');
  } catch (error) {
    console.error('‚ùå Database connection failed:', error);
  }
}

// Graceful shutdown
export async function closeConnection() {
  await prisma.$disconnect();
}`}
                </Typography>
              </Box>

              <Alert severity="warning" sx={{ mb: 2 }}>
                <Typography variant="body2">
                  ‚ö†Ô∏è <strong>Prisma 6.x:</strong> Enhanced connection management ‡πÅ‡∏•‡∏∞ transaction options
                </Typography>
              </Alert>

              <Button variant="contained" onClick={handleNext} sx={{ mt: 1, mr: 1 }}>
                ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
              </Button>
              <Button onClick={handleBack} sx={{ mt: 1, mr: 1 }}>
                ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
              </Button>
            </StepContent>
          </Step>
        </Stepper>

        {activeStep === 4 && (
          <Paper sx={{ p: 3, mt: 3, bgcolor: 'success.light' }}>
            <Typography variant="h6" sx={{ mb: 2 }}>
              üéâ Setup ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!
            </Typography>
            <Typography variant="body1" sx={{ mb: 2 }}>
              ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Prisma ‡∏Å‡∏±‡∏ö Next.js 15 ‡πÅ‡∏•‡πâ‡∏ß
            </Typography>
            <Button onClick={handleReset} sx={{ mt: 1, mr: 1 }}>
              ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
            </Button>
          </Paper>
        )}
      </Paper>

      {/* Database Schema */}
      <Paper sx={{ p: 4, mb: 4 }}>
        <Typography variant="h4" sx={{ mb: 3 }}>
          üìù ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Database Schema
        </Typography>

        <Typography variant="body1" sx={{ mb: 3 }}>
          ‡∏°‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Prisma Schema ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        </Typography>

        <Tabs value={tabValue} onChange={handleTabChange} sx={{ mb: 3 }}>
          <Tab label="Basic Schema" />
          <Tab label="Relations" />
          <Tab label="Advanced Features" />
        </Tabs>

        <CustomTabPanel value={tabValue} index={0}>
          <Typography variant="h6" sx={{ mb: 2, color: 'primary.main' }}>
            üìÑ Basic Schema Structure (Prisma 6.x)
          </Typography>
          
          <Box className="code-block" sx={{ p: 2, borderRadius: 1, fontFamily: 'monospace', mb: 3 }}>
            <Typography variant="body2" component="pre">
{`// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
  // Prisma 6.x features
  previewFeatures = ["typedSql", "relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid(7)) // UUIDv7 support
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  posts     Post[]
  profile   Profile?
  
  @@map("users")
}

model Post {
  id        String   @id @default(uuid(7))
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  author    User     @relation(fields: [authorId], references: [id])
  
  @@map("posts")
}`}
            </Typography>
          </Box>

          <Alert severity="info">
            <Typography variant="body2">
              üí° <strong>Prisma 6.x:</strong> uuid(7) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö temporally sortable IDs, typedSql ‡πÅ‡∏•‡∏∞ relationJoins
            </Typography>
          </Alert>
        </CustomTabPanel>

        <CustomTabPanel value={tabValue} index={1}>
          <Typography variant="h6" sx={{ mb: 2, color: 'success.main' }}>
            üîó Database Relations
          </Typography>
          
          <Box className="code-block" sx={{ p: 2, borderRadius: 1, fontFamily: 'monospace', mb: 3 }}>
            <Typography variant="body2" component="pre">
{`model User {
  id    Int    @id @default(autoincrement())
  email String @unique
  name  String?
  
  // One-to-Many: User ‡∏°‡∏µ Posts ‡∏´‡∏•‡∏≤‡∏¢‡∏≠‡∏±‡∏ô
  posts    Post[]
  
  // One-to-One: User ‡∏°‡∏µ Profile ‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏≠‡∏±‡∏ô
  profile  Profile?
  
  // Many-to-Many: User ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ follow Users ‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ
  following Follow[] @relation("UserFollows")
  followers Follow[] @relation("UserFollowers")
}

model Post {
  id       Int     @id @default(autoincrement())
  title    String
  content  String?
  authorId Int
  
  // Many-to-One: Post ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á User ‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ñ‡∏ô
  author   User    @relation(fields: [authorId], references: [id])
  
  // Many-to-Many: Post ‡∏°‡∏µ Categories ‡∏´‡∏•‡∏≤‡∏¢‡∏≠‡∏±‡∏ô
  categories PostCategory[]
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  avatar String?
  userId Int     @unique
  
  // One-to-One: Profile ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á User ‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ñ‡∏ô
  user   User    @relation(fields: [userId], references: [id])
}

model Follow {
  id          Int @id @default(autoincrement())
  followerId  Int
  followingId Int
  
  follower  User @relation("UserFollowers", fields: [followerId], references: [id])
  following User @relation("UserFollows", fields: [followingId], references: [id])
  
  @@unique([followerId, followingId])
}`}
            </Typography>
          </Box>

          <Alert severity="success">
            <Typography variant="body2">
              ‚úÖ <strong>Relations:</strong> One-to-One, One-to-Many, Many-to-Many
            </Typography>
          </Alert>
        </CustomTabPanel>

        <CustomTabPanel value={tabValue} index={2}>
          <Typography variant="h6" sx={{ mb: 2, color: 'warning.main' }}>
            ‚ö° Advanced Features (Prisma 6.x)
          </Typography>
          
          <Box className="code-block" sx={{ p: 2, borderRadius: 1, fontFamily: 'monospace', mb: 3 }}>
            <Typography variant="body2" component="pre">
{`// Prisma 6.x Advanced Features
model User {
  id    String @id @default(uuid(7)) // UUIDv7
  email String @unique
  name  String
  role  Role   @default(USER)
  
  // Indexes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö performance
  @@index([email])
  @@index([name, email])
}

model Product {
  id          String  @id @default(uuid(7))
  name        String
  price       Decimal @db.Decimal(10, 2)
  description String? @db.Text
  metadata    Json?   // Enhanced JSON support
  
  @@check(price > 0)
}

// Enums
enum Role {
  USER
  ADMIN
  MODERATOR
}

// TypedSQL files (NEW in Prisma 6.x)
// Create: sql/getUserWithPosts.sql
/*
SELECT u.id, u.name, u.email,
       COUNT(p.id) as post_count
FROM users u
LEFT JOIN posts p ON p.author_id = u.id
WHERE u.id = $1
GROUP BY u.id, u.name, u.email;
*/`}
            </Typography>
          </Box>

          <Alert severity="info">
            <Typography variant="body2">
              ‚ú® <strong>TypedSQL:</strong> Type-safe raw SQL queries ‡∏î‡πâ‡∏ß‡∏¢ .sql files
            </Typography>
          </Alert>
        </CustomTabPanel>
      </Paper>

      {/* Migrations */}
      <Paper sx={{ p: 4, mb: 4 }}>
        <Typography variant="h4" sx={{ mb: 3 }}>
          üîÑ Database Migrations
        </Typography>

        <Typography variant="body1" sx={{ mb: 3 }}>
          Migrations ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á database schema ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÑ‡∏î‡πâ
        </Typography>

        <Accordion sx={{ mb: 2 }}>
          <AccordionSummary expandIcon={<ExpandMore />}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
              <TableChart color="primary" />
              <Typography variant="h6">‡∏™‡∏£‡πâ‡∏≤‡∏á Migration ‡πÅ‡∏£‡∏Å</Typography>
            </Box>
          </AccordionSummary>
          <AccordionDetails>
            <Typography variant="body1" sx={{ mb: 2 }}>
              ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á schema ‡πÅ‡∏•‡πâ‡∏ß ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á migration ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            </Typography>
            
            <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 2 }}>
              <Typography variant="body2">
                $ npx prisma migrate dev --name init
              </Typography>
            </Box>

            <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 2 }}>
              <Typography variant="body2">
                $ npx prisma generate
              </Typography>
            </Box>

            <Alert severity="success" sx={{ mb: 2 }}>
              <Typography variant="body2">
                ‚úÖ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå migration ‡πÉ‡∏ô prisma/migrations/ ‡πÅ‡∏•‡∏∞ generate Prisma Client
              </Typography>
            </Alert>
          </AccordionDetails>
        </Accordion>

        <Accordion sx={{ mb: 2 }}>
          <AccordionSummary expandIcon={<ExpandMore />}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
              <Settings color="warning" />
              <Typography variant="h6">Migration Commands</Typography>
            </Box>
          </AccordionSummary>
          <AccordionDetails>
            <Box sx={{ bgcolor: 'grey.50', p: 2, borderRadius: 1, fontFamily: 'monospace', mb: 2 }}>
              <Typography variant="body2" component="pre">
{`# Development commands
npx prisma migrate dev           # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞ apply migration
npx prisma migrate reset         # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï database ‡πÅ‡∏•‡∏∞ apply migrations ‡πÉ‡∏´‡∏°‡πà
npx prisma db push              # Push schema ‡πÑ‡∏õ database (no migration)

# Production commands  
npx prisma migrate deploy       # Apply pending migrations
npx prisma migrate status       # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö migration status

# Utility commands
npx prisma generate             # Generate Prisma Client
npx prisma generate --sql       # Generate TypedSQL queries
npx prisma db seed              # Run seed script
npx prisma studio              # ‡πÄ‡∏õ‡∏¥‡∏î Database GUI

# Prisma Postgres commands
npx prisma dev                  # Start local Prisma Postgres
npx prisma studio --browser none # Studio without browser`}
              </Typography>
            </Box>

            <Alert severity="success">
              <Typography variant="body2">
                ‚úÖ <strong>Prisma 6.x:</strong> Enhanced CLI commands ‡πÅ‡∏•‡∏∞ Prisma Postgres support
              </Typography>
            </Alert>
          </AccordionDetails>
        </Accordion>
      </Paper>

      {/* CRUD Operations */}
      <Paper sx={{ p: 4, mb: 4 }}>
        <Typography variant="h4" sx={{ mb: 3 }}>
          üìä CRUD Operations ‡∏Å‡∏±‡∏ö Prisma
        </Typography>

        <Typography variant="body1" sx={{ mb: 3 }}>
          ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Prisma Client ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥ CRUD operations ‡πÉ‡∏ô Next.js 15
        </Typography>

        <Accordion sx={{ mb: 2 }}>
          <AccordionSummary expandIcon={<ExpandMore />}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
              <DataObject color="success" />
              <Typography variant="h6">Server Components Data Fetching</Typography>
            </Box>
          </AccordionSummary>
          <AccordionDetails>
            <Typography variant="body1" sx={{ mb: 2 }}>
              ‡πÉ‡∏ä‡πâ Prisma ‡πÉ‡∏ô Server Components ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö data fetching ‡∏î‡πâ‡∏ß‡∏¢ React 19 ‡πÅ‡∏•‡∏∞ Prisma 6.x
            </Typography>
            
            <Box className="code-block" sx={{ p: 2, borderRadius: 1, fontFamily: 'monospace', mb: 2 }}>
              <Typography variant="body2" component="pre">
{`// app/users/page.tsx (Server Component)
import { prisma } from '@/lib/prisma';

export default async function UsersPage() {
  // Prisma 6.x: Enhanced query performance
  const users = await prisma.user.findMany({
    relationLoadStrategy: 'join', // New in Prisma 6.x
    include: {
      posts: true,
      _count: {
        posts: true
      }
    },
    orderBy: {
      createdAt: 'desc'
    }
  });

  return (
    <div>
      <h1>‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ({users.length} ‡∏Ñ‡∏ô)</h1>
      {users.map(user => (
        <div key={user.id} className="border p-4 mb-4">
          <h3>{user.name || 'No Name'}</h3>
          <p>‡∏≠‡∏µ‡πÄ‡∏°‡∏•: {user.email}</p>
          <p>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏û‡∏™‡∏ï‡πå: {user._count.posts}</p>
          <p>‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠: {user.createdAt.toLocaleDateString('th-TH')}</p>
        </div>
      ))}
    </div>
  );
}

// TypedSQL Example (NEW in Prisma 6.x)
import { getUserWithPosts } from '@/generated/sql';

export async function getServerSideProps({ params }: { params: { id: string } }) {
  const userWithStats = await prisma.$queryRawTyped(
    getUserWithPosts(params.id)
  );
  
  return {
    props: { user: userWithStats[0] }
  };
}`}
              </Typography>
            </Box>

            <Alert severity="info">
              <Typography variant="body2">
                üí° <strong>Prisma 6.x:</strong> relationLoadStrategy ‡πÅ‡∏•‡∏∞ TypedSQL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö performance ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
              </Typography>
            </Alert>
          </AccordionDetails>
        </Accordion>

        <Accordion sx={{ mb: 2 }}>
          <AccordionSummary expandIcon={<ExpandMore />}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
              <ApiOutlined color="primary" />
              <Typography variant="h6">API Routes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CRUD</Typography>
            </Box>
          </AccordionSummary>
          <AccordionDetails>
            <Typography variant="body1" sx={{ mb: 2 }}>
              ‡∏™‡∏£‡πâ‡∏≤‡∏á API routes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CRUD operations ‡∏î‡πâ‡∏ß‡∏¢ Next.js 15 async APIs
            </Typography>
            
            <Box className="code-block" sx={{ p: 2, borderRadius: 1, fontFamily: 'monospace', mb: 2 }}>
              <Typography variant="body2" component="pre">
{`// app/api/users/route.ts (Prisma 6.x)
import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

// GET: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• users ‡∏û‡∏£‡πâ‡∏≠‡∏° omit sensitive fields
export async function GET() {
  try {
    const users = await prisma.user.findMany({
      omit: {
        // Omit API - GA in Prisma 6.x
        password: true,
        resetToken: true
      },
      include: {
        _count: {
          select: { posts: true }
        }
      }
    });

    return NextResponse.json(users);
  } catch (error) {
    console.error('Database error:', error);
    return NextResponse.json(
      { error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ' },
      { status: 500 }
    );
  }
}

// POST: ‡∏™‡∏£‡πâ‡∏≤‡∏á user ‡πÉ‡∏´‡∏°‡πà ‡∏û‡∏£‡πâ‡∏≠‡∏° enhanced validation
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { name, email } = body;

    // Enhanced validation
    if (!email || !name) {
      return NextResponse.json(
        { error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å name ‡πÅ‡∏•‡∏∞ email' },
        { status: 400 }
      );
    }

    // Prisma 6.x: createManyAndReturn for better performance
    const user = await prisma.user.create({
      data: {
        id: crypto.randomUUID(), // or use uuid(7) in schema
        name,
        email,
      },
      omit: {
        password: true // ‡∏ã‡πà‡∏≠‡∏ô sensitive data
      }
    });

    return NextResponse.json(user, { status: 201 });
  } catch (error: any) {
    // Handle Prisma 6.x errors
    if (error.code === 'P2002') {
      return NextResponse.json(
        { error: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß' },
        { status: 400 }
      );
    }

    console.error('Database error:', error);
    return NextResponse.json(
      { error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ' },
      { status: 500 }
    );
  }
}`}
              </Typography>
            </Box>

            <Alert severity="success">
              <Typography variant="body2">
                ‚úÖ <strong>Omit API (GA):</strong> ‡∏ã‡πà‡∏≠‡∏ô sensitive fields ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ select
              </Typography>
            </Alert>
          </AccordionDetails>
        </Accordion>

        <Accordion sx={{ mb: 2 }}>
          <AccordionSummary expandIcon={<ExpandMore />}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
              <Memory color="warning" />
              <Typography variant="h6">Dynamic Routes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Individual Records</Typography>
            </Box>
          </AccordionSummary>
          <AccordionDetails>
            <Typography variant="body1" sx={{ mb: 2 }}>
              ‡∏™‡∏£‡πâ‡∏≤‡∏á API routes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ record ‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡πÜ ‡∏î‡πâ‡∏ß‡∏¢ async params
            </Typography>
            
            <Box className="code-block" sx={{ p: 2, borderRadius: 1, fontFamily: 'monospace', mb: 2 }}>
              <Typography variant="body2" component="pre">
{`// app/api/users/[id]/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

// GET: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡πÇ‡∏î‡∏¢ ID
export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params;
    const userId = parseInt(id);

    if (isNaN(userId)) {
      return NextResponse.json(
        { error: 'ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' },
        { status: 400 }
      );
    }

    const user = await prisma.user.findUnique({
      where: { id: userId },
      include: {
        posts: {
          orderBy: { createdAt: 'desc' }
        }
      }
    });

    if (!user) {
      return NextResponse.json(
        { error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' },
        { status: 404 }
      );
    }

    return NextResponse.json(user);
  } catch (error) {
    console.error('Database error:', error);
    return NextResponse.json(
      { error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ' },
      { status: 500 }
    );
  }
}

// PUT: ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó user
export async function PUT(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params;
    const userId = parseInt(id);
    const body = await request.json();

    const user = await prisma.user.update({
      where: { id: userId },
      data: body
    });

    return NextResponse.json(user);
  } catch (error: any) {
    if (error.code === 'P2025') {
      return NextResponse.json(
        { error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' },
        { status: 404 }
      );
    }

    return NextResponse.json(
      { error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÑ‡∏î‡πâ' },
      { status: 500 }
    );
  }
}

// DELETE: ‡∏•‡∏ö user
export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params;
    const userId = parseInt(id);

    await prisma.user.delete({
      where: { id: userId }
    });

    return NextResponse.json(
      { message: '‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢' },
      { status: 200 }
    );
  } catch (error: any) {
    if (error.code === 'P2025') {
      return NextResponse.json(
        { error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' },
        { status: 404 }
      );
    }

    return NextResponse.json(
      { error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏î‡πâ' },
      { status: 500 }
    );
  }
}`}
              </Typography>
            </Box>

            <Alert severity="warning">
              <Typography variant="body2">
                ‚ö†Ô∏è <strong>Next.js 15:</strong> params ‡πÄ‡∏õ‡πá‡∏ô Promise ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ await
              </Typography>
            </Alert>
          </AccordionDetails>
        </Accordion>
      </Paper>

      {/* Best Practices */}
      <Paper sx={{ p: 4, mb: 4, bgcolor: 'warning.light' }}>
        <Typography variant="h5" sx={{ mb: 2, color: 'warning.dark' }}>
          üí° Best Practices ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Prisma + Next.js 15
        </Typography>
        <List>
          <ListItem>
            <ListItemIcon>
              <CheckCircle color="success" />
            </ListItemIcon>
            <ListItemText 
              primary="‡πÉ‡∏ä‡πâ Prisma Client Singleton (Enhanced)"
              secondary="‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô connection limit ‡∏î‡πâ‡∏ß‡∏¢ global instance pattern ‡πÅ‡∏•‡∏∞ transaction options"
            />
          </ListItem>
          <ListItem>
            <ListItemIcon>
              <CheckCircle color="success" />
            </ListItemIcon>
            <ListItemText 
              primary="Leverage Prisma Postgres"
              secondary="‡πÉ‡∏ä‡πâ Prisma Postgres ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö zero cold starts ‡πÅ‡∏•‡∏∞ global performance"
            />
          </ListItem>
          <ListItem>
            <ListItemIcon>
              <CheckCircle color="success" />
            </ListItemIcon>
            <ListItemText 
              primary="‡πÉ‡∏ä‡πâ TypedSQL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Complex Queries"
              secondary="Type-safe raw SQL queries ‡∏î‡πâ‡∏ß‡∏¢ .sql files ‡πÅ‡∏•‡∏∞ $queryRawTyped"
            />
          </ListItem>
          <ListItem>
            <ListItemIcon>
              <CheckCircle color="success" />
            </ListItemIcon>
            <ListItemText 
              primary="‡πÉ‡∏ä‡πâ Omit API ‡πÅ‡∏ó‡∏ô Select"
              secondary="‡∏ã‡πà‡∏≠‡∏ô sensitive fields ‡∏î‡πâ‡∏ß‡∏¢ omit option (GA ‡πÉ‡∏ô Prisma 6.x)"
            />
          </ListItem>
          <ListItem>
            <ListItemIcon>
              <CheckCircle color="success" />
            </ListItemIcon>
            <ListItemText 
              primary="Optimize Queries ‡∏î‡πâ‡∏ß‡∏¢ relationLoadStrategy"
              secondary="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 'join' ‡∏´‡∏£‡∏∑‡∏≠ 'query' strategy ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö relation loading"
            />
          </ListItem>
          <ListItem>
            <ListItemIcon>
              <CheckCircle color="success" />
            </ListItemIcon>
            <ListItemText 
              primary="‡πÉ‡∏ä‡πâ UUIDv7 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Primary Keys"
              secondary="Temporally sortable UUIDs ‡∏î‡πâ‡∏ß‡∏¢ uuid(7) function"
            />
          </ListItem>
        </List>
      </Paper>

      {/* Performance & Caching */}
      <Paper sx={{ p: 4, mb: 4 }}>
        <Typography variant="h4" sx={{ mb: 3 }}>
          ‚ö° Performance ‡πÅ‡∏•‡∏∞ Caching ‡πÉ‡∏ô Next.js 15
        </Typography>

        <Tabs value={tabValue} onChange={handleTabChange} sx={{ mb: 3 }}>
          <Tab label="Next.js 15 Caching" />
          <Tab label="Query Optimization" />
          <Tab label="Connection Pooling" />
        </Tabs>

        <CustomTabPanel value={tabValue} index={0}>
          <Typography variant="h6" sx={{ mb: 2, color: 'success.main' }}>
            üîÑ Prisma 6.x Caching & Performance
          </Typography>
          
          <Box className="code-block" sx={{ p: 2, borderRadius: 1, fontFamily: 'monospace', mb: 3 }}>
            <Typography variant="body2" component="pre">
{`// Server Components - Enhanced with Prisma 6.x
export default async function PostsPage() {
  // Prisma 6.x: relationLoadStrategy for better performance
  const posts = await prisma.post.findMany({
    relationLoadStrategy: 'join', // Database-level joins
    include: {
      author: {
        omit: {
          email: true // Hide sensitive data
        }
      }
    }
  });
  
  return <PostList posts={posts} />;
}

// TypedSQL for complex queries
import { getPostsWithStats } from '@/generated/sql';

export async function getComplexData() {
  const result = await prisma.$queryRawTyped(
    getPostsWithStats({ 
      limit: 10, 
      offset: 0 
    })
  );
  
  return result;
}

// Prisma Postgres with global caching (built-in)
const prisma = new PrismaClient({
  // Prisma Postgres handles caching automatically
  log: ['query', 'info', 'warn', 'error'],
});`}
            </Typography>
          </Box>

          <Alert severity="info">
            <Typography variant="body2">
              üí° <strong>Prisma 6.x:</strong> Built-in performance optimizations ‡πÅ‡∏•‡∏∞ Prisma Postgres caching
            </Typography>
          </Alert>
        </CustomTabPanel>

        <CustomTabPanel value={tabValue} index={1}>
          <Typography variant="h6" sx={{ mb: 2, color: 'info.main' }}>
            üìä Advanced Query Optimization (Prisma 6.x)
          </Typography>
          
          <Box className="code-block" sx={{ p: 2, borderRadius: 1, fontFamily: 'monospace', mb: 3 }}>
            <Typography variant="body2" component="pre">
{`// Prisma 6.x: Enhanced query strategies
const posts = await prisma.post.findMany({
  relationLoadStrategy: 'join', // Use database joins
  include: {
    author: true,
    comments: {
      include: {
        author: true
      }
    }
  }
});

// Omit API for cleaner data fetching
const users = await prisma.user.findMany({
  omit: {
    password: true,
    resetToken: true,
    internalNotes: true
  },
  include: {
    posts: {
      omit: {
        draft: true // Hide drafts
      }
    }
  }
});

// TypedSQL for complex analytics
// sql/getUserAnalytics.sql
/*
SELECT 
  u.id,
  u.name,
  COUNT(p.id) as total_posts,
  AVG(p.view_count) as avg_views,
  MAX(p.created_at) as last_post_date
FROM users u
LEFT JOIN posts p ON p.author_id = u.id
WHERE u.created_at >= $1
GROUP BY u.id, u.name
HAVING COUNT(p.id) > $2
ORDER BY total_posts DESC
LIMIT $3;
*/

import { getUserAnalytics } from '@/generated/sql';

const analytics = await prisma.$queryRawTyped(
  getUserAnalytics(
    new Date('2024-01-01'),
    5, // minimum posts
    20  // limit
  )
);`}
            </Typography>
          </Box>

          <Alert severity="success">
            <Typography variant="body2">
              ‚úÖ <strong>Performance:</strong> relationLoadStrategy, Omit API ‡πÅ‡∏•‡∏∞ TypedSQL
            </Typography>
          </Alert>
        </CustomTabPanel>

        <CustomTabPanel value={tabValue} index={2}>
          <Typography variant="h6" sx={{ mb: 2, color: 'warning.main' }}>
            üèä Prisma Postgres & Connection Management
          </Typography>
          
          <Box className="code-block" sx={{ p: 2, borderRadius: 1, fontFamily: 'monospace', mb: 3 }}>
            <Typography variant="body2" component="pre">
{`// Prisma Postgres setup (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)
// .env
DATABASE_URL="prisma+postgres://accelerate.prisma-data.net/?api_key=your_api_key"

// lib/prisma.ts - Prisma 6.x optimized
import { PrismaClient } from '@prisma/client';

const createPrismaClient = () => {
  return new PrismaClient({
    log: process.env.NODE_ENV === 'development' 
      ? ['query', 'error', 'warn'] 
      : ['error'],
    
    // Prisma 6.x: Enhanced transaction options
    transactionOptions: {
      timeout: 10000, // 10 seconds
      maxWait: 5000,  // 5 seconds
      isolationLevel: 'ReadCommitted'
    }
  });
};

const globalForPrisma = globalThis as unknown as {
  prisma: ReturnType<typeof createPrismaClient> | undefined;
};

export const prisma = globalForPrisma.prisma ?? createPrismaClient();

if (process.env.NODE_ENV !== 'production') {
  globalForPrisma.prisma = prisma;
}

// Connection monitoring
export async function checkConnection() {
  try {
    await prisma.$queryRaw\`SELECT 1\`;
    console.log('‚úÖ Database connected');
  } catch (error) {
    console.error('‚ùå Database connection failed:', error);
  }
}

// Graceful shutdown
export async function closeConnection() {
  await prisma.$disconnect();
}`}
            </Typography>
          </Box>

          <Alert severity="info">
            <Typography variant="body2">
              üí° <strong>Prisma Postgres:</strong> Zero cold starts, global caching ‡πÅ‡∏•‡∏∞ automatic connection pooling
            </Typography>
          </Alert>
        </CustomTabPanel>
      </Paper>

      {/* Next Steps */}
      <Paper sx={{ p: 4, bgcolor: 'success.light', color: 'success.dark' }}>
        <Typography variant="h5" sx={{ mb: 2 }}>
          üéØ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏à‡∏ö‡∏ö‡∏ó‡∏ó‡∏µ‡πà 6 ‡πÅ‡∏•‡πâ‡∏ß
        </Typography>
        <Typography variant="body1" sx={{ mb: 3 }}>
          ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Prisma ORM 6.8 ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß 
          ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á React Hooks ‡πÉ‡∏ô‡∏ö‡∏ó‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        </Typography>
        
        <Typography variant="h6" sx={{ mb: 2 }}>
          üìö ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÉ‡∏ô‡∏ö‡∏ó‡∏ô‡∏µ‡πâ:
        </Typography>
        <List dense sx={{ mb: 3 }}>
          <ListItem>
            <ListItemIcon sx={{ color: 'inherit' }}>
              <CheckCircle />
            </ListItemIcon>
            <ListItemText primary="‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Prisma 6.8" />
          </ListItem>
          <ListItem>
            <ListItemIcon sx={{ color: 'inherit' }}>
              <CheckCircle />
            </ListItemIcon>
            <ListItemText primary="‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö Schema ‡πÅ‡∏•‡∏∞ Migration" />
          </ListItem>
          <ListItem>
            <ListItemIcon sx={{ color: 'inherit' }}>
              <CheckCircle />
            </ListItemIcon>
            <ListItemText primary="CRUD Operations ‡πÅ‡∏•‡∏∞ Prisma Client" />
          </ListItem>
          <ListItem>
            <ListItemIcon sx={{ color: 'inherit' }}>
              <CheckCircle />
            </ListItemIcon>
            <ListItemText primary="TypedSQL ‡πÅ‡∏•‡∏∞ Omit API (‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà)" />
          </ListItem>
          <ListItem>
            <ListItemIcon sx={{ color: 'inherit' }}>
              <CheckCircle />
            </ListItemIcon>
            <ListItemText primary="Prisma Postgres ‡πÅ‡∏•‡∏∞ Connection Management" />
          </ListItem>
        </List>

        <Alert severity="info" sx={{ mb: 3 }}>
          <Typography variant="body2">
            üí° <strong>‡∏ö‡∏ó‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:</strong> ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ React Hooks (useState, useEffect) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö state management ‡πÅ‡∏•‡∏∞ side effects
          </Typography>
        </Alert>
      </Paper>

      {/* Navigation */}
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mt: 6 }}>
        <Button
          startIcon={<ArrowBack />}
          component={Link}
          href="/nextjs-basics/lesson-5"
          variant="outlined"
        >
          ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 5: Data Fetching
        </Button>
        
        <Chip 
          label="6 / 16"
          color="primary"
          variant="outlined"
        />
        
        <Button
          endIcon={<ArrowForward />}
          component={Link}
          href="/nextjs-basics/lesson-7"
          variant="contained"
          color="primary"
        >
          ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 7: React Hooks
        </Button>
      </Box>
    </Container>
  );
} 