'use client';
import {
  Container,
  Typography,
  Box,
  Paper,
  Alert,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Chip,
  Button,
  Card,
  CardContent,
  Tabs,
  Tab,
  Divider,
  Stack,
  Avatar,
  Switch,
  TextField,
  Select,
  MenuItem,
  FormControl,
  FormLabel,
  IconButton,
  Collapse,
  LinearProgress,
  CircularProgress,
} from '@mui/material';
import {
  Security,
  Code,
  ArrowBack,
  ArrowForward,
  CheckCircle,
  Warning,
  Info,
  Error as ErrorIcon,
  Speed,
  Shield,
  Lock,
  Public,
  VpnLock,
  Gavel,
  Visibility,
  VisibilityOff,
  ExpandMore,
  ExpandLess,
  Language,
  Block,
  AccessTime,
  PlayArrow,
  Lightbulb,
  BugReport,
  Science,
  Quiz,
  Assessment,
  CheckBox,
  CheckBoxOutlineBlank,
  Timer,
  Build,
  Refresh,
} from '@mui/icons-material';
import Link from 'next/link';
import { useState } from 'react';

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;
  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`lesson-tabpanel-${index}`}
      aria-labelledby={`lesson-tab-${index}`}
      {...other}
    >
      {value === index && <Box sx={{ py: 3 }}>{children}</Box>}
    </div>
  );
}

// Demo Components
interface TestResult {
  name: string;
  status: 'waiting' | 'running' | 'passed' | 'failed';
  result: string | null;
}

function TestRunnerDemo() {
  const [testResults, setTestResults] = useState<TestResult[]>([
    { name: 'add(2, 3)', status: 'waiting', result: null },
    { name: 'multiply(4, 5)', status: 'waiting', result: null },
    { name: 'divide(10, 0)', status: 'waiting', result: null },
  ]);

  const runTests = async () => {
    for (let i = 0; i < testResults.length; i++) {
      setTestResults(prev => prev.map((test, index) => 
        index === i ? { ...test, status: 'running' as const } : test
      ));
      
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const results = [
        { status: 'passed' as const, result: '‚úÖ Expected: 5, Got: 5' },
        { status: 'passed' as const, result: '‚úÖ Expected: 20, Got: 20' },
        { status: 'failed' as const, result: '‚ùå Expected: Error, Got: Infinity' },
      ];
      
      setTestResults(prev => prev.map((test, index) => 
        index === i ? { ...test, ...results[i] } : test
      ));
    }
  };

  const resetTests = () => {
    setTestResults([
      { name: 'add(2, 3)', status: 'waiting', result: null },
      { name: 'multiply(4, 5)', status: 'waiting', result: null },
      { name: 'divide(10, 0)', status: 'waiting', result: null },
    ]);
  };

  return (
    <Card>
      <CardContent>
        <Typography variant="h6" sx={{ mb: 2 }}>
          üß™ Test Runner Simulator
        </Typography>
        
        <Box sx={{ mb: 3 }}>
          <Button
            variant="contained"
            onClick={runTests}
            disabled={testResults.some(test => test.status === 'running')}
            startIcon={<PlayArrow />}
            sx={{ mr: 2 }}
          >
            Run Tests
          </Button>
          <Button
            variant="outlined"
            onClick={resetTests}
            startIcon={<Refresh />}
          >
            Reset
          </Button>
        </Box>

        <Stack spacing={2}>
          {testResults.map((test, index) => (
            <Paper key={index} sx={{ p: 2, bgcolor: 'grey.50' }}>
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                <Box sx={{ minWidth: 200 }}>
                  <Typography variant="subtitle2" sx={{ fontFamily: 'monospace' }}>
                    {test.name}
                  </Typography>
                </Box>
                
                <Box sx={{ flex: 1 }}>
                  {test.status === 'running' && (
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                      <CircularProgress size={16} />
                      <Typography variant="body2" color="primary">Running...</Typography>
                    </Box>
                  )}
                  {test.status === 'waiting' && (
                    <Typography variant="body2" color="text.secondary">Waiting...</Typography>
                  )}
                  {test.status === 'passed' && (
                    <Typography variant="body2" color="success.main">{test.result}</Typography>
                  )}
                  {test.status === 'failed' && (
                    <Typography variant="body2" color="error.main">{test.result}</Typography>
                  )}
                </Box>
              </Box>
            </Paper>
          ))}
        </Stack>
      </CardContent>
    </Card>
  );
}

function ComponentTestDemo() {
  const [showComponent, setShowComponent] = useState(true);
  const [testResults, setTestResults] = useState<'running' | 'passed' | null>(null);

  const runComponentTest = () => {
    setTestResults('running');
    setTimeout(() => {
      setTestResults('passed');
    }, 2000);
  };

  return (
    <Card>
      <CardContent>
        <Typography variant="h6" sx={{ mb: 2 }}>
          üîß Component Testing Demo
        </Typography>
        
        {showComponent && (
          <Paper sx={{ p: 2, mb: 2, bgcolor: 'info.50', border: '1px solid', borderColor: 'info.main' }}>
            <Typography variant="body2" sx={{ mb: 1 }}>Sample Component to Test:</Typography>
            <Button variant="contained" color="primary">
              Click Me!
            </Button>
          </Paper>
        )}

        <Box sx={{ mb: 2 }}>
          <Button
            variant="outlined"
            onClick={() => setShowComponent(!showComponent)}
            sx={{ mr: 2 }}
          >
            {showComponent ? 'Hide' : 'Show'} Component
          </Button>
          <Button
            variant="contained"
            onClick={runComponentTest}
            disabled={testResults === 'running'}
            startIcon={<Science />}
          >
            Test Component
          </Button>
        </Box>

        {testResults && (
          <Alert severity={testResults === 'passed' ? 'success' : 'info'}>
            <Typography variant="body2">
              {testResults === 'running' && '‚è≥ Testing component rendering and interactions...'}
              {testResults === 'passed' && '‚úÖ Component test passed! Button renders correctly and responds to clicks.'}
            </Typography>
          </Alert>
        )}
      </CardContent>
    </Card>
  );
}

export default function Lesson13Page() {
  const [activeTab, setActiveTab] = useState(0);

  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setActiveTab(newValue);
  };

  return (
    <Container maxWidth="lg">
      <Box sx={{ py: 4 }}>
        {/* Header */}
        <Box sx={{ mb: 4 }}>
          <Button
            startIcon={<ArrowBack />}
            component={Link}
            href="/nextjs-basics"
            sx={{ mb: 2 }}
          >
            ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
          </Button>
          
          <Typography variant="h1" sx={{ mb: 2, display: 'flex', alignItems: 'center', gap: 2 }}>
            <Science color="primary" sx={{ fontSize: '3rem' }} />
            ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 13: Testing ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà
          </Typography>
          
          <Typography variant="h5" color="text.secondary" sx={{ mb: 3 }}>
            ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡∏î‡πâ‡∏ß‡∏¢ Jest ‡πÅ‡∏•‡∏∞ Testing Library ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢‡πÜ 
            ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏Ñ! üß™
          </Typography>
          
          <Box sx={{ display: 'flex', gap: 2, mb: 3, flexWrap: 'wrap' }}>
            <Chip icon={<Science />} label="Testing Basics" color="primary" />
            <Chip icon={<BugReport />} label="Debug & Fix" color="error" />
            <Chip icon={<CheckCircle />} label="Quality Assurance" color="success" />
            <Chip icon={<Quiz />} label="Test Writing" color="warning" />
            <Chip icon={<Code />} label="Jest & Testing Library" color="info" />
          </Box>
          
          <Alert severity="info" sx={{ mb: 3 }}>
            <Typography variant="body2">
              üéØ <strong>‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ô‡∏µ‡πâ:</strong> ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Test ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏î‡πâ
              <br />
              ‚è±Ô∏è <strong>‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤:</strong> 60 ‡∏ô‡∏≤‡∏ó‡∏µ | 
              üìä <strong>‡∏£‡∏∞‡∏î‡∏±‡∏ö:</strong> ‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
            </Typography>
          </Alert>

          {/* What is Testing in Simple Terms */}
          <Paper sx={{ p: 3, mb: 4, bgcolor: 'primary.50', border: '2px solid', borderColor: 'primary.200' }}>
            <Typography variant="h6" sx={{ mb: 2, display: 'flex', alignItems: 'center', gap: 1 }}>
              <Lightbulb color="primary" /> ü§î Testing ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£? (‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ)
            </Typography>
            
            <Typography variant="body1" sx={{ mb: 2 }}>
              ‡∏•‡∏≠‡∏á‡∏ô‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô <strong>‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£</strong> ‡πÅ‡∏•‡∏∞ Testing ‡πÄ‡∏õ‡πá‡∏ô <strong>"‡∏Å‡∏≤‡∏£‡∏ä‡∏¥‡∏°‡∏£‡∏™‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü"</strong>:
            </Typography>

            <Box sx={{ pl: 2, borderLeft: '3px solid', borderColor: 'primary.main', mb: 2 }}>
              <Typography variant="body2" sx={{ mb: 1 }}>
                ‚Ä¢ üë®‚Äçüç≥ <strong>‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£:</strong> ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏™‡∏π‡∏ï‡∏£
              </Typography>
              <Typography variant="body2" sx={{ mb: 1 }}>
                ‚Ä¢ üç¥ <strong>‡∏ä‡∏¥‡∏°‡∏£‡∏™:</strong> ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Test ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏´‡∏°
              </Typography>
              <Typography variant="body2" sx={{ mb: 1 }}>
                ‚Ä¢ ‚úÖ <strong>‡∏≠‡∏£‡πà‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß:</strong> Test ‡∏ú‡πà‡∏≤‡∏ô = ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏î‡∏µ
              </Typography>
              <Typography variant="body2">
                ‚Ä¢ üîß <strong>‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á:</strong> Test ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô = ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏Ñ‡πâ‡∏î
              </Typography>
            </Box>

            <Alert severity="success" sx={{ mt: 2 }}>
              <Typography variant="body2">
                ‚ú® <strong>‡∏Ç‡πâ‡∏≠‡∏î‡∏µ:</strong> Testing ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏ö‡∏ö‡∏±‡∏Ñ‡πÑ‡∏î‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏à‡∏≠!
              </Typography>
            </Alert>
          </Paper>
        </Box>

        {/* Learning Objectives for Beginners */}
        <Paper sx={{ p: 3, mb: 4 }}>
          <Typography variant="h6" sx={{ mb: 2, display: 'flex', alignItems: 'center', gap: 1 }}>
            <CheckCircle color="primary" /> üéØ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏à‡∏ö‡∏ö‡∏ó‡∏ô‡∏µ‡πâ ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ:
          </Typography>
          
          <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', md: '1fr 1fr' }, gap: 2 }}>
            <Box>
              <List dense>
                <ListItem>
                  <ListItemIcon><CheckCircle color="success" sx={{ fontSize: 20 }} /></ListItemIcon>
                  <ListItemText 
                    primary="‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ß‡πà‡∏≤ Testing ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£" 
                    secondary="‡∏£‡∏π‡πâ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"
                  />
                </ListItem>
                <ListItem>
                  <ListItemIcon><CheckCircle color="success" sx={{ fontSize: 20 }} /></ListItemIcon>
                  <ListItemText 
                    primary="‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ Jest" 
                    secondary="‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Unit Test ‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"
                  />
                </ListItem>
                <ListItem>
                  <ListItemIcon><CheckCircle color="success" sx={{ fontSize: 20 }} /></ListItemIcon>
                  <ListItemText 
                    primary="‡∏ó‡∏î‡∏™‡∏≠‡∏ö React Components" 
                    secondary="‡πÉ‡∏ä‡πâ Testing Library ‡πÄ‡∏ó‡∏™‡∏ï‡πå‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö"
                  />
                </ListItem>
              </List>
            </Box>
            
            <Box>
              <List dense>
                <ListItem>
                  <ListItemIcon><CheckCircle color="success" sx={{ fontSize: 20 }} /></ListItemIcon>
                  <ListItemText 
                    primary="Mock Functions ‡πÅ‡∏•‡∏∞ APIs" 
                    secondary="‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"
                  />
                </ListItem>
                <ListItem>
                  <ListItemIcon><CheckCircle color="success" sx={{ fontSize: 20 }} /></ListItemIcon>
                  <ListItemText 
                    primary="Test Coverage ‡πÅ‡∏•‡∏∞ Debugging" 
                    secondary="‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤"
                  />
                </ListItem>
                <ListItem>
                  <ListItemIcon><CheckCircle color="success" sx={{ fontSize: 20 }} /></ListItemIcon>
                  <ListItemText 
                    primary="CI/CD Integration" 
                    secondary="‡∏£‡∏±‡∏ô Test ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠ Deploy"
                  />
                </ListItem>
              </List>
            </Box>
          </Box>
        </Paper>

        {/* Tabs */}
        <Box sx={{ width: '100%' }}>
          <Tabs 
            value={activeTab} 
            onChange={handleTabChange}
            variant="scrollable"
            scrollButtons="auto"
            sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}
          >
            <Tab 
              label="üí° ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Testing" 
              icon={<Lightbulb />}
              iconPosition="start"
            />
            <Tab 
              label="üß™ Unit Testing" 
              icon={<Science />}
              iconPosition="start"
            />
            <Tab 
              label="üîß Component Testing" 
              icon={<Build />}
              iconPosition="start"
            />
            <Tab 
              label="üéØ Integration Testing" 
              icon={<Assessment />}
              iconPosition="start"
            />
            <Tab 
              label="üéÆ ‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" 
              icon={<PlayArrow />}
              iconPosition="start"
            />
          </Tabs>
        </Box>

        {/* Tab 1: Introduction to Testing */}
        <TabPanel value={activeTab} index={0}>
          <Typography variant="h3" sx={{ mb: 3 }}>üìö ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏±‡∏ö Testing</Typography>
          
          {/* Why Testing is Important */}
          <Paper sx={{ p: 3, mb: 4, bgcolor: 'error.50', border: '2px solid', borderColor: 'error.200' }}>
            <Typography variant="h6" sx={{ mb: 2, color: 'error.main' }}>
              üò± ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ Testing ‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏≠‡∏∞‡πÑ‡∏£‡∏Ç‡∏∂‡πâ‡∏ô?
            </Typography>
            
            <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', md: '1fr 1fr' }, gap: 3 }}>
              <Box>
                <Typography variant="subtitle2" sx={{ mb: 1, color: 'error.main' }}>üö® ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô:</Typography>
                <List dense>
                  <ListItem>
                    <ListItemIcon><BugReport color="error" sx={{ fontSize: 20 }} /></ListItemIcon>
                    <ListItemText 
                      primary="‡∏ö‡∏±‡∏Ñ‡∏ã‡πà‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà" 
                      secondary="‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î"
                    />
                  </ListItem>
                  <ListItem>
                    <ListItemIcon><ErrorIcon color="error" sx={{ fontSize: 20 }} /></ListItemIcon>
                    <ListItemText 
                      primary="‡πÅ‡∏Å‡πâ‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡∏û‡∏±‡∏á‡∏≠‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô" 
                      secondary="‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢"
                    />
                  </ListItem>
                  <ListItem>
                    <ListItemIcon><Warning color="error" sx={{ fontSize: 20 }} /></ListItemIcon>
                    <ListItemText 
                      primary="‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÇ‡∏Å‡∏£‡∏ò" 
                      secondary="‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏à‡∏≠‡∏ö‡∏±‡∏Ñ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏£‡∏π‡πâ"
                    />
                  </ListItem>
                </List>
              </Box>
              
              <Box>
                <Typography variant="subtitle2" sx={{ mb: 1, color: 'error.main' }}>üí∏ ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô:</Typography>
                <List dense>
                  <ListItem>
                    <ListItemIcon><Timer color="warning" sx={{ fontSize: 20 }} /></ListItemIcon>
                    <ListItemText primary="‡πÄ‡∏™‡∏µ‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏Å‡πâ‡∏ö‡∏±‡∏Ñ" />
                  </ListItem>
                  <ListItem>
                    <ListItemIcon><ErrorIcon color="warning" sx={{ fontSize: 20 }} /></ListItemIcon>
                    <ListItemText primary="‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏á" />
                  </ListItem>
                  <ListItem>
                    <ListItemIcon><Warning color="warning" sx={{ fontSize: 20 }} /></ListItemIcon>
                    <ListItemText primary="‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡∏ô‡∏µ‡πÑ‡∏õ" />
                  </ListItem>
                </List>
              </Box>
            </Box>
          </Paper>

          {/* Types of Testing */}
          <Typography variant="h5" sx={{ mb: 3 }}>üß™ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö (‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢)</Typography>
          
          <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', md: '1fr 1fr 1fr' }, gap: 3, mb: 4 }}>
            <Card sx={{ height: '100%' }}>
              <CardContent>
                <Typography variant="h6" sx={{ mb: 2, color: 'info.main', display: 'flex', alignItems: 'center', gap: 1 }}>
                  <Science color="info" /> Unit Testing
                </Typography>
                <Typography variant="body2" sx={{ mb: 2 }}>
                  <strong>‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö:</strong> ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏™‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏¢‡πà‡∏≤‡∏á
                </Typography>
                <Typography variant="body2" sx={{ mb: 1 }}>
                  ‚Ä¢ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡πÜ
                </Typography>
                <Typography variant="body2" sx={{ mb: 1 }}>
                  ‚Ä¢ ‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡πÅ‡∏•‡∏∞‡∏á‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
                </Typography>
                <Typography variant="body2">
                  ‚Ä¢ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à logic
                </Typography>
              </CardContent>
            </Card>

            <Card sx={{ height: '100%' }}>
              <CardContent>
                <Typography variant="h6" sx={{ mb: 2, color: 'warning.main', display: 'flex', alignItems: 'center', gap: 1 }}>
                  <Build color="warning" /> Component Testing
                </Typography>
                <Typography variant="body2" sx={{ mb: 2 }}>
                  <strong>‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö:</strong> ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡πÜ
                </Typography>
                <Typography variant="body2" sx={{ mb: 1 }}>
                  ‚Ä¢ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö React Component
                </Typography>
                <Typography variant="body2" sx={{ mb: 1 }}>
                  ‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
                </Typography>
                <Typography variant="body2">
                  ‚Ä¢ ‡πÄ‡∏ó‡∏™‡∏ï‡πå‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° input
                </Typography>
              </CardContent>
            </Card>

            <Card sx={{ height: '100%' }}>
              <CardContent>
                <Typography variant="h6" sx={{ mb: 2, color: 'success.main', display: 'flex', alignItems: 'center', gap: 1 }}>
                  <Assessment color="success" /> Integration Testing
                </Typography>
                <Typography variant="body2" sx={{ mb: 2 }}>
                  <strong>‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö:</strong> ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏ï‡πá‡∏°‡πÇ‡∏ï‡πä‡∏∞
                </Typography>
                <Typography variant="body2" sx={{ mb: 1 }}>
                  ‚Ä¢ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô
                </Typography>
                <Typography variant="body2" sx={{ mb: 1 }}>
                  ‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API + Database
                </Typography>
                <Typography variant="body2">
                  ‚Ä¢ ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡∏Å‡∏ß‡πà‡∏≤ ‡πÅ‡∏ï‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°
                </Typography>
              </CardContent>
            </Card>
          </Box>

          {/* Setup Instructions */}
          <Typography variant="h5" sx={{ mb: 2 }}>‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Testing Tools</Typography>
          
          <Paper sx={{ p: 3, mb: 4 }}>
            <Typography variant="body1" sx={{ mb: 2 }}>
              Ô∏è <strong>‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ Next.js ‡πÉ‡∏´‡∏°‡πà:</strong>
            </Typography>
            
            <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 3 }}>
              <Typography variant="body2" component="pre" sx={{ color: 'success.dark' }}>
{`# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ Next.js ‡∏û‡∏£‡πâ‡∏≠‡∏° Testing (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)
npx create-next-app@latest my-app --typescript --eslint
cd my-app

# ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Testing packages
npm install --save-dev jest jest-environment-jsdom
npm install --save-dev @testing-library/react @testing-library/jest-dom
npm install --save-dev @testing-library/user-event`}
              </Typography>
            </Box>

            <Typography variant="body1" sx={{ mb: 2 }}>
              üìù <strong>‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå config (jest.config.js):</strong>
            </Typography>
            
            <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 3 }}>
              <Typography variant="body2" component="pre">
{`// jest.config.js (‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô root ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ)
const nextJest = require('next/jest')

const createJestConfig = nextJest({
  // Provide the path to your Next.js app to load next.config.js and .env files
  dir: './',
})

// Add any custom config to be passed to Jest
const customJestConfig = {
  setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],
  moduleNameMapping: {
    // Handle module aliases (this will match the paths you added)
    '^@/components/(.*)$': '<rootDir>/components/$1',
    '^@/pages/(.*)$': '<rootDir>/pages/$1',
  },
  testEnvironment: 'jest-environment-jsdom',
}

// createJestConfig is exported this way to ensure that next/jest can load the Next.js config
module.exports = createJestConfig(customJestConfig)`}
              </Typography>
            </Box>

            <Typography variant="body1" sx={{ mb: 2 }}>
              üîß <strong>‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå setup (jest.setup.js):</strong>
            </Typography>
            
            <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 3 }}>
              <Typography variant="body2" component="pre">
{`// jest.setup.js (‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô root ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ)
import '@testing-library/jest-dom'

// Mock ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Next.js router
jest.mock('next/router', () => ({
  useRouter() {
    return {
      route: '/',
      pathname: '/',
      query: '',
      asPath: '',
    }
  },
}))`}
              </Typography>
            </Box>

            <Typography variant="body1" sx={{ mb: 2 }}>
              üì¶ <strong>‡πÄ‡∏û‡∏¥‡πà‡∏° scripts ‡πÉ‡∏ô package.json:</strong>
            </Typography>
            
            <Box className="code-block" sx={{ p: 2, borderRadius: 1 }}>
              <Typography variant="body2" component="pre">
{`{
  "scripts": {
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage"
  }
}`}
              </Typography>
            </Box>

            <Alert severity="success" sx={{ mt: 2 }}>
              <Typography variant="body2">
                ‚úÖ <strong>‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!</strong> ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Test ‡πÅ‡∏£‡∏Å‡πÅ‡∏•‡πâ‡∏ß! 
                ‡∏£‡∏±‡∏ô <code>npm test</code> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö
              </Typography>
            </Alert>
          </Paper>

          {/* First Test Example */}
          <Typography variant="h5" sx={{ mb: 2 }}>üöÄ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏£‡∏Å: Test ‡∏á‡πà‡∏≤‡∏¢‡πÜ</Typography>
          
          <Paper sx={{ p: 3, mb: 4 }}>
            <Typography variant="body1" sx={{ mb: 2 }}>
              ‡∏°‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á Test ‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏á‡πà‡∏≤‡∏¢‡πÜ:
            </Typography>
            
            <Typography variant="subtitle2" sx={{ mb: 1 }}>
              1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö (utils/math.js):
            </Typography>
            
            <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 3 }}>
              <Typography variant="body2" component="pre">
{`// utils/math.js
export function add(a, b) {
  return a + b;
}

export function multiply(a, b) {
  return a * b;
}

export function divide(a, b) {
  if (b === 0) {
    throw new Error('Cannot divide by zero');
  }
  return a / b;
}`}
              </Typography>
            </Box>

            <Typography variant="subtitle2" sx={{ mb: 1 }}>
              2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Test ‡πÑ‡∏ü‡∏•‡πå (__tests__/math.test.js):
            </Typography>
            
            <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 3 }}>
              <Typography variant="body2" component="pre">
{`// __tests__/math.test.js
import { add, multiply, divide } from '../utils/math';

// ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á test ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö math functions
describe('Math functions', () => {
  
  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô add
  test('should add two numbers correctly', () => {
    // Arrange: ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const a = 2;
    const b = 3;
    
    // Act: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
    const result = add(a, b);
    
    // Assert: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    expect(result).toBe(5);
  });

  test('should multiply two numbers correctly', () => {
    expect(multiply(4, 5)).toBe(20);
    expect(multiply(0, 100)).toBe(0);
    expect(multiply(-2, 3)).toBe(-6);
  });

  test('should divide two numbers correctly', () => {
    expect(divide(10, 2)).toBe(5);
    expect(divide(9, 3)).toBe(3);
  });

  test('should throw error when dividing by zero', () => {
    expect(() => {
      divide(10, 0);
    }).toThrow('Cannot divide by zero');
  });
});`}
              </Typography>
            </Box>

            <Alert severity="info" sx={{ mb: 2 }}>
              <Typography variant="body2">
                üí° <strong>‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö AAA:</strong> Arrange (‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°) ‚Üí Act (‡∏ó‡∏≥‡∏á‡∏≤‡∏ô) ‚Üí Assert (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö)
                ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Test
              </Typography>
            </Alert>

            <Typography variant="subtitle2" sx={{ mb: 1 }}>
              3. ‡∏£‡∏±‡∏ô Test:
            </Typography>
            
            <Box className="code-block" sx={{ p: 2, borderRadius: 1 }}>
              <Typography variant="body2" component="pre">
{`npm test

# ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏´‡πá‡∏ô:
‚úì Math functions ‚Ä∫ should add two numbers correctly
‚úì Math functions ‚Ä∫ should multiply two numbers correctly  
‚úì Math functions ‚Ä∫ should divide two numbers correctly
‚úì Math functions ‚Ä∫ should throw error when dividing by zero

Test Suites: 1 passed, 1 total
Tests:       4 passed, 4 total`}
              </Typography>
            </Box>
          </Paper>
        </TabPanel>

        {/* Tab 2: Unit Testing */}
        <TabPanel value={activeTab} index={1}>
          <Typography variant="h3" sx={{ mb: 3 }}>üß™ Unit Testing</Typography>
          
          <Typography variant="body1" sx={{ mb: 3 }}>
            Unit Testing ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏ß‡∏ô‡∏¢‡πà‡∏≠‡∏¢‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô
          </Typography>

          <Typography variant="h5" sx={{ mb: 2 }}>1. Basic Jest Matchers</Typography>
          <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 3 }}>
            <Typography variant="body2" component="pre">
{`// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Jest Matchers ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡πà‡∏≠‡∏¢
describe('Basic Jest Matchers', () => {
  test('equality matchers', () => {
    expect(2 + 2).toBe(4);                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô
    expect({ name: 'John' }).toEqual({ name: 'John' }); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö object
  });

  test('truthiness matchers', () => {
    expect(true).toBeTruthy();                // ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô true
    expect(false).toBeFalsy();                // ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô false
    expect('hello').toBeTruthy();             // string ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á = truthy
    expect('').toBeFalsy();                   // string ‡∏ß‡πà‡∏≤‡∏á = falsy
    expect(null).toBeNull();                  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö null
    expect(undefined).toBeUndefined();        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö undefined
  });

  test('number matchers', () => {
    expect(2 + 2).toBeGreaterThan(3);         // ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤
    expect(2 + 2).toBeGreaterThanOrEqual(4);  // ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö
    expect(2 + 2).toBeLessThan(5);            // ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤
    expect(0.1 + 0.2).toBeCloseTo(0.3);       // ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö float)
  });

  test('string matchers', () => {
    expect('hello world').toMatch(/world/);    // ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö regex
    expect('hello world').toContain('hello');  // ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà
  });

  test('array matchers', () => {
    expect(['apple', 'banana', 'orange']).toContain('banana');
    expect(['apple', 'banana']).toHaveLength(2);
  });

  test('exception matchers', () => {
    const throwError = () => {
      throw new Error('Something went wrong');
    };
    expect(throwError).toThrow();
    expect(throwError).toThrow('Something went wrong');
  });
});`}
            </Typography>
          </Box>

          <Typography variant="h5" sx={{ mb: 2 }}>2. Testing Functions with Side Effects</Typography>
          <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 3 }}>
            <Typography variant="body2" component="pre">
{`// utils/storage.js - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ side effects
export function saveToLocalStorage(key, value) {
  try {
    localStorage.setItem(key, JSON.stringify(value));
    return true;
  } catch (error) {
    return false;
  }
}

export function getFromLocalStorage(key) {
  try {
    const item = localStorage.getItem(key);
    return item ? JSON.parse(item) : null;
  } catch (error) {
    return null;
  }
}

// __tests__/storage.test.js
import { saveToLocalStorage, getFromLocalStorage } from '../utils/storage';

// Mock localStorage ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ Jest ‡πÑ‡∏°‡πà‡∏°‡∏µ localStorage
const localStorageMock = {
  getItem: jest.fn(),
  setItem: jest.fn(),
  removeItem: jest.fn(),
  clear: jest.fn(),
};
global.localStorage = localStorageMock;

describe('Local Storage Utils', () => {
  beforeEach(() => {
    // ‡∏•‡πâ‡∏≤‡∏á mock ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ test
    jest.clearAllMocks();
  });

  test('should save data to localStorage', () => {
    const testData = { name: 'John', age: 30 };
    
    const result = saveToLocalStorage('user', testData);
    
    expect(result).toBe(true);
    expect(localStorage.setItem).toHaveBeenCalledWith(
      'user', 
      JSON.stringify(testData)
    );
  });

  test('should retrieve data from localStorage', () => {
    const testData = { name: 'John', age: 30 };
    localStorage.getItem.mockReturnValue(JSON.stringify(testData));
    
    const result = getFromLocalStorage('user');
    
    expect(result).toEqual(testData);
    expect(localStorage.getItem).toHaveBeenCalledWith('user');
  });

  test('should handle localStorage errors', () => {
    localStorage.setItem.mockImplementation(() => {
      throw new Error('Storage full');
    });
    
    const result = saveToLocalStorage('user', { name: 'John' });
    
    expect(result).toBe(false);
  });
});`}
            </Typography>
          </Box>

          <Alert severity="info" sx={{ mb: 3 }}>
            <Typography variant="body2">
              üí° <strong>Mock ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?</strong> Mock ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏ä‡πà‡∏ô localStorage, API calls 
              ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏∂‡πà‡∏á‡∏™‡∏¥‡πà‡∏á‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å
            </Typography>
          </Alert>
        </TabPanel>

        {/* Tab 3: Component Testing */}
        <TabPanel value={activeTab} index={2}>
          <Typography variant="h3" sx={{ mb: 3 }}>üîß Component Testing</Typography>
          
          <Typography variant="body1" sx={{ mb: 3 }}>
            ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö React Components ‡∏î‡πâ‡∏ß‡∏¢ Testing Library ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤ UI ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
          </Typography>

          <Typography variant="h5" sx={{ mb: 2 }}>1. Basic Component Testing</Typography>
          <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 3 }}>
            <Typography variant="body2" component="pre">
{`// components/Button.jsx - Component ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö
export function CustomButton({ children, onClick, disabled = false, variant = 'primary' }) {
  return (
    <button
      onClick={onClick}
      disabled={disabled}
      className={\`btn btn-\${variant}\`}
      data-testid="custom-button"
    >
      {children}
    </button>
  );
}

// __tests__/Button.test.jsx
import { render, screen, fireEvent } from '@testing-library/react';
import { CustomButton } from '../components/Button';

describe('CustomButton Component', () => {
  test('renders button with correct text', () => {
    render(<CustomButton>Click Me</CustomButton>);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô button
    const button = screen.getByText('Click Me');
    expect(button).toBeInTheDocument();
  });

  test('calls onClick when clicked', () => {
    const handleClick = jest.fn(); // ‡∏™‡∏£‡πâ‡∏≤‡∏á mock function
    
    render(<CustomButton onClick={handleClick}>Click Me</CustomButton>);
    
    const button = screen.getByTestId('custom-button');
    fireEvent.click(button); // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å
    
    expect(handleClick).toHaveBeenCalledTimes(1);
  });

  test('is disabled when disabled prop is true', () => {
    render(<CustomButton disabled>Click Me</CustomButton>);
    
    const button = screen.getByTestId('custom-button');
    expect(button).toBeDisabled();
  });

  test('has correct CSS class based on variant', () => {
    render(<CustomButton variant="secondary">Click Me</CustomButton>);
    
    const button = screen.getByTestId('custom-button');
    expect(button).toHaveClass('btn-secondary');
  });
});`}
            </Typography>
          </Box>

          <Typography variant="h5" sx={{ mb: 2 }}>2. Testing Forms and User Input</Typography>
          <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 3 }}>
            <Typography variant="body2" component="pre">
{`// components/LoginForm.jsx
import { useState } from 'react';

export function LoginForm({ onSubmit }) {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    
    if (!username || !password) {
      setError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö');
      return;
    }
    
    setError('');
    onSubmit({ username, password });
  };

  return (
    <form onSubmit={handleSubmit} data-testid="login-form">
      <div>
        <label htmlFor="username">Username:</label>
        <input
          id="username"
          type="text"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
          data-testid="username-input"
        />
      </div>
      
      <div>
        <label htmlFor="password">Password:</label>
        <input
          id="password"
          type="password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          data-testid="password-input"
        />
      </div>
      
      {error && <div data-testid="error-message">{error}</div>}
      
      <button type="submit" data-testid="submit-button">
        Login
      </button>
    </form>
  );
}

// __tests__/LoginForm.test.jsx
import { render, screen, fireEvent } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { LoginForm } from '../components/LoginForm';

describe('LoginForm Component', () => {
  test('renders all form elements', () => {
    render(<LoginForm />);
    
    expect(screen.getByLabelText('Username:')).toBeInTheDocument();
    expect(screen.getByLabelText('Password:')).toBeInTheDocument();
    expect(screen.getByTestId('submit-button')).toBeInTheDocument();
  });

  test('updates input values when user types', async () => {
    const user = userEvent.setup();
    render(<LoginForm />);
    
    const usernameInput = screen.getByTestId('username-input');
    const passwordInput = screen.getByTestId('password-input');
    
    await user.type(usernameInput, 'john@example.com');
    await user.type(passwordInput, 'password123');
    
    expect(usernameInput).toHaveValue('john@example.com');
    expect(passwordInput).toHaveValue('password123');
  });

  test('shows error when submitting empty form', async () => {
    const user = userEvent.setup();
    render(<LoginForm />);
    
    const submitButton = screen.getByTestId('submit-button');
    await user.click(submitButton);
    
    expect(screen.getByTestId('error-message')).toHaveTextContent('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö');
  });

  test('calls onSubmit with correct data when form is valid', async () => {
    const mockOnSubmit = jest.fn();
    const user = userEvent.setup();
    
    render(<LoginForm onSubmit={mockOnSubmit} />);
    
    await user.type(screen.getByTestId('username-input'), 'john@example.com');
    await user.type(screen.getByTestId('password-input'), 'password123');
    await user.click(screen.getByTestId('submit-button'));
    
    expect(mockOnSubmit).toHaveBeenCalledWith({
      username: 'john@example.com',
      password: 'password123'
    });
  });
});`}
            </Typography>
          </Box>

          <Alert severity="warning" sx={{ mb: 3 }}>
            <Typography variant="body2">
              ‚ö†Ô∏è <strong>userEvent vs fireEvent:</strong> ‡πÉ‡∏ä‡πâ <code>userEvent</code> ‡πÅ‡∏ó‡∏ô <code>fireEvent</code> ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ 
              ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏±‡∏ô‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤
            </Typography>
          </Alert>
        </TabPanel>

        {/* Tab 4: Integration Testing */}
        <TabPanel value={activeTab} index={3}>
          <Typography variant="h3" sx={{ mb: 3 }}>üéØ Integration Testing</Typography>
          
          <Typography variant="body1" sx={{ mb: 3 }}>
            ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á API calls ‡πÅ‡∏•‡∏∞ Database interactions
          </Typography>

          <Typography variant="h5" sx={{ mb: 2 }}>1. Testing API Calls</Typography>
          <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 3 }}>
            <Typography variant="body2" component="pre">
{`// services/userService.js - API service
export async function getUser(id) {
  const response = await fetch(\`/api/users/\${id}\`);
  
  if (!response.ok) {
    throw new Error('Failed to fetch user');
  }
  
  return response.json();
}

export async function createUser(userData) {
  const response = await fetch('/api/users', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(userData),
  });
  
  if (!response.ok) {
    throw new Error('Failed to create user');
  }
  
  return response.json();
}

// __tests__/userService.test.js
import { getUser, createUser } from '../services/userService';

// Mock fetch globally
global.fetch = jest.fn();

describe('User Service', () => {
  beforeEach(() => {
    fetch.mockClear();
  });

  test('should fetch user successfully', async () => {
    const mockUser = { id: 1, name: 'John Doe', email: 'john@example.com' };
    
    fetch.mockResolvedValueOnce({
      ok: true,
      json: async () => mockUser,
    });

    const user = await getUser(1);

    expect(fetch).toHaveBeenCalledWith('/api/users/1');
    expect(user).toEqual(mockUser);
  });

  test('should throw error when fetch fails', async () => {
    fetch.mockResolvedValueOnce({
      ok: false,
    });

    await expect(getUser(1)).rejects.toThrow('Failed to fetch user');
  });

  test('should create user successfully', async () => {
    const newUser = { name: 'Jane Doe', email: 'jane@example.com' };
    const createdUser = { id: 2, ...newUser };
    
    fetch.mockResolvedValueOnce({
      ok: true,
      json: async () => createdUser,
    });

    const result = await createUser(newUser);

    expect(fetch).toHaveBeenCalledWith('/api/users', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(newUser),
    });
    expect(result).toEqual(createdUser);
  });
});`}
            </Typography>
          </Box>

          <Typography variant="h5" sx={{ mb: 2 }}>2. Testing with MSW (Mock Service Worker)</Typography>
          <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 3 }}>
            <Typography variant="body2" component="pre">
{`// ‡πÄ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á MSW
npm install --save-dev msw

// mocks/handlers.js - ‡∏Å‡∏≥‡∏´‡∏ô‡∏î API responses
import { rest } from 'msw';

export const handlers = [
  // GET /api/users/:id
  rest.get('/api/users/:id', (req, res, ctx) => {
    const { id } = req.params;
    
    return res(
      ctx.json({
        id: parseInt(id),
        name: 'John Doe',
        email: 'john@example.com'
      })
    );
  }),

  // POST /api/users
  rest.post('/api/users', async (req, res, ctx) => {
    const newUser = await req.json();
    
    return res(
      ctx.json({
        id: 123,
        ...newUser,
        createdAt: new Date().toISOString()
      })
    );
  }),

  // Error case
  rest.get('/api/users/999', (req, res, ctx) => {
    return res(
      ctx.status(404),
      ctx.json({ error: 'User not found' })
    );
  }),
];

// mocks/server.js
import { setupServer } from 'msw/node';
import { handlers } from './handlers';

export const server = setupServer(...handlers);

// jest.setup.js - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô setup file
import { server } from './mocks/server';

beforeAll(() => server.listen());
afterEach(() => server.resetHandlers());
afterAll(() => server.close());

// __tests__/userIntegration.test.js - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö MSW
import { getUser, createUser } from '../services/userService';

describe('User Service Integration', () => {
  test('should get user with real-like API', async () => {
    const user = await getUser(1);
    
    expect(user).toEqual({
      id: 1,
      name: 'John Doe',
      email: 'john@example.com'
    });
  });

  test('should create user with real-like API', async () => {
    const newUser = { name: 'Jane Doe', email: 'jane@example.com' };
    const result = await createUser(newUser);
    
    expect(result).toMatchObject({
      id: expect.any(Number),
      name: 'Jane Doe',
      email: 'jane@example.com',
      createdAt: expect.any(String)
    });
  });
});`}
            </Typography>
          </Box>

          <Alert severity="success" sx={{ mb: 3 }}>
            <Typography variant="body2">
              ‚ú® <strong>‡∏Ç‡πâ‡∏≠‡∏î‡∏µ‡∏Ç‡∏≠‡∏á MSW:</strong> ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á mock fetch ‡πÄ‡∏≠‡∏á
              ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ô test ‡πÅ‡∏•‡∏∞ development
            </Typography>
          </Alert>
        </TabPanel>

        {/* Tab 5: Interactive Demo */}
        <TabPanel value={activeTab} index={4}>
          <Typography variant="h3" sx={{ mb: 3 }}>üéÆ ‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</Typography>
          
          <Typography variant="body1" sx={{ mb: 3 }}>
            ‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Test ‡πÅ‡∏ö‡∏ö Interactive ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
          </Typography>

          <Stack spacing={4}>
            <TestRunnerDemo />
            <ComponentTestDemo />
          </Stack>

          <Paper sx={{ p: 3, mt: 4 }}>
            <Typography variant="h6" sx={{ mb: 2 }}>
              üìä Test Coverage
            </Typography>
            <Typography variant="body2" sx={{ mb: 2 }}>
              Test Coverage ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡∏ß‡πà‡∏≤‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏ñ‡∏π‡∏Å‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏µ‡πà‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå:
            </Typography>
            
            <Box sx={{ mb: 2 }}>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                <Typography variant="body2">Lines Covered</Typography>
                <Typography variant="body2">85%</Typography>
              </Box>
              <LinearProgress variant="determinate" value={85} color="success" />
            </Box>
            
            <Box sx={{ mb: 2 }}>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                <Typography variant="body2">Functions Covered</Typography>
                <Typography variant="body2">92%</Typography>
              </Box>
              <LinearProgress variant="determinate" value={92} color="success" />
            </Box>
            
            <Box sx={{ mb: 2 }}>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                <Typography variant="body2">Branches Covered</Typography>
                <Typography variant="body2">78%</Typography>
              </Box>
              <LinearProgress variant="determinate" value={78} color="warning" />
            </Box>

            <Alert severity="info">
              <Typography variant="body2">
                üí° <strong>‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢:</strong> ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ Test Coverage ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 80% 
                ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á 100% ‡πÄ‡∏™‡∏°‡∏≠‡πÑ‡∏õ ‡πÉ‡∏´‡πâ‡πÄ‡∏ô‡πâ‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
              </Typography>
            </Alert>
          </Paper>
        </TabPanel>

        {/* Navigation */}
        <Paper sx={{ p: 4, bgcolor: 'success.light', color: 'success.dark' }}>
          <Typography variant="h5" sx={{ mb: 2 }}>
            üéØ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏à‡∏ö‡∏ö‡∏ó‡∏ó‡∏µ‡πà 13 ‡πÅ‡∏•‡πâ‡∏ß
          </Typography>
          <Typography variant="body1" sx={{ mb: 3 }}>
            ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Test ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏•‡∏∞ React Components ‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß
            ‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô!
          </Typography>
          
          <Alert severity="success" sx={{ mb: 3 }}>
            <Typography variant="body2">
              üéâ <strong>‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å!</strong> ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ã‡∏≠‡∏ü‡∏ï‡πå‡πÅ‡∏ß‡∏£‡πå
            </Typography>
          </Alert>
        </Paper>

        {/* Navigation */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mt: 6 }}>
          <Button
            startIcon={<ArrowBack />}
            component={Link}
            href="/nextjs-basics/lesson-12"
            variant="outlined"
          >
            ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 12: Middleware & Security
          </Button>
          
          <Chip 
            label="13 / 13"
            color="success"
            variant="filled"
          />
          
          <Button
            endIcon={<ArrowForward />}
            component={Link}
            href="/nextjs-basics"
            variant="contained"
            color="success"
          >
            ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
          </Button>
        </Box>
      </Box>
    </Container>
  );
} 