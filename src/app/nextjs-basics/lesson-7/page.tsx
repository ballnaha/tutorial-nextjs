'use client';
import {
  Container,
  Typography,
  Box,
  Paper,
  Alert,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Chip,
  Button,
  Card,
  CardContent,
  Tabs,
  Tab,
  Divider,
  Grid,
  Switch,
  FormControlLabel,
  TextField,
  CircularProgress,
} from '@mui/material';
import {
  CheckCircle,
  Code,
  PlayArrow,
  ExpandMore,
  Lightbulb,
  Warning,
  Info,
  Refresh,
  Storage,
  Timer,
  Settings,
  BugReport,
  Speed,
  Memory,
  ArrowBack,
  ArrowForward,
} from '@mui/icons-material';
import Link from 'next/link';
import { useState, useEffect } from 'react';

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

function CustomTabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`simple-tabpanel-${index}`}
      aria-labelledby={`simple-tab-${index}`}
      {...other}
    >
      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}
    </div>
  );
}

const hookFeatures = [
  {
    title: 'useState',
    description: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ state ‡πÉ‡∏ô functional components ‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û',
    icon: <Storage />,
    color: 'primary'
  },
  {
    title: 'useEffect',
    description: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ side effects ‡πÄ‡∏ä‡πà‡∏ô API calls, subscriptions, cleanup',
    icon: <Refresh />,
    color: 'secondary'
  },
  {
    title: 'Dependency Array',
    description: '‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£ re-run ‡∏Ç‡∏≠‡∏á effects ‡∏î‡πâ‡∏ß‡∏¢ dependency array',
    icon: <Settings />,
    color: 'info'
  },
  {
    title: 'Performance',
    description: 'Optimize ‡∏Å‡∏≤‡∏£ render ‡πÅ‡∏•‡∏∞ prevent unnecessary updates',
    icon: <Speed />,
    color: 'success'
  }
];

// Demo Components
function CounterDemo() {
  const [count, setCount] = useState(0);
  const [step, setStep] = useState(1);

  return (
    <Card>
      <CardContent>
        <Typography variant="h6" sx={{ mb: 2 }}>
          üî¢ Counter Demo
        </Typography>
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>
          <Typography variant="h4">{count}</Typography>
          <Box>
            <Button 
              variant="contained" 
              onClick={() => setCount(count + step)}
              sx={{ mr: 1 }}
            >
              +{step}
            </Button>
            <Button 
              variant="outlined" 
              onClick={() => setCount(count - step)}
            >
              -{step}
            </Button>
          </Box>
        </Box>
        <TextField
          label="Step Size"
          type="number"
          value={step}
          onChange={(e) => setStep(Number(e.target.value))}
          size="small"
        />
      </CardContent>
    </Card>
  );
}

function TimerDemo() {
  const [seconds, setSeconds] = useState(0);
  const [isRunning, setIsRunning] = useState(false);

  useEffect(() => {
    let interval: NodeJS.Timeout | null = null;
    
    if (isRunning) {
      interval = setInterval(() => {
        setSeconds(seconds => seconds + 1);
      }, 1000);
    } else if (!isRunning && seconds !== 0) {
      if (interval) clearInterval(interval);
    }
    
    return () => {
      if (interval) clearInterval(interval);
    };
  }, [isRunning, seconds]);

  const reset = () => {
    setSeconds(0);
    setIsRunning(false);
  };

  return (
    <Card>
      <CardContent>
        <Typography variant="h6" sx={{ mb: 2 }}>
          ‚è±Ô∏è Timer Demo
        </Typography>
        <Typography variant="h3" sx={{ mb: 2, fontFamily: 'monospace' }}>
          {String(Math.floor(seconds / 60)).padStart(2, '0')}:
          {String(seconds % 60).padStart(2, '0')}
        </Typography>
        <Box sx={{ display: 'flex', gap: 1 }}>
          <Button 
            variant="contained" 
            onClick={() => setIsRunning(!isRunning)}
            color={isRunning ? 'secondary' : 'primary'}
          >
            {isRunning ? 'Pause' : 'Start'}
          </Button>
          <Button variant="outlined" onClick={reset}>
            Reset
          </Button>
        </Box>
      </CardContent>
    </Card>
  );
}

function FetchDemo() {
  const [users, setUsers] = useState<any[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const fetchUsers = async () => {
    setLoading(true);
    setError(null);
    
    try {
      const response = await fetch('https://jsonplaceholder.typicode.com/users?_limit=3');
      const data = await response.json();
      setUsers(data);
    } catch (err) {
      setError('Failed to fetch users');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchUsers();
  }, []);

  return (
    <Card>
      <CardContent>
        <Typography variant="h6" sx={{ mb: 2 }}>
          üë• Fetch Demo
        </Typography>
        
        {loading && (
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>
            <CircularProgress size={20} />
            <Typography>Loading users...</Typography>
          </Box>
        )}
        
        {error && (
          <Alert severity="error" sx={{ mb: 2 }}>
            {error}
          </Alert>
        )}
        
        <List dense>
          {users.map(user => (
            <ListItem key={user.id}>
              <ListItemText 
                primary={user.name} 
                secondary={user.email}
              />
            </ListItem>
          ))}
        </List>
        
        <Button 
          variant="outlined" 
          onClick={fetchUsers}
          disabled={loading}
        >
          Refresh
        </Button>
      </CardContent>
    </Card>
  );
}

export default function Lesson7Page() {
  const [tabValue, setTabValue] = useState(0);

  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };

  return (
    <Container maxWidth="lg">
      {/* Header */}
      <Box sx={{ py: 4 }}>
        <Typography variant="h1" sx={{ mb: 2 }}>
          ü™ù ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 7: React Hooks (useState & useEffect)
        </Typography>
        <Typography variant="h5" color="text.secondary" sx={{ mb: 4 }}>
          ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ React Hooks ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ state ‡πÅ‡∏•‡∏∞ side effects ‡πÉ‡∏ô Next.js 15
        </Typography>

        <Box sx={{ display: 'flex', gap: 2, mb: 4 }}>
          <Chip label="35 ‡∏ô‡∏≤‡∏ó‡∏µ" color="primary" />
          <Chip label="‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á" color="secondary" />
          <Chip label="‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç" color="warning" />
          <Chip label="Interactive" color="success" />
        </Box>
      </Box>

      {/* Learning Objectives */}
      <Paper sx={{ p: 3, mb: 4, bgcolor: 'primary.light', color: 'primary.contrastText' }}>
        <Typography variant="h6" sx={{ mb: 2, display: 'flex', alignItems: 'center', gap: 1 }}>
          <Lightbulb /> ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
        </Typography>
        <List dense>
          <ListItem>
            <ListItemIcon sx={{ color: 'inherit' }}>
              <CheckCircle />
            </ListItemIcon>
            <ListItemText primary="‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ useState ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ state" />
          </ListItem>
          <ListItem>
            <ListItemIcon sx={{ color: 'inherit' }}>
              <CheckCircle />
            </ListItemIcon>
            <ListItemText primary="‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ useEffect ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö side effects" />
          </ListItem>
          <ListItem>
            <ListItemIcon sx={{ color: 'inherit' }}>
              <CheckCircle />
            </ListItemIcon>
            <ListItemText primary="‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ dependency arrays ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£ cleanup" />
          </ListItem>
          <ListItem>
            <ListItemIcon sx={{ color: 'inherit' }}>
              <CheckCircle />
            </ListItemIcon>
            <ListItemText primary="‡∏™‡∏£‡πâ‡∏≤‡∏á interactive components ‡∏î‡πâ‡∏ß‡∏¢ hooks" />
          </ListItem>
        </List>
      </Paper>

      {/* What are React Hooks */}
      <Paper sx={{ p: 4, mb: 4 }}>
        <Typography variant="h4" sx={{ mb: 3 }}>
          ü§î React Hooks ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?
        </Typography>
        
        <Typography variant="body1" sx={{ mb: 3, lineHeight: 1.7 }}>
          <strong>React Hooks</strong> ‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ React features ‡πÄ‡∏ä‡πà‡∏ô state ‡πÅ‡∏•‡∏∞ lifecycle methods 
          ‡πÉ‡∏ô functional components ‡πÑ‡∏î‡πâ ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô class components
        </Typography>

        <Alert severity="info" sx={{ mb: 3 }}>
          <Typography variant="body2">
            üí° <strong>Next.js 15 + React 19:</strong> Hooks ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ò‡∏µ‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ state ‡πÅ‡∏•‡∏∞ side effects 
            ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö Server Components ‡πÅ‡∏•‡∏∞ Client Components
          </Typography>
        </Alert>

        {/* Features Grid */}
        <Typography variant="h6" sx={{ mb: 3 }}>
          üåü ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏î‡πà‡∏ô‡∏Ç‡∏≠‡∏á React Hooks:
        </Typography>
        
        <Box sx={{ 
          display: 'grid', 
          gridTemplateColumns: { xs: '1fr', md: '1fr 1fr' }, 
          gap: 3 
        }}>
          {hookFeatures.map((feature, index) => (
            <Card key={index} sx={{ height: '100%' }}>
              <CardContent>
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>
                  <Box sx={{ color: `${feature.color}.main` }}>
                    {feature.icon}
                  </Box>
                  <Typography variant="h6">
                    {feature.title}
                  </Typography>
                </Box>
                <Typography variant="body2">
                  {feature.description}
                </Typography>
              </CardContent>
            </Card>
          ))}
        </Box>

        {/* Rules of Hooks */}
        <Typography variant="h6" sx={{ mb: 2 }}>
          üìú ‡∏Å‡∏é‡∏Ç‡∏≠‡∏á Hooks:
        </Typography>

        <Alert severity="warning" sx={{ mb: 3 }}>
          <Typography variant="body2" sx={{ mb: 1, fontWeight: 'bold' }}>
            ‚ö†Ô∏è ‡∏Å‡∏é‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≥:
          </Typography>
          <List dense>
            <ListItem>
              <ListItemText primary="1. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Hooks ‡πÉ‡∏ô top level ‡∏Ç‡∏≠‡∏á function ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡πÉ‡∏ô loops, conditions, nested functions)" />
            </ListItem>
            <ListItem>
              <ListItemText primary="2. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Hooks ‡πÉ‡∏ô React functions ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (components ‡∏´‡∏£‡∏∑‡∏≠ custom hooks)" />
            </ListItem>
            <ListItem>
              <ListItemText primary="3. ‡πÉ‡∏ä‡πâ 'use client' directive ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Client Components ‡πÉ‡∏ô Next.js 15" />
            </ListItem>
          </List>
        </Alert>
      </Paper>

      {/* useState Hook */}
      <Paper sx={{ p: 4, mb: 4 }}>
        <Typography variant="h4" sx={{ mb: 3 }}>
          üì¶ useState Hook
        </Typography>

        <Typography variant="body1" sx={{ mb: 3 }}>
          <code>useState</code> ‡πÄ‡∏õ‡πá‡∏ô Hook ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏° state ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö functional components
        </Typography>

        <Tabs value={tabValue} onChange={handleTabChange} sx={{ mb: 3 }}>
          <Tab label="Basic Usage" />
          <Tab label="Multiple States" />
          <Tab label="Object State" />
          <Tab label="Array State" />
        </Tabs>

        <CustomTabPanel value={tabValue} index={0}>
          <Typography variant="h6" sx={{ mb: 2, color: 'primary.main' }}>
            üìù Basic useState Usage
          </Typography>
          
          <Box className="code-block" sx={{ p: 2, borderRadius: 1, fontFamily: 'monospace', mb: 3 }}>
            <Typography variant="body2" component="pre">
{`'use client';
import { useState } from 'react';

export default function Counter() {
  // useState hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ state
  const [count, setCount] = useState(0);

  return (
    <div>
      <h2>‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö: {count}</h2>
      <button onClick={() => setCount(count + 1)}>
        ‡πÄ‡∏û‡∏¥‡πà‡∏° (+1)
      </button>
      <button onClick={() => setCount(count - 1)}>
        ‡∏•‡∏î (-1)
      </button>
      <button onClick={() => setCount(0)}>
        ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
      </button>
    </div>
  );
}`}
            </Typography>
          </Box>

          <Alert severity="info" sx={{ mb: 2 }}>
            <Typography variant="body2">
              üí° <strong>useState</strong> returns array: [currentState, setterFunction]
            </Typography>
          </Alert>

          <CounterDemo />
        </CustomTabPanel>

        <CustomTabPanel value={tabValue} index={1}>
          <Typography variant="h6" sx={{ mb: 2, color: 'secondary.main' }}>
            üî¢ Multiple State Variables
          </Typography>
          
          <Box className="code-block" sx={{ p: 2, borderRadius: 1, fontFamily: 'monospace', mb: 3 }}>
            <Typography variant="body2" component="pre">
{`'use client';
import { useState } from 'react';

export default function UserForm() {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [age, setAge] = useState(0);
  const [isSubmitted, setIsSubmitted] = useState(false);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitted(true);
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        type="text"
        placeholder="Name"
        value={name}
        onChange={(e) => setName(e.target.value)}
      />
      <input
        type="email"
        placeholder="Email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
      />
      <input
        type="number"
        placeholder="Age"
        value={age}
        onChange={(e) => setAge(Number(e.target.value))}
      />
      <button type="submit">Submit</button>
      
      {isSubmitted && (
        <div>
          <h3>Submitted Data:</h3>
          <p>Name: {name}</p>
          <p>Email: {email}</p>
          <p>Age: {age}</p>
        </div>
      )}
    </form>
  );
}`}
            </Typography>
          </Box>

          <Alert severity="success">
            <Typography variant="body2">
              ‚úÖ <strong>Best Practice:</strong> ‡πÅ‡∏¢‡∏Å state variables ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¥‡∏™‡∏£‡∏∞‡∏à‡∏≤‡∏Å‡∏Å‡∏±‡∏ô
            </Typography>
          </Alert>
        </CustomTabPanel>

        <CustomTabPanel value={tabValue} index={2}>
          <Typography variant="h6" sx={{ mb: 2, color: 'info.main' }}>
            üìã Object State
          </Typography>
          
          <Box className="code-block" sx={{ p: 2, borderRadius: 1, fontFamily: 'monospace', mb: 3 }}>
            <Typography variant="body2" component="pre">
{`'use client';
import { useState } from 'react';

interface User {
  name: string;
  email: string;
  age: number;
}

export default function UserProfile() {
  const [user, setUser] = useState<User>({
    name: '',
    email: '',
    age: 0
  });

  const updateUser = (field: keyof User, value: string | number) => {
    setUser(prevUser => ({
      ...prevUser,  // Spread ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏Å‡∏©‡∏≤ properties ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
      [field]: value
    }));
  };

  return (
    <div>
      <input
        type="text"
        placeholder="Name"
        value={user.name}
        onChange={(e) => updateUser('name', e.target.value)}
      />
      <input
        type="email"
        placeholder="Email"
        value={user.email}
        onChange={(e) => updateUser('email', e.target.value)}
      />
      <input
        type="number"
        placeholder="Age"
        value={user.age}
        onChange={(e) => updateUser('age', Number(e.target.value))}
      />
      
      <div>
        <h3>Current User:</h3>
        <pre>{JSON.stringify(user, null, 2)}</pre>
      </div>
    </div>
  );
}`}
            </Typography>
          </Box>

          <Alert severity="warning">
            <Typography variant="body2">
              ‚ö†Ô∏è <strong>‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:</strong> ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ spread operator (...) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á object ‡πÉ‡∏´‡∏°‡πà
            </Typography>
          </Alert>
        </CustomTabPanel>

        <CustomTabPanel value={tabValue} index={3}>
          <Typography variant="h6" sx={{ mb: 2, color: 'warning.main' }}>
            üìö Array State
          </Typography>
          
          <Box className="code-block" sx={{ p: 2, borderRadius: 1, fontFamily: 'monospace', mb: 3 }}>
            <Typography variant="body2" component="pre">
{`'use client';
import { useState } from 'react';

export default function TodoList() {
  const [todos, setTodos] = useState<string[]>([]);
  const [inputValue, setInputValue] = useState('');

  const addTodo = () => {
    if (inputValue.trim()) {
      setTodos(prevTodos => [...prevTodos, inputValue]);
      setInputValue('');
    }
  };

  const removeTodo = (index: number) => {
    setTodos(prevTodos => prevTodos.filter((_, i) => i !== index));
  };

  const clearAll = () => {
    setTodos([]);
  };

  return (
    <div>
      <div>
        <input
          type="text"
          value={inputValue}
          onChange={(e) => setInputValue(e.target.value)}
          placeholder="Add new todo"
        />
        <button onClick={addTodo}>Add</button>
        <button onClick={clearAll}>Clear All</button>
      </div>
      
      <ul>
        {todos.map((todo, index) => (
          <li key={index}>
            {todo}
            <button onClick={() => removeTodo(index)}>Remove</button>
          </li>
        ))}
      </ul>
      
      <p>Total todos: {todos.length}</p>
    </div>
  );
}`}
            </Typography>
          </Box>

          <Alert severity="info">
            <Typography variant="body2">
              üí° <strong>Array Methods:</strong> ‡πÉ‡∏ä‡πâ filter, map, spread operator ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö immutable updates
            </Typography>
          </Alert>
        </CustomTabPanel>
      </Paper>

      {/* useEffect Hook */}
      <Paper sx={{ p: 4, mb: 4 }}>
        <Typography variant="h4" sx={{ mb: 3 }}>
          ‚ö° useEffect Hook
        </Typography>

        <Typography variant="body1" sx={{ mb: 3 }}>
          <code>useEffect</code> ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ side effects ‡πÄ‡∏ä‡πà‡∏ô API calls, subscriptions, DOM manipulation
        </Typography>

        <Accordion sx={{ mb: 2 }}>
          <AccordionSummary expandIcon={<ExpandMore />}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
              <Timer color="primary" />
              <Typography variant="h6">Basic useEffect</Typography>
            </Box>
          </AccordionSummary>
          <AccordionDetails>
            <Typography variant="body1" sx={{ mb: 2 }}>
              useEffect ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô - ‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà component render
            </Typography>
            
            <Box className="code-block" sx={{ p: 2, borderRadius: 1, fontFamily: 'monospace', mb: 2 }}>
              <Typography variant="body2" component="pre">
{`'use client';
import { useState, useEffect } from 'react';

export default function BasicEffect() {
  const [count, setCount] = useState(0);

  // ‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà component render
  useEffect(() => {
    document.title = \`Count: \${count}\`;
  });

  // ‡∏£‡∏±‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å (component mount)
  useEffect(() => {
    console.log('Component mounted');
  }, []); // Empty dependency array

  // ‡∏£‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ count ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
  useEffect(() => {
    console.log(\`Count changed to: \${count}\`);
  }, [count]); // count ‡πÉ‡∏ô dependency array

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>
        Increment
      </button>
    </div>
  );
}`}
              </Typography>
            </Box>

            <Alert severity="info">
              <Typography variant="body2">
                üí° <strong>Dependency Array:</strong> [] = ‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß, [value] = ‡∏£‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ value ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô, ‡πÑ‡∏°‡πà‡∏°‡∏µ = ‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
              </Typography>
            </Alert>

            <TimerDemo />
          </AccordionDetails>
        </Accordion>

        <Accordion sx={{ mb: 2 }}>
          <AccordionSummary expandIcon={<ExpandMore />}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
              <Refresh color="secondary" />
              <Typography variant="h6">API Calls with useEffect</Typography>
            </Box>
          </AccordionSummary>
          <AccordionDetails>
            <Typography variant="body1" sx={{ mb: 2 }}>
              ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ useEffect ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API
            </Typography>
            
            <Box className="code-block" sx={{ p: 2, borderRadius: 1, fontFamily: 'monospace', mb: 2 }}>
              <Typography variant="body2" component="pre">
{`'use client';
import { useState, useEffect } from 'react';

interface User {
  id: number;
  name: string;
  email: string;
}

export default function UserList() {
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchUsers = async () => {
      try {
        setLoading(true);
        const response = await fetch('/api/users');
        
        if (!response.ok) {
          throw new Error('Failed to fetch users');
        }
        
        const userData = await response.json();
        setUsers(userData);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'An error occurred');
      } finally {
        setLoading(false);
      }
    };

    fetchUsers();
  }, []); // ‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠ component mount

  if (loading) return <div>Loading...</div>;
  if (error) return <div>Error: {error}</div>;

  return (
    <ul>
      {users.map(user => (
        <li key={user.id}>
          {user.name} - {user.email}
        </li>
      ))}
    </ul>
  );
}`}
              </Typography>
            </Box>

            <Alert severity="success">
              <Typography variant="body2">
                ‚úÖ <strong>Best Practice:</strong> ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ loading ‡πÅ‡∏•‡∏∞ error states ‡πÄ‡∏™‡∏°‡∏≠
              </Typography>
            </Alert>

            <FetchDemo />
          </AccordionDetails>
        </Accordion>

        <Accordion sx={{ mb: 2 }}>
          <AccordionSummary expandIcon={<ExpandMore />}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
              <BugReport color="warning" />
              <Typography variant="h6">Cleanup Functions</Typography>
            </Box>
          </AccordionSummary>
          <AccordionDetails>
            <Typography variant="body1" sx={{ mb: 2 }}>
              ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î (cleanup) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô memory leaks
            </Typography>
            
            <Box className="code-block" sx={{ p: 2, borderRadius: 1, fontFamily: 'monospace', mb: 2 }}>
              <Typography variant="body2" component="pre">
{`'use client';
import { useState, useEffect } from 'react';

export default function Timer() {
  const [seconds, setSeconds] = useState(0);
  const [isActive, setIsActive] = useState(false);

  useEffect(() => {
    let interval: NodeJS.Timeout | null = null;

    if (isActive) {
      interval = setInterval(() => {
        setSeconds(seconds => seconds + 1);
      }, 1000);
    } else if (!isActive && seconds !== 0) {
      if (interval) clearInterval(interval);
    }

    // Cleanup function
    return () => {
      if (interval) clearInterval(interval);
    };
  }, [isActive, seconds]);

  // Cleanup when component unmounts
  useEffect(() => {
    return () => {
      console.log('Component will unmount');
    };
  }, []);

  const toggle = () => {
    setIsActive(!isActive);
  };

  const reset = () => {
    setSeconds(0);
    setIsActive(false);
  };

  return (
    <div>
      <div>{seconds}s</div>
      <button onClick={toggle}>
        {isActive ? 'Pause' : 'Start'}
      </button>
      <button onClick={reset}>Reset</button>
    </div>
  );
}`}
              </Typography>
            </Box>

            <Alert severity="warning">
              <Typography variant="body2">
                ‚ö†Ô∏è <strong>‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:</strong> ‡∏ó‡∏≥ cleanup ‡πÄ‡∏™‡∏°‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô memory leaks
              </Typography>
            </Alert>
          </AccordionDetails>
        </Accordion>
      </Paper>

      {/* Common Patterns */}
      <Paper sx={{ p: 4, mb: 4 }}>
        <Typography variant="h4" sx={{ mb: 3 }}>
          üéØ Common Patterns & Best Practices
        </Typography>

        <Box sx={{ 
          display: 'grid', 
          gridTemplateColumns: { xs: '1fr', md: '1fr 1fr' }, 
          gap: 3 
        }}>
          <Card sx={{ height: '100%' }}>
            <CardContent>
              <Typography variant="h6" sx={{ mb: 2, color: 'primary.main' }}>
                üí° Custom Hooks
              </Typography>
              <Box className="code-block" sx={{ p: 2, borderRadius: 1, fontFamily: 'monospace', mb: 2 }}>
                <Typography variant="body2" component="pre">
{`// hooks/useCounter.ts
import { useState } from 'react';

export function useCounter(initialValue = 0) {
  const [count, setCount] = useState(initialValue);

  const increment = () => setCount(count + 1);
  const decrement = () => setCount(count - 1);
  const reset = () => setCount(initialValue);

  return {
    count,
    increment,
    decrement,
    reset
  };
}

// Usage
export default function Counter() {
  const { count, increment, decrement, reset } = useCounter(0);

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={increment}>+</button>
      <button onClick={decrement}>-</button>
      <button onClick={reset}>Reset</button>
    </div>
  );
}`}
                </Typography>
              </Box>
            </CardContent>
          </Card>

          <Card sx={{ height: '100%' }}>
            <CardContent>
              <Typography variant="h6" sx={{ mb: 2, color: 'secondary.main' }}>
                üîÑ Async useEffect
              </Typography>
              <Box className="code-block" sx={{ p: 2, borderRadius: 1, fontFamily: 'monospace', mb: 2 }}>
                <Typography variant="body2" component="pre">
{`// ‚ùå ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
useEffect(async () => {
  const data = await fetchData();
  setData(data);
}, []);

// ‚úÖ ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
useEffect(() => {
  const fetchData = async () => {
    try {
      const response = await fetch('/api/data');
      const data = await response.json();
      setData(data);
    } catch (error) {
      setError(error);
    }
  };

  fetchData();
}, []);`}
                </Typography>
              </Box>
            </CardContent>
          </Card>

          <Card sx={{ height: '100%' }}>
            <CardContent>
              <Typography variant="h6" sx={{ mb: 2, color: 'info.main' }}>
                üéõÔ∏è Conditional Effects
              </Typography>
              <Box className="code-block" sx={{ p: 2, borderRadius: 1, fontFamily: 'monospace', mb: 2 }}>
                <Typography variant="body2" component="pre">
{`export default function ConditionalEffect() {
  const [user, setUser] = useState(null);
  const [posts, setPosts] = useState([]);

  // ‡∏£‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ user ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  useEffect(() => {
    if (user) {
      fetch(\`/api/users/\${user.id}/posts\`)
        .then(res => res.json())
        .then(setPosts);
    }
  }, [user]);

  return (
    <div>
      {user && (
        <div>
          <h2>{user.name}</h2>
          <ul>
            {posts.map(post => (
              <li key={post.id}>{post.title}</li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
}`}
                </Typography>
              </Box>
            </CardContent>
          </Card>

          <Card sx={{ height: '100%' }}>
            <CardContent>
              <Typography variant="h6" sx={{ mb: 2, color: 'success.main' }}>
                üì± Event Listeners
              </Typography>
              <Box className="code-block" sx={{ p: 2, borderRadius: 1, fontFamily: 'monospace', mb: 2 }}>
                <Typography variant="body2" component="pre">
{`export default function WindowSize() {
  const [windowSize, setWindowSize] = useState({
    width: 0,
    height: 0
  });

  useEffect(() => {
    const handleResize = () => {
      setWindowSize({
        width: window.innerWidth,
        height: window.innerHeight
      });
    };

    // Set initial size
    handleResize();

    // Add event listener
    window.addEventListener('resize', handleResize);

    // Cleanup
    return () => {
      window.removeEventListener('resize', handleResize);
    };
  }, []); // empty dependency - run once

  return (
    <div>
      <h2>‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå</h2>
      <p>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á: {windowSize.width}px</p>
      <p>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á: {windowSize.height}px</p>
      <p>‡∏•‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏î‡∏π!</p>
    </div>
  );
}`}
                </Typography>
              </Box>
            </CardContent>
          </Card>
        </Box>
      </Paper>

      {/* Best Practices */}
      <Paper sx={{ p: 4, mb: 4, bgcolor: 'warning.light' }}>
        <Typography variant="h5" sx={{ mb: 2, color: 'warning.dark' }}>
          üí° Best Practices ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö React Hooks
        </Typography>
        <List>
          <ListItem>
            <ListItemIcon>
              <CheckCircle color="success" />
            </ListItemIcon>
            <ListItemText 
              primary="‡πÉ‡∏ä‡πâ TypeScript"
              secondary="‡∏Å‡∏≥‡∏´‡∏ô‡∏î types ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö state ‡πÅ‡∏•‡∏∞ props ‡πÄ‡∏û‡∏∑‡πà‡∏≠ type safety"
            />
          </ListItem>
          <ListItem>
            <ListItemIcon>
              <CheckCircle color="success" />
            </ListItemIcon>
            <ListItemText 
              primary="‡πÅ‡∏¢‡∏Å state ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"
              secondary="‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏£‡∏ß‡∏° state ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏î‡∏µ‡∏¢‡∏ß"
            />
          </ListItem>
          <ListItem>
            <ListItemIcon>
              <CheckCircle color="success" />
            </ListItemIcon>
            <ListItemText 
              primary="‡∏£‡∏∞‡∏ß‡∏±‡∏á dependency arrays"
              secondary="‡πÉ‡∏™‡πà dependencies ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô bugs"
            />
          </ListItem>
          <ListItem>
            <ListItemIcon>
              <CheckCircle color="success" />
            </ListItemIcon>
            <ListItemText 
              primary="‡∏ó‡∏≥ cleanup ‡πÄ‡∏™‡∏°‡∏≠"
              secondary="cleanup intervals, event listeners, subscriptions"
            />
          </ListItem>
          <ListItem>
            <ListItemIcon>
              <CheckCircle color="success" />
            </ListItemIcon>
            <ListItemText 
              primary="‡∏™‡∏£‡πâ‡∏≤‡∏á Custom Hooks"
              secondary="‡πÅ‡∏¢‡∏Å logic ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô custom hooks"
            />
          </ListItem>
          <ListItem>
            <ListItemIcon>
              <CheckCircle color="success" />
            </ListItemIcon>
            <ListItemText 
              primary="‡πÉ‡∏ä‡πâ 'use client' ‡πÉ‡∏ô Next.js 15"
              secondary="‡∏£‡∏∞‡∏ö‡∏∏ Client Components ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ hooks"
            />
          </ListItem>
        </List>
      </Paper>

      {/* Navigation */}
      <Paper sx={{ p: 4, bgcolor: 'success.light', color: 'success.dark' }}>
        <Typography variant="h5" sx={{ mb: 2 }}>
          üéØ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏à‡∏ö‡∏ö‡∏ó‡∏ó‡∏µ‡πà 7 ‡πÅ‡∏•‡πâ‡∏ß
        </Typography>
        <Typography variant="body1" sx={{ mb: 3 }}>
          ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ useState ‡πÅ‡∏•‡∏∞ useEffect ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á interactive components ‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß
          ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ Zod Validation ‡πÉ‡∏ô‡∏ö‡∏ó‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        </Typography>
        
        <Alert severity="info" sx={{ mb: 3 }}>
          <Typography variant="body2">
            üí° <strong>‡∏ö‡∏ó‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:</strong> ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ Zod Validation ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
          </Typography>
        </Alert>
      </Paper>

      {/* Navigation */}
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mt: 6 }}>
        <Button
          startIcon={<ArrowBack />}
          component={Link}
          href="/nextjs-basics/lesson-6"
          variant="outlined"
        >
          ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 6: Prisma & Database
        </Button>
        
        <Chip 
          label="7 / 16"
          color="primary"
          variant="outlined"
        />
        
        <Button
          endIcon={<ArrowForward />}
          component={Link}
          href="/nextjs-basics/lesson-8"
          variant="contained"
          color="primary"
        >
          ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 8: Zod Validation
        </Button>
      </Box>
    </Container>
  );
} 