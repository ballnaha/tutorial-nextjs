'use client';
import {
  Container,
  Typography,
  Box,
  Paper,
  Alert,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Chip,
  Button,
  Stepper,
  Step,
  StepLabel,
  StepContent,
  Card,
  CardContent,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Tabs,
  Tab,
  Divider,
} from '@mui/material';
import {
  CheckCircle,
  Code,
  PlayArrow,
  ExpandMore,
  Lightbulb,
  Warning,
  Info,
  Computer,
  Link as LinkIcon,
  Navigation,
  Home,
  Search,
  Speed,
  RouteOutlined,
  ArrowBack,
  ArrowForward,
} from '@mui/icons-material';
import Link from 'next/link';
import { useState } from 'react';

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

function CustomTabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`simple-tabpanel-${index}`}
      aria-labelledby={`simple-tab-${index}`}
      {...other}
    >
      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}
    </div>
  );
}

const navigationComparison = [
  {
    feature: '‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤',
    traditional: 'Full page reload',
    nextjs: 'Client-side navigation',
    tradColor: 'error',
    nextColor: 'success'
  },
  {
    feature: '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß',
    traditional: '‡∏ä‡πâ‡∏≤ (‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà)',
    nextjs: '‡πÄ‡∏£‡πá‡∏ß (prefetch ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà cache by default ‡πÉ‡∏ô 15)',
    tradColor: 'error',
    nextColor: 'success'
  },
  {
    feature: 'SEO',
    traditional: '‡∏î‡∏µ',
    nextjs: '‡∏î‡∏µ‡∏°‡∏≤‡∏Å',
    tradColor: 'success',
    nextColor: 'success'
  },
  {
    feature: 'User Experience',
    traditional: '‡∏°‡∏µ loading ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤',
    nextjs: '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ loading (‡πÅ‡∏ï‡πà fresh data)',
    tradColor: 'warning',
    nextColor: 'success'
  },
  {
    feature: 'JavaScript Bundle',
    traditional: '‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
    nextjs: 'Shared ‡πÅ‡∏•‡∏∞ cached',
    tradColor: 'error',
    nextColor: 'success'
  },
  {
    feature: 'Data Freshness (Next.js 15)',
    traditional: 'Fresh data ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
    nextjs: 'Fresh data by default (‡πÑ‡∏°‡πà cache page)',
    tradColor: 'info',
    nextColor: 'success'
  }
];

const linkFeatures = [
  {
    title: 'Prefetching (Enhanced)',
    description: '‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö links ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô viewport (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏ô Next.js 15)',
    icon: <Speed />,
    example: '‡πÄ‡∏°‡∏∑‡πà‡∏≠ Link ‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ Next.js ‡∏à‡∏∞ prefetch route ‡∏ô‡∏±‡πâ‡∏ô‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥'
  },
  {
    title: 'Client-side Navigation',
    description: '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà ‡∏û‡∏£‡πâ‡∏≠‡∏° fresh data',
    icon: <Navigation />,
    example: '‡πÉ‡∏ä‡πâ History API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô URL ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà refresh ‡∏´‡∏ô‡πâ‡∏≤ (data ‡∏à‡∏∞ fresh ‡πÉ‡∏ô Next.js 15)'
  },
  {
    title: 'Code Splitting',
    description: '‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡πÜ ‡∏î‡πâ‡∏ß‡∏¢ Turbopack',
    icon: <Code />,
    example: '‡πÅ‡∏ï‡πà‡∏•‡∏∞ route ‡∏à‡∏∞‡∏°‡∏µ JavaScript bundle ‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô (‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Turbopack)'
  },
  {
    title: 'State Preservation',
    description: '‡∏£‡∏±‡∏Å‡∏©‡∏≤ state ‡∏Ç‡∏≠‡∏á layout components ‡πÅ‡∏ï‡πà page data ‡∏à‡∏∞ fresh',
    icon: <RouteOutlined />,
    example: 'layout state ‡∏à‡∏∞‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà ‡πÅ‡∏ï‡πà page components ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà (Next.js 15)'
  }
];

export default function Lesson4Page() {
  const [activeStep, setActiveStep] = useState(0);
  const [tabValue, setTabValue] = useState(0);

  const handleNext = () => {
    setActiveStep((prevActiveStep) => prevActiveStep + 1);
  };

  const handleBack = () => {
    setActiveStep((prevActiveStep) => prevActiveStep - 1);
  };

  const handleReset = () => {
    setActiveStep(0);
  };

  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };

  return (
    <Container maxWidth="lg">
      {/* Header */}
      <Box sx={{ py: 4 }}>
        <Typography variant="h1" sx={{ mb: 2 }}>
          üîó ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 4: Link ‡πÅ‡∏•‡∏∞ Navigation
        </Typography>
        <Typography variant="h5" color="text.secondary" sx={{ mb: 4 }}>
          ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢ Next.js Link component ‡πÅ‡∏•‡∏∞ navigation hooks
        </Typography>

        <Box sx={{ display: 'flex', gap: 2, mb: 4 }}>
          <Chip label="15 ‡∏ô‡∏≤‡∏ó‡∏µ" color="primary" />
          <Chip label="‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô" color="secondary" />
          <Chip label="‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô" color="warning" />
        </Box>
      </Box>

      {/* Learning Objectives */}
      <Paper sx={{ p: 3, mb: 4, bgcolor: 'primary.light', color: 'primary.contrastText' }}>
        <Typography variant="h6" sx={{ mb: 2, display: 'flex', alignItems: 'center', gap: 1 }}>
          <Lightbulb /> ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
        </Typography>
        <List dense>
          <ListItem>
            <ListItemIcon sx={{ color: 'inherit' }}>
              <CheckCircle />
            </ListItemIcon>
            <ListItemText primary="‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Next.js Link component" />
          </ListItem>
          <ListItem>
            <ListItemIcon sx={{ color: 'inherit' }}>
              <CheckCircle />
            </ListItemIcon>
            <ListItemText primary="‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ useRouter ‡πÅ‡∏•‡∏∞ usePathname hooks ‡πÑ‡∏î‡πâ" />
          </ListItem>
          <ListItem>
            <ListItemIcon sx={{ color: 'inherit' }}>
              <CheckCircle />
            </ListItemIcon>
            <ListItemText primary="‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à Programmatic Navigation" />
          </ListItem>
          <ListItem>
            <ListItemIcon sx={{ color: 'inherit' }}>
              <CheckCircle />
            </ListItemIcon>
            <ListItemText primary="‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á active states ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö navigation ‡πÑ‡∏î‡πâ" />
          </ListItem>
        </List>
      </Paper>

      {/* Introduction */}
      <Paper sx={{ p: 4, mb: 4 }}>
        <Typography variant="h4" sx={{ mb: 3 }}>
          ü§î Navigation ‡πÉ‡∏ô Next.js ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?
        </Typography>
        
        <Typography variant="body1" sx={{ mb: 3, lineHeight: 1.7 }}>
          <strong>Navigation</strong> ‡πÉ‡∏ô Next.js ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏õ‡∏°‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á routes ‡∏ï‡πà‡∏≤‡∏á‡πÜ 
          ‡πÇ‡∏î‡∏¢ Next.js ‡∏°‡∏µ built-in components ‡πÅ‡∏•‡∏∞ hooks ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞ efficient ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
        </Typography>

        <Alert severity="info" sx={{ mb: 3 }}>
          <Typography variant="body2">
            üí° <strong>‡∏Ç‡πâ‡∏≠‡∏î‡∏µ:</strong> Next.js ‡πÉ‡∏ä‡πâ client-side navigation ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏£‡πá‡∏ß 
            ‡πÅ‡∏•‡∏∞‡∏°‡∏µ features ‡πÄ‡∏ä‡πà‡∏ô prefetching ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á performance
          </Typography>
        </Alert>

        {/* Comparison */}
        <Typography variant="h5" sx={{ mb: 3 }}>
          ‚ö° ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö Traditional vs Next.js Navigation
        </Typography>

        <TableContainer component={Paper} sx={{ mb: 4 }}>
          <Table>
            <TableHead>
              <TableRow>
                <TableCell><strong>‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥</strong></TableCell>
                <TableCell><strong>Traditional HTML</strong></TableCell>
                <TableCell><strong>Next.js</strong></TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {navigationComparison.map((item, index) => (
                <TableRow key={index}>
                  <TableCell>{item.feature}</TableCell>
                  <TableCell>
                    <Chip 
                      label={item.traditional} 
                      color={item.tradColor as any}
                      size="small" 
                    />
                  </TableCell>
                  <TableCell>
                    <Chip 
                      label={item.nextjs} 
                      color={item.nextColor as any}
                      size="small" 
                    />
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
      </Paper>

      {/* Link Component Features */}
      <Paper sx={{ p: 4, mb: 4 }}>
        <Typography variant="h4" sx={{ mb: 3 }}>
          üåü ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á Next.js Link
        </Typography>

        <Box sx={{ 
          display: 'flex', 
          flexDirection: { xs: 'column', sm: 'row' }, 
          gap: 2,
          flexWrap: 'wrap',
          mb: 4
        }}>
          {linkFeatures.map((feature, index) => (
            <Box key={index} sx={{ flex: 1, minWidth: '250px' }}>
              <Card sx={{ height: '100%' }}>
                <CardContent>
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>
                    <Box sx={{ color: 'primary.main' }}>
                      {feature.icon}
                    </Box>
                    <Typography variant="h6">
                      {feature.title}
                    </Typography>
                  </Box>
                  <Typography variant="body2" sx={{ mb: 2 }}>
                    {feature.description}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    <strong>‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:</strong> {feature.example}
                  </Typography>
                </CardContent>
              </Card>
            </Box>
          ))}
        </Box>

        <Alert severity="success" sx={{ mb: 3 }}>
          <Typography variant="body2">
            ‚úÖ <strong>Performance Tip:</strong> Next.js ‡∏à‡∏∞ prefetch routes ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ 
            ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Link component ‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡πÉ‡∏ô viewport (‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠)
          </Typography>
        </Alert>
      </Paper>

      {/* Basic Link Usage */}
      <Paper sx={{ p: 4, mb: 4 }}>
        <Typography variant="h4" sx={{ mb: 3 }}>
          üìñ ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Link Component
        </Typography>

        <Accordion sx={{ mb: 2 }}>
          <AccordionSummary expandIcon={<ExpandMore />}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
              <LinkIcon color="primary" />
              <Typography variant="h6">‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô</Typography>
            </Box>
          </AccordionSummary>
          <AccordionDetails>
            <Typography variant="body1" sx={{ mb: 2 }}>
              ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Link component ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ
            </Typography>
            
            <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 2 }}>
              <Typography variant="body2" component="pre">
{`// app/components/Navigation.tsx
import Link from 'next/link';

export default function Navigation() {
  return (
    <nav>
      <ul>
        <li>
          <Link href="/">‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å</Link>
        </li>
        <li>
          <Link href="/about">‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤</Link>
        </li>
        <li>
          <Link href="/products">‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</Link>
        </li>
        <li>
          <Link href="/contact">‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤</Link>
        </li>
      </ul>
    </nav>
  );
}`}
              </Typography>
            </Box>

            <Alert severity="info">
              <Typography variant="body2">
                üí° Link component ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á &lt;a&gt; tag ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ client-side navigation
              </Typography>
            </Alert>
          </AccordionDetails>
        </Accordion>

        <Accordion sx={{ mb: 2 }}>
          <AccordionSummary expandIcon={<ExpandMore />}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
              <ArrowForward color="success" />
              <Typography variant="h6">Dynamic Routes</Typography>
            </Box>
          </AccordionSummary>
          <AccordionDetails>
            <Typography variant="body1" sx={{ mb: 2 }}>
              ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Link ‡∏Å‡∏±‡∏ö dynamic routes ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
            </Typography>
            
            <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 2 }}>
              <Typography variant="body2" component="pre">
{`// app/components/ProductList.tsx
import Link from 'next/link';

interface Product {
  id: string;
  name: string;
  price: number;
}

export default function ProductList({ products }: { products: Product[] }) {
  return (
    <div>
      <h2>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h2>
      {products.map(product => (
        <div key={product.id}>
          <h3>{product.name}</h3>
          <p>‡∏£‡∏≤‡∏Ñ‡∏≤: {product.price} ‡∏ö‡∏≤‡∏ó</p>
          
          {/* Dynamic route */}
          <Link href={\`/products/\${product.id}\`}>
            ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
          </Link>
          
          {/* ‡πÉ‡∏ä‡πâ object format */}
          <Link 
            href={{
              pathname: '/products/[id]',
              query: { id: product.id }
            }}
          >
            ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î (‡πÅ‡∏ö‡∏ö object)
          </Link>
        </div>
      ))}
    </div>
  );
}`}
              </Typography>
            </Box>

            <Alert severity="success">
              <Typography variant="body2">
                ‚úÖ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ template literal ‡∏´‡∏£‡∏∑‡∏≠ object format ‡∏Å‡πá‡πÑ‡∏î‡πâ
              </Typography>
            </Alert>
          </AccordionDetails>
        </Accordion>

        <Accordion sx={{ mb: 2 }}>
          <AccordionSummary expandIcon={<ExpandMore />}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
              <RouteOutlined color="warning" />
              <Typography variant="h6">Link Properties</Typography>
            </Box>
          </AccordionSummary>
          <AccordionDetails>
            <Typography variant="body1" sx={{ mb: 2 }}>
              Properties ‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö Link component
            </Typography>
            
            <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 2 }}>
              <Typography variant="body2" component="pre">
{`import Link from 'next/link';

export default function AdvancedLinks() {
  return (
    <div>
      {/* ‡∏õ‡∏¥‡∏î prefetching */}
      <Link href="/heavy-page" prefetch={false}>
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á prefetch
      </Link>

      {/* ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà */}
      <Link href="/external" target="_blank" rel="noopener noreferrer">
        ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
      </Link>

      {/* Replace ‡πÅ‡∏ó‡∏ô push */}
      <Link href="/login" replace>
        Login (replace history)
      </Link>

      {/* Scroll to top */}
      <Link href="/products" scroll={false}>
        ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÑ‡∏°‡πà scroll ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏ô)
      </Link>

      {/* Custom className */}
      <Link 
        href="/about" 
        className="text-blue-500 hover:text-blue-700"
      >
        ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤
      </Link>
    </div>
  );
}`}
              </Typography>
            </Box>

            <Alert severity="warning">
              <Typography variant="body2">
                ‚ö†Ô∏è prefetch={false} ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ prefetch (‡πÄ‡∏ä‡πà‡∏ô ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏¢‡∏≠‡∏∞)
              </Typography>
            </Alert>
          </AccordionDetails>
        </Accordion>
      </Paper>

      {/* useRouter Hook */}
      <Paper sx={{ p: 4, mb: 4 }}>
        <Typography variant="h4" sx={{ mb: 3 }}>
          üîß useRouter Hook
        </Typography>

        <Typography variant="body1" sx={{ mb: 3 }}>
          useRouter hook ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö programmatic navigation ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• router
        </Typography>

        <Accordion sx={{ mb: 2 }}>
          <AccordionSummary expandIcon={<ExpandMore />}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
              <RouteOutlined color="primary" />
              <Typography variant="h6">Basic useRouter</Typography>
            </Box>
          </AccordionSummary>
          <AccordionDetails>
            <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 2 }}>
              <Typography variant="body2" component="pre">
{`'use client';
import { useRouter } from 'next/navigation';

export default function NavigationButtons() {
  const router = useRouter();

  const handleGoBack = () => {
    router.back(); // ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
  };

  const handleGoForward = () => {
    router.forward(); // ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
  };

  const handleGoHome = () => {
    router.push('/'); // ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
  };

  const handleReplace = () => {
    router.replace('/dashboard'); // replace current page
  };

  const handleRefresh = () => {
    router.refresh(); // refresh current page
  };

  return (
    <div>
      <button onClick={handleGoBack}>‚Üê ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö</button>
      <button onClick={handleGoForward}>‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‚Üí</button>
      <button onClick={handleGoHome}>üè† ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å</button>
      <button onClick={handleReplace}>üìä Dashboard</button>
      <button onClick={handleRefresh}>üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä</button>
    </div>
  );
}`}
              </Typography>
            </Box>
          </AccordionDetails>
        </Accordion>

        <Accordion sx={{ mb: 2 }}>
          <AccordionSummary expandIcon={<ExpandMore />}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
              <Home color="info" />
              <Typography variant="h6">Conditional Navigation</Typography>
            </Box>
          </AccordionSummary>
          <AccordionDetails>
            <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 2 }}>
              <Typography variant="body2" component="pre">
{`'use client';
import { useRouter } from 'next/navigation';
import { useState } from 'react';

export default function LoginForm() {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);

    try {
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• login
      const response = await fetch('/api/auth/login', {
        method: 'POST',
        // ... login logic
      });

      if (response.ok) {
        // Login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - redirect ‡πÑ‡∏õ dashboard
        router.push('/dashboard');
      } else {
        // Login ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡πÅ‡∏™‡∏î‡∏á error
        alert('Login failed');
      }
    } catch (error) {
      console.error('Login error:', error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      {/* form fields */}
      <button type="submit" disabled={isLoading}>
        {isLoading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö...' : '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö'}
      </button>
    </form>
  );
}`}
              </Typography>
            </Box>
          </AccordionDetails>
        </Accordion>
      </Paper>

      {/* usePathname Hook */}
      <Paper sx={{ p: 4, mb: 4 }}>
        <Typography variant="h4" sx={{ mb: 3 }}>
          üìç usePathname Hook
        </Typography>

        <Typography variant="body1" sx={{ mb: 3 }}>
          usePathname hook ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• current pathname ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á active states
        </Typography>

        <Accordion sx={{ mb: 2 }}>
          <AccordionSummary expandIcon={<ExpandMore />}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
              <Home color="success" />
              <Typography variant="h6">Active Navigation</Typography>
            </Box>
          </AccordionSummary>
          <AccordionDetails>
            <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 2 }}>
              <Typography variant="body2" component="pre">
{`'use client';
import Link from 'next/link';
import { usePathname } from 'next/navigation';

const navItems = [
  { href: '/', label: '‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å' },
  { href: '/about', label: '‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤' },
  { href: '/products', label: '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤' },
  { href: '/contact', label: '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤' }
];

export default function ActiveNavigation() {
  const pathname = usePathname();

  return (
    <nav>
      <ul className="flex space-x-4">
        {navItems.map((item) => {
          const isActive = pathname === item.href;
          
          return (
            <li key={item.href}>
              <Link 
                href={item.href}
                className={\`px-3 py-2 rounded \${
                  isActive 
                    ? 'bg-blue-500 text-white' 
                    : 'text-gray-700 hover:bg-gray-100'
                }\`}
              >
                {item.label}
              </Link>
            </li>
          );
        })}
      </ul>
    </nav>
  );
}`}
              </Typography>
            </Box>
          </AccordionDetails>
        </Accordion>

        <Accordion>
          <AccordionSummary expandIcon={<ExpandMore />}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
              <RouteOutlined color="warning" />
              <Typography variant="h6">Advanced Pathname Matching</Typography>
            </Box>
          </AccordionSummary>
          <AccordionDetails>
            <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 2 }}>
              <Typography variant="body2" component="pre">
{`'use client';
import Link from 'next/link';
import { usePathname } from 'next/navigation';

export default function AdvancedNavigation() {
  const pathname = usePathname();

  const isActive = (path: string) => {
    // Exact match
    if (path === pathname) return true;
    
    // Starts with (for nested routes)
    if (path !== '/' && pathname.startsWith(path)) return true;
    
    return false;
  };

  const getBreadcrumbs = () => {
    const segments = pathname.split('/').filter(Boolean);
    return segments.map((segment, index) => {
      const path = '/' + segments.slice(0, index + 1).join('/');
      return { path, label: segment };
    });
  };

  return (
    <div>
      {/* Main Navigation */}
      <nav>
        <Link 
          href="/" 
          className={isActive('/') ? 'active' : ''}
        >
          ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
        </Link>
        <Link 
          href="/products" 
          className={isActive('/products') ? 'active' : ''}
        >
          ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        </Link>
      </nav>

      {/* Breadcrumbs */}
      <div className="breadcrumbs">
        <Link href="/">Home</Link>
        {getBreadcrumbs().map((crumb, index) => (
          <span key={crumb.path}>
            {' > '}
            <Link href={crumb.path}>{crumb.label}</Link>
          </span>
        ))}
      </div>

      {/* Current Page Info */}
      <div>
        <p>Current pathname: {pathname}</p>
        <p>Is products page: {pathname.startsWith('/products')}</p>
      </div>
    </div>
  );
}`}
              </Typography>
            </Box>
          </AccordionDetails>
        </Accordion>
      </Paper>

      {/* Hands-on Practice */}
      <Paper sx={{ p: 4, mb: 4 }}>
        <Typography variant="h4" sx={{ mb: 3 }}>
          ‚úã ‡∏ù‡∏∂‡∏Å‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥: ‡∏™‡∏£‡πâ‡∏≤‡∏á Navigation System
        </Typography>
        
        <Typography variant="body1" sx={{ mb: 3 }}>
          ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á navigation system ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏ï‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ
        </Typography>

        <Stepper activeStep={activeStep} orientation="vertical">
          <Step>
            <StepLabel>
              <Typography variant="h6">‡∏™‡∏£‡πâ‡∏≤‡∏á Navigation Component</Typography>
            </StepLabel>
            <StepContent>
              <Typography variant="body1" sx={{ mb: 2 }}>
                ‡∏™‡∏£‡πâ‡∏≤‡∏á navigation bar ‡∏ó‡∏µ‡πà‡∏°‡∏µ active states
              </Typography>
              
              <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 2 }}>
                <Typography variant="body2">
                  $ mkdir -p app/components/navigation<br/>
                  $ touch app/components/navigation/Navbar.tsx
                </Typography>
              </Box>

              <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 2 }}>
                <Typography variant="body2" component="pre">
{`// app/components/navigation/Navbar.tsx
'use client';

import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { Box, AppBar, Toolbar, Button } from '@mui/material';

const navItems = [
  { href: '/', label: '‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å' },
  { href: '/about', label: '‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤' },
  { href: '/products', label: '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤' },
  { href: '/blog', label: '‡∏ö‡∏•‡πá‡∏≠‡∏Å' },
  { href: '/contact', label: '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤' }
];

export default function Navbar() {
  const pathname = usePathname();

  return (
    <AppBar position="static">
      <Toolbar>
        <Box sx={{ display: 'flex', gap: 2 }}>
          {navItems.map((item) => {
            const isActive = pathname === item.href || 
              (item.href !== '/' && pathname.startsWith(item.href));
            
            return (
              <Button
                key={item.href}
                component={Link}
                href={item.href}
                sx={{
                  color: 'white',
                  backgroundColor: isActive ? 'rgba(255,255,255,0.2)' : 'transparent',
                  '&:hover': {
                    backgroundColor: 'rgba(255,255,255,0.1)'
                  }
                }}
              >
                {item.label}
              </Button>
            );
          })}
        </Box>
      </Toolbar>
    </AppBar>
  );
}`}
                </Typography>
              </Box>

              <Alert severity="success" sx={{ mb: 2 }}>
                <Typography variant="body2">
                  ‚úÖ ‡∏ô‡∏≥ component ‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÉ‡∏™‡πà‡πÉ‡∏ô layout.tsx ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πâ‡∏≤
                </Typography>
              </Alert>

              <Button variant="contained" onClick={handleNext} sx={{ mt: 1, mr: 1 }}>
                ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
              </Button>
            </StepContent>
          </Step>

          <Step>
            <StepLabel>
              <Typography variant="h6">‡∏™‡∏£‡πâ‡∏≤‡∏á Breadcrumbs Component</Typography>
            </StepLabel>
            <StepContent>
              <Typography variant="body1" sx={{ mb: 2 }}>
                ‡∏™‡∏£‡πâ‡∏≤‡∏á breadcrumbs ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏ï‡∏≤‡∏° current path
              </Typography>
              
              <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 2 }}>
                <Typography variant="body2">
                  $ touch app/components/navigation/Breadcrumbs.tsx
                </Typography>
              </Box>

              <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 2 }}>
                <Typography variant="body2" component="pre">
{`// app/components/navigation/Breadcrumbs.tsx
'use client';

import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { Breadcrumbs as MUIBreadcrumbs, Typography } from '@mui/material';
import { Home } from '@mui/icons-material';

const pathNames: Record<string, string> = {
  '': '‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å',
  'about': '‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤',
  'products': '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
  'blog': '‡∏ö‡∏•‡πá‡∏≠‡∏Å',
  'contact': '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤'
};

export default function Breadcrumbs() {
  const pathname = usePathname();
  const segments = pathname.split('/').filter(Boolean);

  if (pathname === '/') return null;

  return (
    <MUIBreadcrumbs sx={{ py: 2 }}>
      <Link href="/" style={{ display: 'flex', alignItems: 'center' }}>
        <Home sx={{ mr: 0.5 }} fontSize="inherit" />
        ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
      </Link>
      
      {segments.map((segment, index) => {
        const path = '/' + segments.slice(0, index + 1).join('/');
        const isLast = index === segments.length - 1;
        const displayName = pathNames[segment] || segment;

        return isLast ? (
          <Typography key={path} color="text.primary">
            {displayName}
          </Typography>
        ) : (
          <Link key={path} href={path}>
            {displayName}
          </Link>
        );
      })}
    </MUIBreadcrumbs>
  );
}`}
                </Typography>
              </Box>

              <Alert severity="info" sx={{ mb: 2 }}>
                <Typography variant="body2">
                  üí° ‡πÉ‡∏ä‡πâ pathNames object ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á URL segments ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
                </Typography>
              </Alert>

              <Button variant="contained" onClick={handleNext} sx={{ mt: 1, mr: 1 }}>
                ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
              </Button>
              <Button onClick={handleBack} sx={{ mt: 1, mr: 1 }}>
                ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
              </Button>
            </StepContent>
          </Step>

          <Step>
            <StepLabel>
              <Typography variant="h6">‡∏™‡∏£‡πâ‡∏≤‡∏á Navigation Actions</Typography>
            </StepLabel>
            <StepContent>
              <Typography variant="body1" sx={{ mb: 2 }}>
                ‡∏™‡∏£‡πâ‡∏≤‡∏á component ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ useRouter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö programmatic navigation
              </Typography>
              
              <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 2 }}>
                <Typography variant="body2">
                  $ touch app/components/navigation/NavigationActions.tsx
                </Typography>
              </Box>

              <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 2 }}>
                <Typography variant="body2" component="pre">
{`// app/components/navigation/NavigationActions.tsx
'use client';

import { useRouter } from 'next/navigation';
import { Button, ButtonGroup, Paper } from '@mui/material';
import { 
  ArrowBack, 
  ArrowForward, 
  Home, 
  Refresh 
} from '@mui/icons-material';

export default function NavigationActions() {
  const router = useRouter();

  return (
    <Paper sx={{ p: 2, m: 2 }}>
      <ButtonGroup variant="outlined" aria-label="navigation actions">
        <Button
          startIcon={<ArrowBack />}
          onClick={() => router.back()}
        >
          ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
        </Button>
        
        <Button
          startIcon={<ArrowForward />}
          onClick={() => router.forward()}
        >
          ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        </Button>
        
        <Button
          startIcon={<Home />}
          onClick={() => router.push('/')}
        >
          ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
        </Button>
        
        <Button
          startIcon={<Refresh />}
          onClick={() => router.refresh()}
        >
          ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
        </Button>
      </ButtonGroup>
      
      {/* Quick Navigation */}
      <ButtonGroup variant="contained" sx={{ ml: 2 }}>
        <Button onClick={() => router.push('/products')}>
          ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        </Button>
        <Button onClick={() => router.push('/about')}>
          ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤
        </Button>
        <Button onClick={() => router.push('/contact')}>
          ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤
        </Button>
      </ButtonGroup>
    </Paper>
  );
}`}
                </Typography>
              </Box>

              <Alert severity="success" sx={{ mb: 2 }}>
                <Typography variant="body2">
                  ‚úÖ ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ navigation system ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏•‡πâ‡∏ß!
                </Typography>
              </Alert>

              <Button variant="contained" onClick={handleNext} sx={{ mt: 1, mr: 1 }}>
                ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
              </Button>
              <Button onClick={handleBack} sx={{ mt: 1, mr: 1 }}>
                ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
              </Button>
            </StepContent>
          </Step>
        </Stepper>

        {activeStep === 3 && (
          <Paper sx={{ p: 3, mt: 3, bgcolor: 'success.light' }}>
            <Typography variant="h6" sx={{ mb: 2 }}>
              üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏£‡πâ‡∏≤‡∏á Navigation System ‡πÅ‡∏•‡πâ‡∏ß
            </Typography>
            <Typography variant="body1" sx={{ mb: 2 }}>
              ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ navigation ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á active states, breadcrumbs ‡πÅ‡∏•‡∏∞ programmatic navigation
            </Typography>
            <Button onClick={handleReset} sx={{ mt: 1, mr: 1 }}>
              ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
            </Button>
          </Paper>
        )}
      </Paper>

      {/* Performance Tips */}
      <Paper sx={{ p: 4, mb: 4 }}>
        <Typography variant="h4" sx={{ mb: 3 }}>
          ‚ö° Performance ‡πÅ‡∏•‡∏∞ Advanced Tips
        </Typography>

        <Tabs value={tabValue} onChange={handleTabChange} sx={{ mb: 3 }}>
          <Tab label="Prefetching" />
          <Tab label="Loading States" />
          <Tab label="Error Handling" />
        </Tabs>

        <CustomTabPanel value={tabValue} index={0}>
          <Typography variant="h6" sx={{ mb: 2, color: 'success.main' }}>
            üöÄ Prefetching Strategies
          </Typography>
          
          <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 2 }}>
            <Typography variant="body2" component="pre">
{`// ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° prefetching
<Link href="/products" prefetch={false}>
  ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÑ‡∏°‡πà prefetch)
</Link>

// Hover prefetch
<Link 
  href="/products" 
  onMouseEnter={() => router.prefetch('/products')}
>
  ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (prefetch ‡πÄ‡∏°‡∏∑‡πà‡∏≠ hover)
</Link>

// Conditional prefetch
{isLoggedIn && (
  <Link href="/dashboard" prefetch={true}>
    Dashboard
  </Link>
)}`}
            </Typography>
          </Box>

          <Alert severity="info">
            <Typography variant="body2">
              üí° <strong>‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:</strong> ‡∏õ‡∏¥‡∏î prefetch ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏¢‡∏≠‡∏∞ ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ authentication
            </Typography>
          </Alert>
        </CustomTabPanel>

        <CustomTabPanel value={tabValue} index={1}>
          <Typography variant="h6" sx={{ mb: 2, color: 'info.main' }}>
            ‚è≥ Loading States
          </Typography>
          
          <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 2 }}>
            <Typography variant="body2" component="pre">
{`'use client';
import { useRouter } from 'next/navigation';
import { useState, useTransition } from 'react';

export default function NavigationWithLoading() {
  const router = useRouter();
  const [isPending, startTransition] = useTransition();

  const handleNavigation = (url: string) => {
    startTransition(() => {
      router.push(url);
    });
  };

  return (
    <div>
      <button 
        onClick={() => handleNavigation('/products')}
        disabled={isPending}
      >
        {isPending ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...' : '‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'}
      </button>
      
      {isPending && <div>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤...</div>}
    </div>
  );
}`}
            </Typography>
          </Box>

          <Alert severity="warning">
            <Typography variant="body2">
              ‚ö†Ô∏è ‡πÉ‡∏ä‡πâ useTransition ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ loading states ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            </Typography>
          </Alert>
        </CustomTabPanel>

        <CustomTabPanel value={tabValue} index={2}>
          <Typography variant="h6" sx={{ mb: 2, color: 'error.main' }}>
            üõ†Ô∏è Error Handling
          </Typography>
          
          <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 2 }}>
            <Typography variant="body2" component="pre">
{`'use client';
import { useRouter } from 'next/navigation';

export default function SafeNavigation() {
  const router = useRouter();

  const handleSafeNavigation = async (url: string) => {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö URL ‡∏Å‡πà‡∏≠‡∏ô
      if (!url || !url.startsWith('/')) {
        throw new Error('Invalid URL');
      }

      router.push(url);
    } catch (error) {
      console.error('Navigation error:', error);
      alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏î‡πâ');
    }
  };

  return (
    <div>
      <button onClick={() => handleSafeNavigation('/products')}>
        ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)
      </button>
    </div>
  );
}`}
            </Typography>
          </Box>

          <Alert severity="error">
            <Typography variant="body2">
              ‚ùå ‡πÄ‡∏™‡∏°‡∏≠‡∏ï‡πâ‡∏≠‡∏á validate URLs ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ errors ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
            </Typography>
          </Alert>
        </CustomTabPanel>
      </Paper>

      {/* Best Practices */}
      <Paper sx={{ p: 4, mb: 4, bgcolor: 'warning.light' }}>
        <Typography variant="h5" sx={{ mb: 2, color: 'warning.dark' }}>
          üí° Best Practices ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        </Typography>
        <List>
          <ListItem>
            <ListItemIcon>
              <CheckCircle color="success" />
            </ListItemIcon>
            <ListItemText 
              primary="‡πÉ‡∏ä‡πâ Link component ‡πÅ‡∏ó‡∏ô <a> tag"
              secondary="‡πÉ‡∏´‡πâ Next.js ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ client-side navigation ‡πÅ‡∏•‡∏∞ prefetching"
            />
          </ListItem>
          <ListItem>
            <ListItemIcon>
              <CheckCircle color="success" />
            </ListItemIcon>
            <ListItemText 
              primary="‡πÉ‡∏ä‡πâ absolute paths ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö internal links"
              secondary="‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ / ‡πÄ‡∏™‡∏°‡∏≠ ‡πÄ‡∏ä‡πà‡∏ô /products ‡πÅ‡∏ó‡∏ô products"
            />
          </ListItem>
          <ListItem>
            <ListItemIcon>
              <CheckCircle color="success" />
            </ListItemIcon>
            <ListItemText 
              primary="‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ prefetch={false}"
              secondary="‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏à‡∏∞‡∏•‡∏î performance"
            />
          </ListItem>
          <ListItem>
            <ListItemIcon>
              <CheckCircle color="success" />
            </ListItemIcon>
            <ListItemText 
              primary="‡πÉ‡∏ä‡πâ usePathname ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö active states"
              secondary="‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ window.location ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà optimal"
            />
          </ListItem>
          <ListItem>
            <ListItemIcon>
              <CheckCircle color="success" />
            </ListItemIcon>
            <ListItemText 
              primary="‡πÉ‡∏ä‡πâ router.replace() ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö redirects"
              secondary="‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ user ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏î‡πâ"
            />
          </ListItem>
          <ListItem>
            <ListItemIcon>
              <CheckCircle color="success" />
            </ListItemIcon>
            <ListItemText 
              primary="‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ loading states ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"
              secondary="‡πÉ‡∏ä‡πâ useTransition ‡∏´‡∏£‡∏∑‡∏≠ loading.tsx ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UX ‡∏ó‡∏µ‡πà‡∏î‡∏µ"
            />
          </ListItem>
        </List>
      </Paper>

      {/* Next Steps */}
      <Paper sx={{ p: 4, bgcolor: 'success.light', color: 'success.dark' }}>
        <Typography variant="h5" sx={{ mb: 2 }}>
          üéØ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏à‡∏ö‡∏ö‡∏ó‡∏ó‡∏µ‡πà 4 ‡πÅ‡∏•‡πâ‡∏ß
        </Typography>
        <Typography variant="body1" sx={{ mb: 3 }}>
          ‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ Navigation ‡πÉ‡∏ô Next.js ‡πÅ‡∏•‡πâ‡∏ß 
          ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á Data Fetching ‡πÅ‡∏•‡∏∞ API Routes ‡πÉ‡∏ô‡∏ö‡∏ó‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        </Typography>
        
        <Alert severity="info" sx={{ mb: 3 }}>
          <Typography variant="body2">
            üí° <strong>‡∏ö‡∏ó‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:</strong> ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ Data Fetching ‡πÅ‡∏•‡∏∞ API Routes ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô
          </Typography>
        </Alert>
      </Paper>

      {/* Navigation */}
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mt: 6 }}>
        <Button
          startIcon={<ArrowBack />}
          component={Link}
          href="/nextjs-basics/lesson-3"
          variant="outlined"
        >
          ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 3: Server vs Client Components
        </Button>
        
        <Chip 
          label="4 / 16"
          color="primary"
          variant="outlined"
        />
        
        <Button
          endIcon={<ArrowForward />}
          component={Link}
          href="/nextjs-basics/lesson-5"
          variant="contained"
          color="primary"
        >
          ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 5: Data Fetching & API Routes
        </Button>
      </Box>
    </Container>
  );
} 