'use client';
import React from 'react';
import {
  Box,
  Typography,
  Alert,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Chip,
  Button,
  Stepper,
  Step,
  StepLabel,
  StepContent,
  Card,
  CardContent,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Tabs,
  Tab,
  Stack,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
} from '@mui/material';
import {
  CheckCircle,
  Code,
  PlayArrow,
  ExpandMore,
  Lightbulb,
  Warning,
  Info,
  Computer,
  Link as LinkIcon,
  Navigation,
  Home,
  Search,
  Speed,
  RouteOutlined,
  ArrowBack,
  ArrowForward,
} from '@mui/icons-material';
import Link from 'next/link';
import { useState } from 'react';

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

function CustomTabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`simple-tabpanel-${index}`}
      aria-labelledby={`simple-tab-${index}`}
      {...other}
    >
      {value === index && <Box sx={{ p: { xs: 2, sm: 3 } }}>{children}</Box>}
    </div>
  );
}

const navigationComparison = [
  {
    feature: '‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤',
    traditional: 'Full page reload',
    nextjs: 'Client-side navigation',
    tradColor: 'error',
    nextColor: 'success'
  },
  {
    feature: '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß',
    traditional: '‡∏ä‡πâ‡∏≤ (‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà)',
    nextjs: '‡πÄ‡∏£‡πá‡∏ß (prefetch ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà cache by default ‡πÉ‡∏ô 15)',
    tradColor: 'error',
    nextColor: 'success'
  },
  {
    feature: 'SEO',
    traditional: '‡∏î‡∏µ',
    nextjs: '‡∏î‡∏µ‡∏°‡∏≤‡∏Å',
    tradColor: 'success',
    nextColor: 'success'
  },
  {
    feature: 'User Experience',
    traditional: '‡∏°‡∏µ loading ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤',
    nextjs: '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ loading (‡πÅ‡∏ï‡πà fresh data)',
    tradColor: 'warning',
    nextColor: 'success'
  },
  {
    feature: 'JavaScript Bundle',
    traditional: '‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
    nextjs: 'Shared ‡πÅ‡∏•‡∏∞ cached',
    tradColor: 'error',
    nextColor: 'success'
  },
  {
    feature: 'Data Freshness (Next.js 15)',
    traditional: 'Fresh data ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
    nextjs: 'Fresh data by default (‡πÑ‡∏°‡πà cache page)',
    tradColor: 'info',
    nextColor: 'success'
  }
];

const linkFeatures = [
  {
    title: 'Prefetching (Enhanced)',
    description: '‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö links ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô viewport (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏ô Next.js 15)',
    icon: <Speed />,
    example: '‡πÄ‡∏°‡∏∑‡πà‡∏≠ Link ‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ Next.js ‡∏à‡∏∞ prefetch route ‡∏ô‡∏±‡πâ‡∏ô‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥'
  },
  {
    title: 'Client-side Navigation',
    description: '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà ‡∏û‡∏£‡πâ‡∏≠‡∏° fresh data',
    icon: <Navigation />,
    example: '‡πÉ‡∏ä‡πâ History API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô URL ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà refresh ‡∏´‡∏ô‡πâ‡∏≤ (data ‡∏à‡∏∞ fresh ‡πÉ‡∏ô Next.js 15)'
  },
  {
    title: 'Code Splitting',
    description: '‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡πÜ ‡∏î‡πâ‡∏ß‡∏¢ Turbopack',
    icon: <Code />,
    example: '‡πÅ‡∏ï‡πà‡∏•‡∏∞ route ‡∏à‡∏∞‡∏°‡∏µ JavaScript bundle ‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô (‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Turbopack)'
  },
  {
    title: 'State Preservation',
    description: '‡∏£‡∏±‡∏Å‡∏©‡∏≤ state ‡∏Ç‡∏≠‡∏á layout components ‡πÅ‡∏ï‡πà page data ‡∏à‡∏∞ fresh',
    icon: <RouteOutlined />,
    example: 'layout state ‡∏à‡∏∞‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà ‡πÅ‡∏ï‡πà page components ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà (Next.js 15)'
  }
];

export default function Lesson4Page() {
  const [activeStep, setActiveStep] = useState(0);
  const [tabValue, setTabValue] = useState(0);

  const handleNext = () => {
    setActiveStep((prevActiveStep) => prevActiveStep + 1);
  };

  const handleBack = () => {
    setActiveStep((prevActiveStep) => prevActiveStep - 1);
  };

  const handleReset = () => {
    setActiveStep(0);
  };

  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };

  return (
    <Box sx={{ 
      minHeight: '100vh',
      px: { xs: 2, sm: 3, md: 4 },
      py: { xs: 2, sm: 3 },
      maxWidth: '100vw',
      overflow: 'hidden'
    }}>
      {/* Header Section */}
      <Box sx={{ mb: { xs: 3, sm: 4 } }}>
        <Typography 
          variant="h2" 
          component="h1"
          sx={{ 
            fontSize: { xs: '1.8rem', sm: '2.5rem', md: '3rem' },
            fontWeight: 600,
            mb: 2,
            lineHeight: 1.2
          }}
        >
          üîó ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 4: Link ‡πÅ‡∏•‡∏∞ Navigation
        </Typography>
        
        <Typography 
          variant="h6" 
          sx={{ 
            color: 'text.secondary', 
            mb: 3,
            fontSize: { xs: '1rem', sm: '1.1rem' },
            lineHeight: 1.5
          }}
        >
          ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢ Next.js Link component ‡πÅ‡∏•‡∏∞ navigation hooks ‡πÉ‡∏ô Next.js 15
        </Typography>

        <Stack 
          direction="row" 
          spacing={1} 
          sx={{ 
            flexWrap: 'wrap', 
            gap: 1,
            '& .MuiChip-root': {
              fontSize: { xs: '0.75rem', sm: '0.8rem' }
            }
          }}
        >
          <Chip label="20 ‡∏ô‡∏≤‡∏ó‡∏µ" color="primary" size="small" />
          <Chip label="‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô" color="secondary" size="small" />
          <Chip label="‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô" color="warning" size="small" />
        </Stack>
      </Box>

      {/* Learning Objectives */}
      <Card sx={{ 
        mb: { xs: 3, sm: 4 }, 
        bgcolor: 'primary.light', 
        color: 'primary.contrastText',
        border: 'none',
        boxShadow: 1
      }}>
        <CardContent sx={{ p: { xs: 2, sm: 3 } }}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 2 }}>
            <Lightbulb sx={{ fontSize: { xs: 20, sm: 24 } }} />
            <Typography 
              variant="h6" 
              sx={{ 
                fontSize: { xs: '1.1rem', sm: '1.25rem' },
                fontWeight: 600
              }}
            >
              ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
            </Typography>
          </Box>
          
          <Stack spacing={1}>
            {[
              '‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Next.js Link component ‡πÉ‡∏ô Next.js 15',
              '‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Link ‡πÅ‡∏•‡∏∞ <a> tag ‡∏õ‡∏Å‡∏ï‡∏¥',
              '‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ navigation hooks ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ routing',
              '‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à prefetching ‡πÅ‡∏•‡∏∞ fresh data behavior ‡πÉ‡∏ô Next.js 15'
            ].map((objective, index) => (
              <Box key={index} sx={{ display: 'flex', alignItems: 'flex-start', gap: 1 }}>
                <CheckCircle sx={{ 
                  fontSize: { xs: 16, sm: 20 }, 
                  mt: 0.5,
                  flexShrink: 0
                }} />
                <Typography 
                  variant="body2" 
                  sx={{ 
                    fontSize: { xs: '0.85rem', sm: '0.9rem' },
                    lineHeight: 1.4
                  }}
                >
                  {objective}
                </Typography>
              </Box>
            ))}
          </Stack>
        </CardContent>
      </Card>

      {/* Introduction */}
      <Card sx={{ mb: { xs: 3, sm: 4 }, boxShadow: 1 }}>
        <CardContent sx={{ p: { xs: 2, sm: 3, md: 4 } }}>
          <Typography 
            variant="h4" 
            sx={{ 
              mb: 3,
              fontSize: { xs: '1.5rem', sm: '2rem' },
              fontWeight: 600
            }}
          >
            ü§î Navigation ‡πÉ‡∏ô Next.js ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?
          </Typography>
          
          <Typography 
            variant="body1" 
            sx={{ 
              mb: 3, 
              lineHeight: 1.7,
              fontSize: { xs: '0.95rem', sm: '1rem' }
            }}
          >
            <strong>Navigation ‡πÉ‡∏ô Next.js</strong> ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á routes ‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î 
            ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡∏•‡∏∑‡πà‡∏ô‡πÑ‡∏´‡∏•‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö fresh data ‡πÉ‡∏ô Next.js 15
          </Typography>

          <Alert severity="info" sx={{ mb: 3, fontSize: { xs: '0.85rem', sm: '0.9rem' } }}>
            üí° <strong>‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:</strong> ‡πÉ‡∏ô Next.js 15 navigation ‡∏à‡∏∞‡πÑ‡∏î‡πâ fresh data ‡πÇ‡∏î‡∏¢ default 
            ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏à‡∏≤‡∏Å client-side navigation ‡πÅ‡∏•‡∏∞ prefetching
          </Alert>

          {/* Comparison */}
          <Typography 
            variant="h5" 
            sx={{ 
              mb: 3,
              fontSize: { xs: '1.3rem', sm: '1.5rem' },
              fontWeight: 600
            }}
          >
            ‚ö° ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö Traditional vs Next.js Navigation
          </Typography>

          <Card sx={{ boxShadow: 1 }}>
            <TableContainer>
              <Table size="small">
                <TableHead>
                  <TableRow>
                    <TableCell sx={{ fontSize: { xs: '0.8rem', sm: '0.9rem' } }}>
                      <strong>‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥</strong>
                    </TableCell>
                    <TableCell sx={{ fontSize: { xs: '0.8rem', sm: '0.9rem' } }}>
                      <strong>Traditional HTML</strong>
                    </TableCell>
                    <TableCell sx={{ fontSize: { xs: '0.8rem', sm: '0.9rem' } }}>
                      <strong>Next.js</strong>
                    </TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {navigationComparison.map((item, index) => (
                    <TableRow key={index}>
                      <TableCell sx={{ fontSize: { xs: '0.75rem', sm: '0.85rem' } }}>
                        {item.feature}
                      </TableCell>
                      <TableCell>
                        <Chip 
                          label={item.traditional} 
                          color={item.tradColor as any}
                          size="small" 
                          sx={{ fontSize: { xs: '0.7rem', sm: '0.75rem' } }}
                        />
                      </TableCell>
                      <TableCell>
                        <Chip 
                          label={item.nextjs} 
                          color={item.nextColor as any}
                          size="small" 
                          sx={{ fontSize: { xs: '0.7rem', sm: '0.75rem' } }}
                        />
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          </Card>
        </CardContent>
      </Card>

      {/* Link Component Features */}
      <Card sx={{ mb: { xs: 3, sm: 4 }, boxShadow: 1 }}>
        <CardContent sx={{ p: { xs: 2, sm: 3, md: 4 } }}>
          <Typography 
            variant="h4" 
            sx={{ 
              mb: 3,
              fontSize: { xs: '1.5rem', sm: '2rem' },
              fontWeight: 600
            }}
          >
            üåü ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á Next.js Link
          </Typography>

          <Stack spacing={2} sx={{ mb: 4 }}>
            {linkFeatures.map((feature, index) => (
              <Card key={index} sx={{ boxShadow: 1 }}>
                <CardContent sx={{ p: { xs: 2, sm: 3 } }}>
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>
                    <Box sx={{ color: 'primary.main' }}>
                      {React.cloneElement(feature.icon, { 
                        sx: { fontSize: { xs: 20, sm: 24 } }
                      })}
                    </Box>
                    <Typography 
                      variant="h6"
                      sx={{ fontSize: { xs: '1rem', sm: '1.1rem' } }}
                    >
                      {feature.title}
                    </Typography>
                  </Box>
                  <Typography 
                    variant="body2" 
                    sx={{ 
                      mb: 2,
                      fontSize: { xs: '0.85rem', sm: '0.9rem' },
                      lineHeight: 1.4
                    }}
                  >
                    {feature.description}
                  </Typography>
                  <Typography 
                    variant="body2" 
                    color="text.secondary"
                    sx={{ fontSize: { xs: '0.8rem', sm: '0.85rem' } }}
                  >
                    <strong>‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:</strong> {feature.example}
                  </Typography>
                </CardContent>
              </Card>
            ))}
          </Stack>

          <Alert severity="success" sx={{ mb: 3, fontSize: { xs: '0.8rem', sm: '0.85rem' } }}>
            ‚úÖ <strong>Performance Tip:</strong> Next.js ‡∏à‡∏∞ prefetch routes ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ 
            ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Link component ‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡πÉ‡∏ô viewport (‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠)
          </Alert>
        </CardContent>
      </Card>

      {/* Basic Link Usage */}
      <Card sx={{ mb: { xs: 3, sm: 4 }, boxShadow: 1 }}>
        <CardContent sx={{ p: { xs: 2, sm: 3, md: 4 } }}>
          <Typography 
            variant="h4" 
            sx={{ 
              mb: 3,
              fontSize: { xs: '1.5rem', sm: '2rem' },
              fontWeight: 600
            }}
          >
            üìñ ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Link Component
          </Typography>

          <Stack spacing={1.5}>
            <Accordion sx={{ boxShadow: 1 }}>
              <AccordionSummary 
                expandIcon={<ExpandMore />}
                sx={{ 
                  '& .MuiAccordionSummary-content': {
                    margin: { xs: '8px 0', sm: '12px 0' }
                  }
                }}
              >
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                  <LinkIcon 
                    color="primary" 
                    sx={{ fontSize: { xs: 18, sm: 20 } }}
                  />
                  <Typography 
                    variant="h6"
                    sx={{ fontSize: { xs: '1rem', sm: '1.1rem' } }}
                  >
                    ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
                  </Typography>
                </Box>
              </AccordionSummary>
              <AccordionDetails sx={{ pt: 0 }}>
                <Typography 
                  variant="body1" 
                  sx={{ 
                    mb: 2,
                    fontSize: { xs: '0.9rem', sm: '1rem' }
                  }}
                >
                  ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Link component ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ
                </Typography>
                
                <Card className="code-block" sx={{ mb: 2, boxShadow: 1 }}>
                  <CardContent sx={{ p: { xs: 1.5, sm: 2 } }}>
                    <Typography 
                      component="pre" 
                      sx={{ 
                        fontFamily: 'monospace',
                        fontSize: { xs: '0.7rem', sm: '0.8rem' },
                        lineHeight: 1.4,
                        margin: 0,
                        overflow: 'auto'
                      }}
                    >
{`// app/components/Navigation.tsx
import Link from 'next/link';

export default function Navigation() {
  return (
    <nav>
      <ul>
        <li>
          <Link href="/">‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å</Link>
        </li>
        <li>
          <Link href="/about">‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤</Link>
        </li>
        <li>
          <Link href="/products">‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</Link>
        </li>
        <li>
          <Link href="/contact">‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤</Link>
        </li>
      </ul>
    </nav>
  );
}`}
                    </Typography>
                  </CardContent>
                </Card>

                <Alert severity="info" sx={{ fontSize: { xs: '0.8rem', sm: '0.85rem' } }}>
                  üí° Link component ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á &lt;a&gt; tag ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ client-side navigation
                </Alert>
              </AccordionDetails>
            </Accordion>

            <Accordion sx={{ boxShadow: 1 }}>
              <AccordionSummary 
                expandIcon={<ExpandMore />}
                sx={{ 
                  '& .MuiAccordionSummary-content': {
                    margin: { xs: '8px 0', sm: '12px 0' }
                  }
                }}
              >
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                  <ArrowForward 
                    color="success" 
                    sx={{ fontSize: { xs: 18, sm: 20 } }}
                  />
                  <Typography 
                    variant="h6"
                    sx={{ fontSize: { xs: '1rem', sm: '1.1rem' } }}
                  >
                    Dynamic Routes
                  </Typography>
                </Box>
              </AccordionSummary>
              <AccordionDetails sx={{ pt: 0 }}>
                <Typography 
                  variant="body1" 
                  sx={{ 
                    mb: 2,
                    fontSize: { xs: '0.9rem', sm: '1rem' }
                  }}
                >
                  ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Link ‡∏Å‡∏±‡∏ö dynamic routes ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
                </Typography>
                
                <Card className="code-block" sx={{ mb: 2, boxShadow: 1 }}>
                  <CardContent sx={{ p: { xs: 1.5, sm: 2 } }}>
                    <Typography 
                      component="pre" 
                      sx={{ 
                        fontFamily: 'monospace',
                        fontSize: { xs: '0.7rem', sm: '0.8rem' },
                        lineHeight: 1.4,
                        margin: 0,
                        overflow: 'auto'
                      }}
                    >
{`// app/components/ProductList.tsx
import Link from 'next/link';

interface Product {
  id: string;
  name: string;
  price: number;
}

export default function ProductList({ products }: { products: Product[] }) {
  return (
    <div>
      <h2>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h2>
      {products.map(product => (
        <div key={product.id}>
          <h3>{product.name}</h3>
          <p>‡∏£‡∏≤‡∏Ñ‡∏≤: {product.price} ‡∏ö‡∏≤‡∏ó</p>
          
          {/* Dynamic route */}
          <Link href={\`/products/\${product.id}\`}>
            ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
          </Link>
        </div>
      ))}
    </div>
  );
}`}
                    </Typography>
                  </CardContent>
                </Card>

                <Alert severity="success" sx={{ fontSize: { xs: '0.8rem', sm: '0.85rem' } }}>
                  ‚úÖ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ template literal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö dynamic routes ‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢
                </Alert>
              </AccordionDetails>
            </Accordion>
          </Stack>
        </CardContent>
      </Card>

      {/* useRouter Hook */}
      <Card sx={{ p: 4, mb: 4 }}>
        <Typography variant="h4" sx={{ mb: 3 }}>
          üîß useRouter Hook
        </Typography>

        <Typography variant="body1" sx={{ mb: 3 }}>
          useRouter hook ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö programmatic navigation ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• router
        </Typography>

        <Accordion sx={{ mb: 2 }}>
          <AccordionSummary expandIcon={<ExpandMore />}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
              <RouteOutlined color="primary" />
              <Typography variant="h6">Basic useRouter</Typography>
            </Box>
          </AccordionSummary>
          <AccordionDetails>
            <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 2 }}>
              <Typography variant="body2" component="pre">
{`'use client';
import { useRouter } from 'next/navigation';

export default function NavigationButtons() {
  const router = useRouter();

  const handleGoBack = () => {
    router.back(); // ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
  };

  const handleGoForward = () => {
    router.forward(); // ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
  };

  const handleGoHome = () => {
    router.push('/'); // ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
  };

  const handleReplace = () => {
    router.replace('/dashboard'); // replace current page
  };

  const handleRefresh = () => {
    router.refresh(); // refresh current page
  };

  return (
    <div>
      <button onClick={handleGoBack}>‚Üê ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö</button>
      <button onClick={handleGoForward}>‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‚Üí</button>
      <button onClick={handleGoHome}>üè† ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å</button>
      <button onClick={handleReplace}>üìä Dashboard</button>
      <button onClick={handleRefresh}>üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä</button>
    </div>
  );
}`}
              </Typography>
            </Box>
          </AccordionDetails>
        </Accordion>

        <Accordion sx={{ mb: 2 }}>
          <AccordionSummary expandIcon={<ExpandMore />}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
              <Home color="info" />
              <Typography variant="h6">Conditional Navigation</Typography>
            </Box>
          </AccordionSummary>
          <AccordionDetails>
            <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 2 }}>
              <Typography variant="body2" component="pre">
{`'use client';
import { useRouter } from 'next/navigation';
import { useState } from 'react';

export default function LoginForm() {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);

    try {
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• login
      const response = await fetch('/api/auth/login', {
        method: 'POST',
        // ... login logic
      });

      if (response.ok) {
        // Login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - redirect ‡πÑ‡∏õ dashboard
        router.push('/dashboard');
      } else {
        // Login ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡πÅ‡∏™‡∏î‡∏á error
        alert('Login failed');
      }
    } catch (error) {
      console.error('Login error:', error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      {/* form fields */}
      <button type="submit" disabled={isLoading}>
        {isLoading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö...' : '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö'}
      </button>
    </form>
  );
}`}
              </Typography>
            </Box>
          </AccordionDetails>
        </Accordion>
      </Card>

      {/* usePathname Hook */}
      <Card sx={{ p: 4, mb: 4 }}>
        <Typography variant="h4" sx={{ mb: 3 }}>
          üìç usePathname Hook
        </Typography>

        <Typography variant="body1" sx={{ mb: 3 }}>
          usePathname hook ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• current pathname ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á active states
        </Typography>

        <Accordion sx={{ mb: 2 }}>
          <AccordionSummary expandIcon={<ExpandMore />}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
              <Home color="success" />
              <Typography variant="h6">Active Navigation</Typography>
            </Box>
          </AccordionSummary>
          <AccordionDetails>
            <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 2 }}>
              <Typography variant="body2" component="pre">
{`'use client';
import Link from 'next/link';
import { usePathname } from 'next/navigation';

const navItems = [
  { href: '/', label: '‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å' },
  { href: '/about', label: '‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤' },
  { href: '/products', label: '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤' },
  { href: '/contact', label: '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤' }
];

export default function ActiveNavigation() {
  const pathname = usePathname();

  return (
    <nav>
      <ul className="flex space-x-4">
        {navItems.map((item) => {
          const isActive = pathname === item.href;
          
          return (
            <li key={item.href}>
              <Link 
                href={item.href}
                className={\`px-3 py-2 rounded \${
                  isActive 
                    ? 'bg-blue-500 text-white' 
                    : 'text-gray-700 hover:bg-gray-100'
                }\`}
              >
                {item.label}
              </Link>
            </li>
          );
        })}
      </ul>
    </nav>
  );
}`}
              </Typography>
            </Box>
          </AccordionDetails>
        </Accordion>

        <Accordion>
          <AccordionSummary expandIcon={<ExpandMore />}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
              <RouteOutlined color="warning" />
              <Typography variant="h6">Advanced Pathname Matching</Typography>
            </Box>
          </AccordionSummary>
          <AccordionDetails>
            <Box className="code-block" sx={{ p: 2, borderRadius: 1, mb: 2 }}>
              <Typography variant="body2" component="pre">
{`'use client';
import Link from 'next/link';
import { usePathname } from 'next/navigation';

export default function AdvancedNavigation() {
  const pathname = usePathname();

  const isActive = (path: string) => {
    // Exact match
    if (path === pathname) return true;
    
    // Starts with (for nested routes)
    if (path !== '/' && pathname.startsWith(path)) return true;
    
    return false;
  };

  const getBreadcrumbs = () => {
    const segments = pathname.split('/').filter(Boolean);
    return segments.map((segment, index) => {
      const path = '/' + segments.slice(0, index + 1).join('/');
      return { path, label: segment };
    });
  };

  return (
    <div>
      {/* Main Navigation */}
      <nav>
        <Link 
          href="/" 
          className={isActive('/') ? 'active' : ''}
        >
          ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
        </Link>
        <Link 
          href="/products" 
          className={isActive('/products') ? 'active' : ''}
        >
          ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        </Link>
      </nav>

      {/* Breadcrumbs */}
      <div className="breadcrumbs">
        <Link href="/">Home</Link>
        {getBreadcrumbs().map((crumb, index) => (
          <span key={crumb.path}>
            {' > '}
            <Link href={crumb.path}>{crumb.label}</Link>
          </span>
        ))}
      </div>

      {/* Current Page Info */}
      <div>
        <p>Current pathname: {pathname}</p>
        <p>Is products page: {pathname.startsWith('/products')}</p>
      </div>
    </div>
  );
}`}
              </Typography>
            </Box>
          </AccordionDetails>
        </Accordion>
      </Card>

      {/* Hands-on Practice */}
      <Card sx={{ mb: { xs: 3, sm: 4 }, boxShadow: 1 }}>
        <CardContent sx={{ p: { xs: 2, sm: 3, md: 4 } }}>
          <Typography 
            variant="h4" 
            sx={{ 
              mb: 3,
              fontSize: { xs: '1.5rem', sm: '2rem' },
              fontWeight: 600
            }}
          >
            ‚úã ‡∏ù‡∏∂‡∏Å‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥: ‡∏™‡∏£‡πâ‡∏≤‡∏á Navigation System
          </Typography>
          
          <Typography 
            variant="body1" 
            sx={{ 
              mb: 3,
              fontSize: { xs: '0.95rem', sm: '1rem' },
              lineHeight: 1.6
            }}
          >
            ‡∏•‡∏≠‡∏á‡∏ó‡∏≥‡∏ï‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á navigation system ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
          </Typography>

          <Stepper 
            activeStep={activeStep} 
            orientation="vertical"
            sx={{
              '& .MuiStepLabel-label': {
                fontSize: { xs: '0.9rem', sm: '1rem' }
              }
            }}
          >
            <Step>
              <StepLabel>
                <Typography 
                  variant="h6"
                  sx={{ fontSize: { xs: '1rem', sm: '1.1rem' } }}
                >
                  ‡∏™‡∏£‡πâ‡∏≤‡∏á Basic Navigation
                </Typography>
              </StepLabel>
              <StepContent>
                <Typography 
                  variant="body1" 
                  sx={{ 
                    mb: 2,
                    fontSize: { xs: '0.9rem', sm: '1rem' },
                    lineHeight: 1.5
                  }}
                >
                  ‡∏™‡∏£‡πâ‡∏≤‡∏á navigation component ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô:
                </Typography>
                
                <Card className="code-block" sx={{ mb: 2, boxShadow: 1 }}>
                  <CardContent sx={{ p: { xs: 1.5, sm: 2 } }}>
                    <Typography 
                      component="pre"
                      sx={{ 
                        fontFamily: 'monospace',
                        fontSize: { xs: '0.7rem', sm: '0.8rem' },
                        lineHeight: 1.4,
                        margin: 0,
                        overflow: 'auto'
                      }}
                    >
{`// app/components/Navigation.tsx
'use client';
import Link from 'next/link';

export default function Navigation() {
  return (
    <nav style={{ padding: '1rem', borderBottom: '1px solid #eee' }}>
      <ul style={{ display: 'flex', gap: '1rem', listStyle: 'none' }}>
        <li><Link href="/">‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å</Link></li>
        <li><Link href="/about">‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö</Link></li>
        <li><Link href="/products">‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</Link></li>
        <li><Link href="/contact">‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠</Link></li>
      </ul>
    </nav>
  );
}`}
                    </Typography>
                  </CardContent>
                </Card>

                <Button 
                  variant="contained" 
                  onClick={handleNext} 
                  size="small"
                  sx={{ 
                    mt: 1, 
                    mr: 1,
                    fontSize: { xs: '0.8rem', sm: '0.9rem' }
                  }}
                >
                  ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                </Button>
              </StepContent>
            </Step>

            <Step>
              <StepLabel>
                <Typography 
                  variant="h6"
                  sx={{ fontSize: { xs: '1rem', sm: '1.1rem' } }}
                >
                  ‡πÄ‡∏û‡∏¥‡πà‡∏° Active States
                </Typography>
              </StepLabel>
              <StepContent>
                <Typography 
                  variant="body1" 
                  sx={{ 
                    mb: 2,
                    fontSize: { xs: '0.9rem', sm: '1rem' },
                    lineHeight: 1.5
                  }}
                >
                  ‡πÄ‡∏û‡∏¥‡πà‡∏° active states ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:
                </Typography>
                
                <Card className="code-block" sx={{ mb: 2, boxShadow: 1 }}>
                  <CardContent sx={{ p: { xs: 1.5, sm: 2 } }}>
                    <Typography 
                      component="pre"
                      sx={{ 
                        fontFamily: 'monospace',
                        fontSize: { xs: '0.7rem', sm: '0.8rem' },
                        lineHeight: 1.4,
                        margin: 0,
                        overflow: 'auto'
                      }}
                    >
{`// app/components/Navigation.tsx
'use client';
import Link from 'next/link';
import { usePathname } from 'next/navigation';

export default function Navigation() {
  const pathname = usePathname();

  return (
    <nav style={{ padding: '1rem', borderBottom: '1px solid #eee' }}>
      <ul style={{ display: 'flex', gap: '1rem', listStyle: 'none' }}>
        <li>
          <Link 
            href="/" 
            style={{ 
              color: pathname === '/' ? 'blue' : 'black',
              fontWeight: pathname === '/' ? 'bold' : 'normal'
            }}
          >
            ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
          </Link>
        </li>
        {/* ‡πÄ‡∏û‡∏¥‡πà‡∏° active state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ */}
      </ul>
    </nav>
  );
}`}
                    </Typography>
                  </CardContent>
                </Card>

                <Stack direction="row" spacing={1} sx={{ mt: 1 }}>
                  <Button 
                    variant="contained" 
                    onClick={handleNext} 
                    size="small"
                    sx={{ fontSize: { xs: '0.8rem', sm: '0.9rem' } }}
                  >
                    ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                  </Button>
                  <Button 
                    onClick={handleBack} 
                    size="small"
                    sx={{ fontSize: { xs: '0.8rem', sm: '0.9rem' } }}
                  >
                    ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
                  </Button>
                </Stack>
              </StepContent>
            </Step>

            <Step>
              <StepLabel>
                <Typography 
                  variant="h6"
                  sx={{ fontSize: { xs: '1rem', sm: '1.1rem' } }}
                >
                  ‡πÄ‡∏û‡∏¥‡πà‡∏° Programmatic Navigation
                </Typography>
              </StepLabel>
              <StepContent>
                <Typography 
                  variant="body1" 
                  sx={{ 
                    mb: 2,
                    fontSize: { xs: '0.9rem', sm: '1rem' },
                    lineHeight: 1.5
                  }}
                >
                  ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö navigation ‡πÅ‡∏ö‡∏ö programmatic:
                </Typography>
                
                <Card className="code-block" sx={{ mb: 2, boxShadow: 1 }}>
                  <CardContent sx={{ p: { xs: 1.5, sm: 2 } }}>
                    <Typography 
                      component="pre"
                      sx={{ 
                        fontFamily: 'monospace',
                        fontSize: { xs: '0.7rem', sm: '0.8rem' },
                        lineHeight: 1.4,
                        margin: 0,
                        overflow: 'auto'
                      }}
                    >
{`// app/components/NavigationButtons.tsx
'use client';
import { useRouter } from 'next/navigation';

export default function NavigationButtons() {
  const router = useRouter();

  return (
    <div style={{ padding: '1rem', display: 'flex', gap: '0.5rem' }}>
      <button onClick={() => router.push('/')}>
        ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
      </button>
      <button onClick={() => router.push('/about')}>
        ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤
      </button>
      <button onClick={() => router.push('/contact')}>
        ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤
      </button>
    </div>
  );
}`}
                    </Typography>
                  </CardContent>
                </Card>

                <Alert severity="success" sx={{ mb: 2, fontSize: { xs: '0.8rem', sm: '0.85rem' } }}>
                  ‚úÖ ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ navigation system ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏•‡πâ‡∏ß!
                </Alert>

                <Button 
                  variant="contained" 
                  onClick={handleNext} 
                  size="small"
                  sx={{ 
                    mt: 1, 
                    mr: 1,
                    fontSize: { xs: '0.8rem', sm: '0.9rem' }
                  }}
                >
                  ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
                </Button>
                <Button 
                  onClick={handleBack} 
                  size="small"
                  sx={{ 
                    mt: 1, 
                    mr: 1,
                    fontSize: { xs: '0.8rem', sm: '0.9rem' }
                  }}
                >
                  ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
                </Button>
              </StepContent>
            </Step>
          </Stepper>

          {activeStep === 3 && (
            <Card sx={{ mt: 3, bgcolor: 'success.light', boxShadow: 1 }}>
              <CardContent sx={{ p: { xs: 2, sm: 3 } }}>
                <Typography 
                  variant="h6" 
                  sx={{ 
                    mb: 2,
                    fontSize: { xs: '1.1rem', sm: '1.25rem' },
                    fontWeight: 600
                  }}
                >
                  üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏£‡πâ‡∏≤‡∏á Navigation System ‡πÅ‡∏•‡πâ‡∏ß
                </Typography>
                <Typography 
                  variant="body1" 
                  sx={{ 
                    mb: 2,
                    fontSize: { xs: '0.9rem', sm: '1rem' },
                    lineHeight: 1.5
                  }}
                >
                  ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ navigation ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á active states ‡πÅ‡∏•‡∏∞ programmatic navigation
                </Typography>
                <Button 
                  onClick={handleReset} 
                  size="small"
                  sx={{ 
                    mt: 1, 
                    mr: 1,
                    fontSize: { xs: '0.8rem', sm: '0.9rem' }
                  }}
                >
                  ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
                </Button>
              </CardContent>
            </Card>
          )}
        </CardContent>
      </Card>

      {/* Performance Tips */}
      <Card sx={{ mb: { xs: 3, sm: 4 }, boxShadow: 1 }}>
        <CardContent sx={{ p: { xs: 2, sm: 3, md: 4 } }}>
          <Typography 
            variant="h4" 
            sx={{ 
              mb: 3,
              fontSize: { xs: '1.5rem', sm: '2rem' },
              fontWeight: 600
            }}
          >
            ‚ö° Performance ‡πÅ‡∏•‡∏∞ Advanced Tips
          </Typography>

          <Tabs 
            value={tabValue} 
            onChange={handleTabChange} 
            sx={{ 
              mb: 3,
              '& .MuiTab-root': {
                fontSize: { xs: '0.8rem', sm: '0.9rem' },
                minWidth: { xs: 'auto', sm: 120 },
                px: { xs: 1, sm: 2 }
              }
            }}
            variant="scrollable"
            scrollButtons="auto"
          >
            <Tab label="Prefetching" />
            <Tab label="Loading States" />
            <Tab label="Error Handling" />
          </Tabs>

          <CustomTabPanel value={tabValue} index={0}>
            <Typography 
              variant="h6" 
              sx={{ 
                mb: 2, 
                color: 'success.main',
                fontSize: { xs: '1.1rem', sm: '1.25rem' }
              }}
            >
              üöÄ Prefetching Strategies
            </Typography>
            
            <Card className="code-block" sx={{ mb: 2, boxShadow: 1 }}>
              <CardContent sx={{ p: { xs: 1.5, sm: 2 } }}>
                <Typography 
                  component="pre"
                  sx={{ 
                    fontFamily: 'monospace',
                    fontSize: { xs: '0.7rem', sm: '0.8rem' },
                    lineHeight: 1.4,
                    margin: 0,
                    overflow: 'auto'
                  }}
                >
{`// ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° prefetching
<Link href="/products" prefetch={false}>
  ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÑ‡∏°‡πà prefetch)
</Link>

// Hover prefetch
<Link 
  href="/products" 
  onMouseEnter={() => router.prefetch('/products')}
>
  ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (prefetch ‡πÄ‡∏°‡∏∑‡πà‡∏≠ hover)
</Link>

// Conditional prefetch
{isLoggedIn && (
  <Link href="/dashboard" prefetch={true}>
    Dashboard
  </Link>
)}`}
                </Typography>
              </CardContent>
            </Card>

            <Alert severity="info" sx={{ fontSize: { xs: '0.8rem', sm: '0.85rem' } }}>
              üí° <strong>‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:</strong> ‡∏õ‡∏¥‡∏î prefetch ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏¢‡∏≠‡∏∞ ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ authentication
            </Alert>
          </CustomTabPanel>

          <CustomTabPanel value={tabValue} index={1}>
            <Typography 
              variant="h6" 
              sx={{ 
                mb: 2, 
                color: 'info.main',
                fontSize: { xs: '1.1rem', sm: '1.25rem' }
              }}
            >
              ‚è≥ Loading States
            </Typography>
            
            <Card className="code-block" sx={{ mb: 2, boxShadow: 1 }}>
              <CardContent sx={{ p: { xs: 1.5, sm: 2 } }}>
                <Typography 
                  component="pre"
                  sx={{ 
                    fontFamily: 'monospace',
                    fontSize: { xs: '0.7rem', sm: '0.8rem' },
                    lineHeight: 1.4,
                    margin: 0,
                    overflow: 'auto'
                  }}
                >
{`'use client';
import { useRouter } from 'next/navigation';
import { useState, useTransition } from 'react';

export default function NavigationWithLoading() {
  const router = useRouter();
  const [isPending, startTransition] = useTransition();

  const handleNavigation = (url: string) => {
    startTransition(() => {
      router.push(url);
    });
  };

  return (
    <div>
      <button 
        onClick={() => handleNavigation('/products')}
        disabled={isPending}
      >
        {isPending ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...' : '‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'}
      </button>
      
      {isPending && <div>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤...</div>}
    </div>
  );
}`}
                </Typography>
              </CardContent>
            </Card>

            <Alert severity="warning" sx={{ fontSize: { xs: '0.8rem', sm: '0.85rem' } }}>
              ‚ö†Ô∏è ‡πÉ‡∏ä‡πâ useTransition ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ loading states ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            </Alert>
          </CustomTabPanel>

          <CustomTabPanel value={tabValue} index={2}>
            <Typography 
              variant="h6" 
              sx={{ 
                mb: 2, 
                color: 'error.main',
                fontSize: { xs: '1.1rem', sm: '1.25rem' }
              }}
            >
              üõ†Ô∏è Error Handling
            </Typography>
            
            <Card className="code-block" sx={{ mb: 2, boxShadow: 1 }}>
              <CardContent sx={{ p: { xs: 1.5, sm: 2 } }}>
                <Typography 
                  component="pre"
                  sx={{ 
                    fontFamily: 'monospace',
                    fontSize: { xs: '0.7rem', sm: '0.8rem' },
                    lineHeight: 1.4,
                    margin: 0,
                    overflow: 'auto'
                  }}
                >
{`'use client';
import { useRouter } from 'next/navigation';

export default function SafeNavigation() {
  const router = useRouter();

  const handleSafeNavigation = async (url: string) => {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö URL ‡∏Å‡πà‡∏≠‡∏ô
      if (!url || !url.startsWith('/')) {
        throw new Error('Invalid URL');
      }

      router.push(url);
    } catch (error) {
      console.error('Navigation error:', error);
      alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏î‡πâ');
    }
  };

  return (
    <div>
      <button onClick={() => handleSafeNavigation('/products')}>
        ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)
      </button>
    </div>
  );
}`}
                </Typography>
              </CardContent>
            </Card>

            <Alert severity="error" sx={{ fontSize: { xs: '0.8rem', sm: '0.85rem' } }}>
              ‚ùå ‡πÄ‡∏™‡∏°‡∏≠‡∏ï‡πâ‡∏≠‡∏á validate URLs ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ errors ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
            </Alert>
          </CustomTabPanel>
        </CardContent>
      </Card>

      {/* Best Practices */}
      <Card sx={{ 
        mb: { xs: 3, sm: 4 }, 
        bgcolor: 'warning.light',
        boxShadow: 1
      }}>
        <CardContent sx={{ p: { xs: 2, sm: 3, md: 4 } }}>
          <Typography 
            variant="h5" 
            sx={{ 
              mb: 2, 
              color: 'warning.dark',
              fontSize: { xs: '1.3rem', sm: '1.5rem' },
              fontWeight: 600
            }}
          >
            üí° Best Practices ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
          </Typography>
          
          <Stack spacing={1.5}>
            {[
              '‡πÉ‡∏ä‡πâ Link component ‡πÅ‡∏ó‡∏ô <a> tag ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Next.js ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ client-side navigation',
              '‡πÉ‡∏ä‡πâ absolute paths ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö internal links (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ /)',
              '‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ prefetch={false} ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏à‡∏∞‡∏•‡∏î performance',
              '‡πÉ‡∏ä‡πâ usePathname ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö active states ‡πÅ‡∏ó‡∏ô window.location',
              '‡πÉ‡∏ä‡πâ router.replace() ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö redirects ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ back navigation',
              '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ loading states ‡∏î‡πâ‡∏ß‡∏¢ useTransition ‡∏´‡∏£‡∏∑‡∏≠ loading.tsx'
            ].map((practice, index) => (
              <Box key={index} sx={{ display: 'flex', alignItems: 'flex-start', gap: 1 }}>
                <CheckCircle 
                  color="success" 
                  sx={{ 
                    fontSize: { xs: 16, sm: 20 }, 
                    mt: 0.5,
                    flexShrink: 0
                  }} 
                />
                <Typography 
                  variant="body2" 
                  sx={{ 
                    fontSize: { xs: '0.85rem', sm: '0.9rem' },
                    lineHeight: 1.4
                  }}
                >
                  {practice}
                </Typography>
              </Box>
            ))}
          </Stack>
        </CardContent>
      </Card>

      {/* Summary */}
      <Card sx={{ 
        mb: { xs: 3, sm: 4 }, 
        bgcolor: 'success.light', 
        color: 'success.dark',
        boxShadow: 1
      }}>
        <CardContent sx={{ p: { xs: 2, sm: 3, md: 4 } }}>
          <Typography 
            variant="h5" 
            sx={{ 
              mb: 2,
              fontSize: { xs: '1.3rem', sm: '1.5rem' },
              fontWeight: 600
            }}
          >
            üéØ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏à‡∏ö‡∏ö‡∏ó‡∏ó‡∏µ‡πà 4 ‡πÅ‡∏•‡πâ‡∏ß
          </Typography>
          
          <Typography 
            variant="body1" 
            sx={{ 
              mb: 3,
              fontSize: { xs: '0.9rem', sm: '1rem' },
              lineHeight: 1.5
            }}
          >
            ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Link component ‡πÅ‡∏•‡∏∞ navigation hooks ‡πÉ‡∏ô Next.js 15 ‡πÅ‡∏•‡πâ‡∏ß! 
            ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á Layouts ‡πÅ‡∏•‡∏∞ Templates ‡πÉ‡∏ô‡∏ö‡∏ó‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
          </Typography>
          
          <Alert 
            severity="info" 
            sx={{ 
              mb: 3,
              fontSize: { xs: '0.8rem', sm: '0.85rem' }
            }}
          >
            üí° <strong>‡∏ö‡∏ó‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:</strong> ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á Layouts, Templates ‡πÅ‡∏•‡∏∞ Nested Layouts 
            ‡πÉ‡∏ô Next.js 15 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á UI structure ‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô
          </Alert>
        </CardContent>
      </Card>

      {/* Navigation */}
      <Box sx={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center',
        flexDirection: { xs: 'column', sm: 'row' },
        gap: { xs: 2, sm: 0 }
      }}>
        <Button
          startIcon={<ArrowBack />}
          component={Link}
          href="/nextjs-basics/lesson-3"
          variant="outlined"
          size="small"
          sx={{ fontSize: { xs: '0.8rem', sm: '0.9rem' } }}
        >
          ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 3
        </Button>
        
        <Chip 
          label="4 / 18"
          color="primary"
          variant="outlined"
          size="small"
        />

        <Button
          endIcon={<ArrowForward />}
          component={Link}
          href="/nextjs-basics/lesson-5"
          variant="contained"
          size="small"
          sx={{ fontSize: { xs: '0.8rem', sm: '0.9rem' } }}
        >
          ‡∏ö‡∏ó‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        </Button>
      </Box>
    </Box>
  );
} 