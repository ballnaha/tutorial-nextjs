'use client';
import {
  Container,
  Typography,
  Box,
  Card,
  CardContent,
  CardActions,
  Button,
  Chip,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Alert,
  Paper,
  Divider,
  Avatar,
} from '@mui/material';
import {
  ExpandMore,
  PlayArrow,
  Code,
  CheckCircle,
  Storage,
  Dataset,
  TableChart,
  Security,
  Speed,
  Build,
  CloudSync,
  AccountTree,
} from '@mui/icons-material';
import Link from 'next/link';

const lessons = [
  {
    id: 1,
    title: 'üóÑÔ∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏±‡∏ö Prisma ORM',
    description: '‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Å‡∏±‡∏ö Prisma ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö MySQL',
    duration: '30 ‡∏ô‡∏≤‡∏ó‡∏µ',
    level: '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô',
    topics: [
      'Prisma ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?',
      '‡∏Ç‡πâ‡∏≠‡∏î‡∏µ‡∏Ç‡∏≠‡∏á ORM',
      '‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Prisma',
      '‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ MySQL',
      '‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Schema ‡πÅ‡∏£‡∏Å',
    ],
    code: `# ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Prisma
npm install prisma @prisma/client
npm install mysql2

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Prisma
npx prisma init

# .env
DATABASE_URL="mysql://user:password@localhost:3306/mydatabase"

# schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}`
  },
  {
    id: 2,
    title: 'üìã Prisma Schema',
    description: '‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Schema ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
    duration: '35 ‡∏ô‡∏≤‡∏ó‡∏µ',
    level: '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô',
    topics: [
      'Data Types ‡πÉ‡∏ô Prisma',
      'Fields ‡πÅ‡∏•‡∏∞ Attributes',
      'Primary Key ‡πÅ‡∏•‡∏∞ Unique',
      'Default Values',
      'Optional Fields',
    ],
    code: `model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  role      Role     @default(USER)
  posts     Post[]
  profile   Profile?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?  @db.Text
  published Boolean  @default(false)
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  
  @@map("posts")
}

enum Role {
  USER
  ADMIN
}`
  },
  {
    id: 3,
    title: 'üîó Relations (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå)',
    description: '‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ',
    duration: '40 ‡∏ô‡∏≤‡∏ó‡∏µ',
    level: '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á',
    topics: [
      'One-to-One Relations',
      'One-to-Many Relations',
      'Many-to-Many Relations',
      'Self Relations',
      'Referential Actions',
    ],
    code: `// One-to-One
model User {
  id      Int      @id @default(autoincrement())
  profile Profile?
}

model Profile {
  id     Int    @id @default(autoincrement())
  bio    String
  userId Int    @unique
  user   User   @relation(fields: [userId], references: [id])
}

// One-to-Many
model User {
  id    Int    @id @default(autoincrement())
  posts Post[]
}

model Post {
  id       Int  @id @default(autoincrement())
  authorId Int
  author   User @relation(fields: [authorId], references: [id])
}

// Many-to-Many
model Post {
  id         Int        @id @default(autoincrement())
  categories Category[]
}

model Category {
  id    Int    @id @default(autoincrement())
  posts Post[]
}`
  },
  {
    id: 4,
    title: 'üîÑ Migrations',
    description: '‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
    duration: '25 ‡∏ô‡∏≤‡∏ó‡∏µ',
    level: '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á',
    topics: [
      '‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Migration ‡πÅ‡∏£‡∏Å',
      'Migration History',
      '‡∏Å‡∏≤‡∏£ Reset Database',
      'Migration ‡πÉ‡∏ô Production',
      '‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Migration Conflicts',
    ],
    code: `# ‡∏™‡∏£‡πâ‡∏≤‡∏á migration ‡∏à‡∏≤‡∏Å schema
npx prisma migrate dev --name init

# ‡∏î‡∏π migration history
npx prisma migrate status

# reset database
npx prisma migrate reset

# deploy migrations to production
npx prisma migrate deploy

# generate Prisma client
npx prisma generate`
  },
  {
    id: 5,
    title: 'üìä CRUD Operations',
    description: '‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á ‡∏≠‡πà‡∏≤‡∏ô ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
    duration: '45 ‡∏ô‡∏≤‡∏ó‡∏µ',
    level: '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á',
    topics: [
      'Create Operations',
      'Read Operations',
      'Update Operations',
      'Delete Operations',
      'Batch Operations',
      'Transactions',
    ],
    code: `import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

// Create
const user = await prisma.user.create({
  data: {
    email: 'john@example.com',
    name: 'John Doe',
    posts: {
      create: [
        { title: 'Hello World', content: 'This is my first post' }
      ]
    }
  },
  include: { posts: true }
})

// Read
const users = await prisma.user.findMany({
  where: { email: { contains: '@gmail.com' } },
  include: { posts: true },
  orderBy: { createdAt: 'desc' }
})

// Update
const updatedUser = await prisma.user.update({
  where: { id: 1 },
  data: { name: 'Jane Doe' }
})

// Delete
await prisma.user.delete({
  where: { id: 1 }
})`
  },
  {
    id: 6,
    title: 'üîç Advanced Queries',
    description: '‡∏Å‡∏≤‡∏£ Query ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û',
    duration: '35 ‡∏ô‡∏≤‡∏ó‡∏µ',
    level: '‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á',
    topics: [
      'Filtering ‡πÅ‡∏•‡∏∞ Sorting',
      'Pagination',
      'Aggregation',
      'Raw Queries',
      'Query Optimization',
    ],
    code: `// Advanced filtering
const posts = await prisma.post.findMany({
  where: {
    AND: [
      { published: true },
      {
        OR: [
          { title: { contains: 'prisma' } },
          { content: { contains: 'database' } }
        ]
      }
    ]
  }
})

// Pagination
const posts = await prisma.post.findMany({
  skip: 10,
  take: 5,
  orderBy: { createdAt: 'desc' }
})

// Aggregation
const result = await prisma.user.aggregate({
  _count: { id: true },
  _avg: { age: true },
  _sum: { score: true }
})

// Raw query
const users = await prisma.$queryRaw\`
  SELECT * FROM users WHERE age > \${minAge}
\``
  },
  {
    id: 7,
    title: 'üîê Authentication & Authorization',
    description: '‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö Authentication ‡∏î‡πâ‡∏ß‡∏¢ Prisma',
    duration: '40 ‡∏ô‡∏≤‡∏ó‡∏µ',
    level: '‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á',
    topics: [
      'User Registration',
      'Password Hashing',
      'JWT Tokens',
      'Session Management',
      'Role-based Access Control',
    ],
    code: `import bcrypt from 'bcryptjs'
import jwt from 'jsonwebtoken'

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
async function createUser(email: string, password: string) {
  const hashedPassword = await bcrypt.hash(password, 10)
  
  return prisma.user.create({
    data: {
      email,
      password: hashedPassword,
    }
  })
}

// ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
async function login(email: string, password: string) {
  const user = await prisma.user.findUnique({
    where: { email }
  })
  
  if (!user || !await bcrypt.compare(password, user.password)) {
    throw new Error('Invalid credentials')
  }
  
  const token = jwt.sign(
    { userId: user.id },
    process.env.JWT_SECRET!,
    { expiresIn: '7d' }
  )
  
  return { user, token }
}`
  },
  {
    id: 8,
    title: 'üöÄ Production Best Practices',
    description: '‡∏Å‡∏≤‡∏£‡∏ô‡∏≥ Prisma ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û',
    duration: '30 ‡∏ô‡∏≤‡∏ó‡∏µ',
    level: '‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á',
    topics: [
      'Connection Pooling',
      'Environment Variables',
      'Error Handling',
      'Logging ‡πÅ‡∏•‡∏∞ Monitoring',
      'Database Seeding',
      'Backup Strategies',
    ],
    code: `// prisma/seed.ts
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  await prisma.user.createMany({
    data: [
      { email: 'admin@example.com', name: 'Admin', role: 'ADMIN' },
      { email: 'user@example.com', name: 'User', role: 'USER' }
    ]
  })
}

main()
  .catch((e) => {
    console.error(e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })

// Connection pooling configuration
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  connectionLimit = 10
}`
  },
];

const features = [
  { icon: <Dataset />, title: 'Type-safe', desc: 'TypeScript support' },
  { icon: <Speed />, title: 'Performance', desc: 'Optimized queries' },
  { icon: <Build />, title: 'Developer Experience', desc: 'Great tooling' },
  { icon: <Security />, title: 'Secure', desc: 'SQL injection protection' },
];

export default function PrismaTutorialPage() {
  return (
    <Container maxWidth="lg">
      {/* Header */}
      <Box sx={{ py: 4 }}>
        <Typography variant="h1" sx={{ mb: 2, display: 'flex', alignItems: 'center', gap: 2 }}>
          <Storage color="primary" sx={{ fontSize: '3rem' }} />
          Prisma & MySQL Tutorial
        </Typography>
        <Typography variant="h5" color="text.secondary" sx={{ mb: 4 }}>
          ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢ Prisma ORM ‡πÅ‡∏•‡∏∞ MySQL ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô
        </Typography>

        <Alert severity="warning" sx={{ mb: 4 }}>
          <Typography variant="body1">
            üìã <strong>‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô:</strong> ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô Next.js, TypeScript, SQL ‡πÅ‡∏•‡∏∞ MySQL
          </Typography>
        </Alert>

        {/* Features */}
        <Box sx={{ 
          display: 'flex', 
          flexDirection: { xs: 'column', sm: 'row' }, 
          gap: 2, 
          mb: 4 
        }}>
          {features.map((feature, index) => (
            <Paper key={index} sx={{ p: 2, flex: 1, textAlign: 'center' }}>
              <Box sx={{ color: 'primary.main', mb: 1 }}>
                {feature.icon}
              </Box>
              <Typography variant="subtitle2" sx={{ fontWeight: 'bold' }}>
                {feature.title}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {feature.desc}
              </Typography>
            </Paper>
          ))}
        </Box>

        {/* What you'll learn */}
        <Paper sx={{ p: 3, bgcolor: 'grey.50', mb: 4 }}>
          <Typography variant="h6" sx={{ mb: 2 }}>
            üéØ ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ:
          </Typography>
          <Box sx={{ 
            display: 'flex', 
            flexDirection: { xs: 'column', sm: 'row' }, 
            gap: 2 
          }}>
            <Box sx={{ flex: 1 }}>
              <List dense>
                <ListItem>
                  <ListItemIcon><CheckCircle color="primary" /></ListItemIcon>
                  <ListItemText primary="‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Prisma" />
                </ListItem>
                <ListItem>
                  <ListItemIcon><CheckCircle color="primary" /></ListItemIcon>
                  <ListItemText primary="‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö Schema" />
                </ListItem>
                <ListItem>
                  <ListItemIcon><CheckCircle color="primary" /></ListItemIcon>
                  <ListItemText primary="Database Relations" />
                </ListItem>
                <ListItem>
                  <ListItemIcon><CheckCircle color="primary" /></ListItemIcon>
                  <ListItemText primary="Migration Management" />
                </ListItem>
              </List>
            </Box>
            <Box sx={{ flex: 1 }}>
              <List dense>
                <ListItem>
                  <ListItemIcon><CheckCircle color="primary" /></ListItemIcon>
                  <ListItemText primary="CRUD Operations" />
                </ListItem>
                <ListItem>
                  <ListItemIcon><CheckCircle color="primary" /></ListItemIcon>
                  <ListItemText primary="Advanced Queries" />
                </ListItem>
                <ListItem>
                  <ListItemIcon><CheckCircle color="primary" /></ListItemIcon>
                  <ListItemText primary="Authentication System" />
                </ListItem>
                <ListItem>
                  <ListItemIcon><CheckCircle color="primary" /></ListItemIcon>
                  <ListItemText primary="Production Best Practices" />
                </ListItem>
              </List>
            </Box>
          </Box>
        </Paper>

        {/* Prerequisites */}
        <Alert severity="info" icon={<Dataset />} sx={{ mb: 4 }}>
          <Typography variant="body1">
            <strong>‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°:</strong> ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á MySQL Server, MySQL Workbench (‡∏´‡∏£‡∏∑‡∏≠ phpMyAdmin) ‡πÅ‡∏•‡∏∞ Node.js ‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤
          </Typography>
        </Alert>
      </Box>

      <Divider sx={{ mb: 4 }} />

      {/* Lessons */}
      <Typography variant="h2" sx={{ mb: 3 }}>
        üìö ‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ({lessons.length} ‡∏ö‡∏ó)
      </Typography>

      <Box sx={{ mb: 4 }}>
        {lessons.map((lesson) => (
          <Accordion key={lesson.id} sx={{ mb: 2 }}>
            <AccordionSummary
              expandIcon={<ExpandMore />}
              sx={{
                '& .MuiAccordionSummary-content': {
                  alignItems: 'center',
                }
              }}
            >
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, width: '100%' }}>
                <Typography variant="h6" sx={{ flexGrow: 1 }}>
                  ‡∏ö‡∏ó‡∏ó‡∏µ‡πà {lesson.id}: {lesson.title}
                </Typography>
                <Box sx={{ display: 'flex', gap: 1 }}>
                  <Chip label={lesson.duration} size="small" color="primary" />
                  <Chip label={lesson.level} size="small" color="secondary" />
                </Box>
              </Box>
            </AccordionSummary>
            
            <AccordionDetails>
              <Typography variant="body1" sx={{ mb: 2 }}>
                {lesson.description}
              </Typography>

              <Typography variant="subtitle2" sx={{ mb: 1, fontWeight: 'bold' }}>
                üéØ ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏ô:
              </Typography>
              <List dense>
                {lesson.topics.map((topic, index) => (
                  <ListItem key={index} sx={{ py: 0 }}>
                    <ListItemIcon sx={{ minWidth: 24 }}>
                      <CheckCircle color="primary" sx={{ fontSize: 16 }} />
                    </ListItemIcon>
                    <ListItemText primary={topic} />
                  </ListItem>
                ))}
              </List>

              {lesson.code && (
                <Box sx={{ mt: 3 }}>
                  <Typography variant="subtitle2" sx={{ mb: 1, fontWeight: 'bold' }}>
                    üíª ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î:
                  </Typography>
                  <Paper sx={{ p: 2, bgcolor: 'grey.100', fontFamily: 'monospace' }}>
                    <pre style={{ margin: 0, fontSize: '0.875rem', overflowX: 'auto' }}>
                      {lesson.code}
                    </pre>
                  </Paper>
                </Box>
              )}

              <Box sx={{ mt: 3, display: 'flex', gap: 2 }}>
                <Button
                  variant="contained"
                  startIcon={<PlayArrow />}
                  component={Link}
                  href={`/prisma-tutorial/lesson-${lesson.id}`}
                >
                  ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ö‡∏ó‡∏ô‡∏µ‡πâ
                </Button>
                <Button
                  variant="outlined"
                  startIcon={<Dataset />}
                  href="#"
                  onClick={(e) => e.preventDefault()}
                >
                  Schema Examples
                </Button>
              </Box>
            </AccordionDetails>
          </Accordion>
        ))}
      </Box>

      {/* Getting Started */}
      <Paper sx={{ p: 4, bgcolor: 'success.light', color: 'success.contrastText' }}>
        <Typography variant="h3" sx={{ mb: 2, textAlign: 'center' }}>
          üóÑÔ∏è ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°?
        </Typography>
        <Typography variant="body1" sx={{ mb: 3, textAlign: 'center' }}>
          ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏ö‡∏ó‡∏ó‡∏µ‡πà 1 ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Prisma ORM ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        </Typography>
        <Box sx={{ textAlign: 'center' }}>
          <Button
            variant="contained"
            size="large"
            sx={{ 
              bgcolor: 'white', 
              color: 'success.main',
              '&:hover': { bgcolor: 'grey.100' }
            }}
            startIcon={<PlayArrow />}
            component={Link}
            href="/prisma-tutorial/lesson-1"
          >
            ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ö‡∏ó‡∏ó‡∏µ‡πà 1
          </Button>
        </Box>
      </Paper>
    </Container>
  );
} 