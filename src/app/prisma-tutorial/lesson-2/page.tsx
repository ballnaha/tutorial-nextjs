'use client';
import {
  Container,
  Typography,
  Box,
  Paper,
  Alert,
  Stepper,
  Step,
  StepLabel,
  StepContent,
  Button,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Chip,
  Divider,
  Tab,
  Tabs,
  Card,
  CardContent,
  Stack,
  Avatar,
  LinearProgress,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Grid,
} from '@mui/material';
import {
  CheckCircle,
  Code,
  Terminal,
  Folder,
  PlayArrow,
  ExpandMore,
  Lightbulb,
  Warning,
  ArrowBack,
  ArrowForward,
  Schema,
  Build,
  Speed,
  Assignment,
  Timer,
  ContentCopy,
  Link as LinkIcon,
  Settings,
  Security,
  AccountTree,
  Storage,
  Architecture,
  DataObject,
  Category,
  Psychology,
} from '@mui/icons-material';
import Link from 'next/link';
import { useState } from 'react';

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;
  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`lesson-tabpanel-${index}`}
      aria-labelledby={`lesson-tab-${index}`}
      {...other}
    >
      {value === index && <Box sx={{ py: 3 }}>{children}</Box>}
    </div>
  );
}

const schemaSteps = [
  {
    label: '‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Data Planning)',
    description: '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå business requirements ‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î - ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ',
    subSteps: [
      '‡∏£‡∏∞‡∏ö‡∏∏ entities ‡∏´‡∏•‡∏±‡∏Å (Users, Posts, Categories)',
      '‡∏Å‡∏≥‡∏´‡∏ô‡∏î attributes ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ entity',
      '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå relationships ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á entities',
      '‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô data validation ‡πÅ‡∏•‡∏∞ constraints'
    ],
    command: '‡∏ß‡∏≤‡∏î‡πÅ‡∏ú‡∏ô‡∏ú‡∏±‡∏á ER Diagram ‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå business logic',
    expectedOutput: '‡πÅ‡∏ú‡∏ô‡∏ú‡∏±‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢',
    codeExample: `// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô - ‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏•‡πá‡∏≠‡∏Å
/*
Business Requirements:
- ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÅ‡∏•‡∏∞‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
- ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡πÇ‡∏û‡∏™‡∏ï‡πå
- ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ó‡πá‡∏Å
- ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÑ‡∏î‡πâ
- ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß

Entity Analysis:
1. User (‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ)
   - id, email, name, password
   - has one Profile
   - has many Posts
   - has many Comments

2. Profile (‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå)
   - id, bio, avatar, userId
   - belongs to one User

3. Post (‡πÇ‡∏û‡∏™‡∏ï‡πå)
   - id, title, content, authorId
   - belongs to one User (author)
   - has many Comments
   - has many Tags (many-to-many)

4. Comment (‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå)
   - id, content, postId, authorId
   - belongs to one Post
   - belongs to one User (author)

5. Tag (‡πÅ‡∏ó‡πá‡∏Å)
   - id, name, color
   - belongs to many Posts
*/`,
    tips: [
      'üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å core entities ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏° features',
      'üìù ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô user stories ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à business logic',
      'üîó ‡∏£‡∏∞‡∏ö‡∏∏ relationships ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î',
      '‚ö° ‡∏Ñ‡∏¥‡∏î‡∏ñ‡∏∂‡∏á performance ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏Ç‡∏±‡πâ‡∏ô‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô'
    ]
  },
  {
    label: '‡∏™‡∏£‡πâ‡∏≤‡∏á Database Schema (Schema Definition)',
    description: '‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô schema.prisma ‡∏ï‡∏≤‡∏° design ‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÑ‡∏ß‡πâ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î field types, constraints ‡πÅ‡∏•‡∏∞ attributes ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°',
    subSteps: [
      '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå prisma/schema.prisma',
      '‡∏Å‡∏≥‡∏´‡∏ô‡∏î generator ‡πÅ‡∏•‡∏∞ datasource',
      '‡∏™‡∏£‡πâ‡∏≤‡∏á models ‡∏ï‡∏≤‡∏° entities ‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô',
      '‡πÄ‡∏û‡∏¥‡πà‡∏° field types ‡πÅ‡∏•‡∏∞ attributes'
    ],
    command: '‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Models ‡πÅ‡∏•‡∏∞ Fields ‡πÉ‡∏ô schema.prisma',
    expectedOutput: 'Schema ‡∏ó‡∏µ‡πà‡∏°‡∏µ Models ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏° field types',
    codeExample: `// prisma/schema.prisma - ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // ‡∏´‡∏£‡∏∑‡∏≠ mysql, sqlite
  url      = env("DATABASE_URL")
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Models ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ relations)
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String   // ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô hash ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("users")
}

model Profile {
  id        Int      @id @default(autoincrement())
  bio       String?  // optional field
  avatar    String?  // URL ‡∏´‡∏£‡∏∑‡∏≠ path ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ
  userId    Int      @unique  // foreign key
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("profiles")
}

model Post {
  id          Int      @id @default(autoincrement())
  title       String
  content     String?  // ‡πÉ‡∏ä‡πâ Text ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏¢‡∏≤‡∏ß
  slug        String   @unique  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SEO-friendly URLs
  published   Boolean  @default(false)
  publishedAt DateTime?
  authorId    Int      // foreign key
  views       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("posts")
  @@index([authorId])  // index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö query ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
  @@index([published])
}`,
    tips: [
      'üî¢ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å scalar fields ‡∏Å‡πà‡∏≠‡∏ô (String, Int, DateTime)',
      'üîë ‡πÉ‡∏ä‡πâ @unique ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö fields ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥ ‡πÄ‡∏ä‡πà‡∏ô email, slug',
      'üìÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° createdAt ‡πÅ‡∏•‡∏∞ updatedAt ‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å model',
      'üìç ‡πÉ‡∏ä‡πâ @@map() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠ table ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô snake_case'
    ]
  },
  {
    label: '‡∏Å‡∏≥‡∏´‡∏ô‡∏î Relations ‡πÅ‡∏•‡∏∞ Constraints',
    description: '‡πÄ‡∏û‡∏¥‡πà‡∏° relationships ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á models ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î foreign keys, indexes ‡πÅ‡∏•‡∏∞ constraints ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏Å‡∏©‡∏≤ data integrity',
    subSteps: [
      '‡πÄ‡∏û‡∏¥‡πà‡∏° relation fields ‡πÉ‡∏ô models',
      '‡∏Å‡∏≥‡∏´‡∏ô‡∏î foreign keys ‡πÅ‡∏•‡∏∞ references',
      '‡πÄ‡∏û‡∏¥‡πà‡∏° indexes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö performance',
      '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ onDelete ‡πÅ‡∏•‡∏∞ onUpdate behaviors'
    ],
    command: '‡πÄ‡∏û‡∏¥‡πà‡∏° relations, foreign keys ‡πÅ‡∏•‡∏∞ indexes',
    expectedOutput: 'Models ‡∏ó‡∏µ‡πà‡∏°‡∏µ relationships ‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå',
    codeExample: `// prisma/schema.prisma - ‡πÄ‡∏û‡∏¥‡πà‡∏° Relations
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations (‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡πÑ‡∏î‡πâ...)
  profile   Profile? // ‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå (optional)
  posts     Post[]   // ‡∏´‡∏•‡∏≤‡∏¢‡πÇ‡∏û‡∏™‡∏ï‡πå
  comments  Comment[] // ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå
  
  @@map("users")
}

model Profile {
  id        Int      @id @default(autoincrement())
  bio       String?
  avatar    String?
  userId    Int      @unique  // Foreign Key
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("profiles")
}

model Post {
  id          Int       @id @default(autoincrement())
  title       String
  content     String?
  slug        String    @unique
  published   Boolean   @default(false)
  publishedAt DateTime?
  authorId    Int       // Foreign Key
  views       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments    Comment[]
  tags        Tag[]     // Many-to-many relation
  
  @@map("posts")
  @@index([authorId])
  @@index([published])
  @@index([slug])       // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SEO URLs
}`,
    tips: [
      'üîó ‡πÉ‡∏ä‡πâ onDelete: Cascade ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö related records',
      'üìä ‡πÄ‡∏û‡∏¥‡πà‡∏° @@index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö foreign keys',
      'üè∑Ô∏è Many-to-many ‡πÉ‡∏ô Prisma ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á junction table ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥',
      '‚ö†Ô∏è ‡∏£‡∏∞‡∏ß‡∏±‡∏á circular references ‡πÉ‡∏ô relations'
    ]
  },
  {
    label: 'Generate Client ‡πÅ‡∏•‡∏∞ Testing',
    description: '‡∏™‡∏£‡πâ‡∏≤‡∏á Prisma Client ‡πÉ‡∏´‡∏°‡πà ‡∏ó‡∏î‡∏™‡∏≠‡∏ö schema ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á database ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö schema ‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö',
    subSteps: [
      'Generate Prisma Client ‡πÉ‡∏´‡∏°‡πà',
      '‡∏™‡∏£‡πâ‡∏≤‡∏á migration files',
      'Apply migrations ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
      '‡∏ó‡∏î‡∏™‡∏≠‡∏ö schema ‡∏î‡πâ‡∏ß‡∏¢ Prisma Studio'
    ],
    command: 'npx prisma generate && npx prisma db push',
    expectedOutput: '‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞ Client ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
    codeExample: `# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ô‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö

# 1. Generate Prisma Client ‡∏à‡∏≤‡∏Å schema
npx prisma generate

# 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á migration (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö production)
npx prisma migrate dev --name init

# ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ db push ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö development
npx prisma db push

# 3. ‡πÄ‡∏õ‡∏¥‡∏î Prisma Studio ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
npx prisma studio

# 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö connection
npx prisma db seed  # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ seed file

# Validation Commands
npx prisma validate      # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö schema syntax
npx prisma format        # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö schema file
npx prisma migrate status # ‡∏î‡∏π migration status`,
    tips: [
      'üîÑ ‡∏£‡∏±‡∏ô generate ‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç schema ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
      'üóÑÔ∏è ‡πÉ‡∏ä‡πâ migrate ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö production, db push ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö development',
      'üé® ‡πÉ‡∏ä‡πâ Prisma Studio ‡πÄ‡∏û‡∏∑‡πà‡∏≠ visualize data',
      'üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö basic CRUD operations ‡∏Å‡πà‡∏≠‡∏ô deploy'
    ]
  },
  {
    label: 'Optimization ‡πÅ‡∏•‡∏∞ Advanced Features',
    description: '‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á performance ‡∏î‡πâ‡∏ß‡∏¢ indexes, views, ‡πÅ‡∏•‡∏∞ advanced features ‡∏Ç‡∏≠‡∏á Prisma ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á',
    subSteps: [
      '‡πÄ‡∏û‡∏¥‡πà‡∏° composite indexes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö queries ‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô',
      '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ connection pooling',
      '‡πÄ‡∏û‡∏¥‡πà‡∏° data validation ‡πÅ‡∏•‡∏∞ custom types',
      '‡∏™‡∏£‡πâ‡∏≤‡∏á seed script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö initial data'
    ],
    command: '‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á performance ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° advanced features',
    expectedOutput: 'Schema ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö production',
    codeExample: `// prisma/schema.prisma - Advanced Features
model Post {
  id          Int       @id @default(autoincrement())
  title       String
  content     String?
  slug        String    @unique
  published   Boolean   @default(false)
  publishedAt DateTime?
  authorId    Int
  categoryId  Int?
  views       Int       @default(0)
  likes       Int       @default(0)
  
  // Advanced fields
  metadata    Json?     // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SEO data, custom fields
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  author      User      @relation(fields: [authorId], references: [id])
  category    Category? @relation(fields: [categoryId], references: [id])
  comments    Comment[]
  tags        Tag[]
  
  @@map("posts")
  
  // Performance Indexes
  @@index([authorId, published])     // Composite index
  @@index([categoryId, published])   // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö filter by category
  @@index([createdAt])               // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö sorting by date
  @@index([views])                   // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö popular posts
}`,
    tips: [
      'üìà ‡πÉ‡∏ä‡πâ composite indexes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö queries ‡∏ó‡∏µ‡πà‡∏°‡∏µ multiple conditions',
      'üîç ‡πÄ‡∏û‡∏¥‡πà‡∏° full-text search ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö content-heavy applications',
      'üå± ‡∏™‡∏£‡πâ‡∏≤‡∏á seed script ‡πÄ‡∏û‡∏∑‡πà‡∏≠ populate initial data',
      '‚ö° ‡πÉ‡∏ä‡πâ connection pooling ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö high-traffic applications',
      'üîí ‡πÄ‡∏û‡∏¥‡πà‡∏° validation ‡∏î‡πâ‡∏ß‡∏¢ Zod ‡∏´‡∏£‡∏∑‡∏≠ libraries ‡∏≠‡∏∑‡πà‡∏ô'
    ]
  }
];

const fieldTypes = [
  {
    category: 'String Types',
    types: [
      { name: 'String', description: '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ', example: 'name String' },
      { name: 'String?', description: '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô null', example: 'nickname String?' },
      { name: 'String @unique', description: '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥', example: 'email String @unique' },
    ]
  },
  {
    category: 'Number Types',
    types: [
      { name: 'Int', description: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°', example: 'age Int' },
      { name: 'Float', description: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°', example: 'price Float' },
      { name: 'BigInt', description: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà', example: 'views BigInt' },
    ]
  },
  {
    category: 'Date & Boolean',
    types: [
      { name: 'DateTime', description: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤', example: 'createdAt DateTime @default(now())' },
      { name: 'Boolean', description: 'true ‡∏´‡∏£‡∏∑‡∏≠ false', example: 'isPublished Boolean @default(false)' },
    ]
  },
  {
    category: 'Special Types',
    types: [
      { name: 'Json', description: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON', example: 'metadata Json?' },
      { name: 'Bytes', description: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• binary', example: 'avatar Bytes?' },
    ]
  }
];

const relationTypes = [
  {
    title: 'One-to-Many (1:M)',
    description: '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ñ‡∏ô‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡πÇ‡∏û‡∏™‡∏ï‡πå',
    icon: 'üìù',
    example: `model User {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[]
}

model Post {
  id       Int  @id @default(autoincrement())
  title    String
  authorId Int
  author   User @relation(fields: [authorId], references: [id])
}`,
    explanation: 'User ‡∏°‡∏µ posts ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß, Post ‡∏°‡∏µ author ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß'
  },
  {
    title: 'Many-to-Many (M:M)',
    description: '‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢ tags, tag ‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡πÇ‡∏û‡∏™‡∏ï‡πå',
    icon: 'üè∑Ô∏è',
    example: `model Post {
  id   Int    @id @default(autoincrement())
  title String
  tags  Tag[]
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[]
}`,
    explanation: '‡πÉ‡∏ä‡πâ implicit many-to-many relation ‡∏ó‡∏µ‡πà Prisma ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ'
  },
  {
    title: 'One-to-One (1:1)',
    description: '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ñ‡∏ô‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå',
    icon: 'üë§',
    example: `model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  profile Profile?
}

model Profile {
  id     Int    @id @default(autoincrement())
  bio    String?
  userId Int    @unique
  user   User   @relation(fields: [userId], references: [id])
}`,
    explanation: '‡πÉ‡∏ä‡πâ @unique ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô 1:1 relation'
  }
];

const codeExamples = {
  basicSchema: `// prisma/schema.prisma - Schema ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏á‡πà‡∏≤‡∏¢‡πÜ
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // ‡∏´‡∏£‡∏∑‡∏≠ mysql, sqlite
  url      = env("DATABASE_URL")
}

// Model ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  role      Role     @default(USER)
  profile   Profile?
  posts     Post[]
  comments  Comment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users") // ‡∏ä‡∏∑‡πà‡∏≠ table ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
}

// Model ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  avatar String?
  userId Int     @unique
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

// Model ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå
model Post {
  id          Int       @id @default(autoincrement())
  title       String
  content     String?
  slug        String    @unique
  published   Boolean   @default(false)
  publishedAt DateTime?
  authorId    Int
  author      User      @relation(fields: [authorId], references: [id])
  comments    Comment[]
  tags        Tag[]
  views       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("posts")
  @@index([authorId])
  @@index([published])
}

// Model ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå
model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())

  @@map("comments")
  @@index([postId])
  @@index([authorId])
}

// Model ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ó‡πá‡∏Å
model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  color String @default("#3B82F6")
  posts Post[]

  @@map("tags")
}

// Enum ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
enum Role {
  USER
  ADMIN
  MODERATOR
}`,

  advancedSchema: `// prisma/schema.prisma - Schema ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö E-commerce
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  status    UserStatus @default(ACTIVE)
  
  // Relations
  profile   Profile?
  addresses Address[]
  orders    Order[]
  reviews   Review[]
  cart      CartItem[]
  
  // Metadata
  lastLoginAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("users")
  @@index([email])
  @@index([status])
}

model Product {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  price       Decimal       @db.Decimal(10, 2)
  sku         String        @unique
  stock       Int           @default(0)
  status      ProductStatus @default(ACTIVE)
  categoryId  Int
  category    Category      @relation(fields: [categoryId], references: [id])
  
  // Relations
  images      ProductImage[]
  cartItems   CartItem[]
  orderItems  OrderItem[]
  reviews     Review[]
  
  // SEO ‡πÅ‡∏•‡∏∞ metadata
  slug        String        @unique
  tags        String[]      // PostgreSQL array
  metadata    Json?         // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏ô‡∏£‡∏π‡∏õ JSON
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("products")
  @@index([categoryId])
  @@index([status])
  @@index([price])
  @@fulltext([name, description]) // MySQL full-text search
}

model Order {
  id           Int         @id @default(autoincrement())
  orderNumber  String      @unique @default(uuid())
  status       OrderStatus @default(PENDING)
  totalAmount  Decimal     @db.Decimal(10, 2)
  shippingCost Decimal     @db.Decimal(10, 2) @default(0)
  taxAmount    Decimal     @db.Decimal(10, 2) @default(0)
  
  // Relations
  userId       Int
  user         User        @relation(fields: [userId], references: [id])
  items        OrderItem[]
  shippingId   Int?
  shipping     Address?    @relation(fields: [shippingId], references: [id])
  
  // Timestamps
  orderDate    DateTime    @default(now())
  shippedAt    DateTime?
  deliveredAt  DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@map("orders")
  @@index([userId])
  @@index([status])
  @@index([orderDate])
}

// Enum types
enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}`,

  migrations: `-- ‡∏™‡∏£‡πâ‡∏≤‡∏á migration ‡πÅ‡∏£‡∏Å
npx prisma migrate dev --name init

-- ‡∏î‡∏π migration history
npx prisma migrate status

-- Reset ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏£‡∏∞‡∏ß‡∏±‡∏á! ‡∏à‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
npx prisma migrate reset

-- Deploy migration ‡πÑ‡∏õ production
npx prisma migrate deploy

-- ‡∏™‡∏£‡πâ‡∏≤‡∏á migration ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
npx prisma migrate dev --name add_user_profile

-- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç migration ‡∏Å‡πà‡∏≠‡∏ô deploy
npx prisma migrate diff \\
  --from-empty \\
  --to-schema-datamodel prisma/schema.prisma \\
  --script`,

  studioUsage: `# ‡πÄ‡∏õ‡∏¥‡∏î Prisma Studio (GUI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
npx prisma studio

# Studio ‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏µ‡πà http://localhost:5555
# ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ:
# - ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
# - ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç/‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
# - Filter ‡πÅ‡∏•‡∏∞ search
# - ‡∏î‡∏π relationships

# ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö production ‡πÉ‡∏ä‡πâ environment variable
DATABASE_URL="your-production-url" npx prisma studio`
};

const bestPractices = [
  {
    title: 'üìù ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ Models ‡πÅ‡∏•‡∏∞ Fields',
    description: '‡πÉ‡∏ä‡πâ PascalCase ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Models ‡πÅ‡∏•‡∏∞ camelCase ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö fields',
    examples: [
      'Model: User, BlogPost, ProductCategory',
      'Fields: firstName, createdAt, isPublished',
      'Relations: posts, author, comments'
    ]
  },
  {
    title: 'üîë Primary Keys ‡πÅ‡∏•‡∏∞ IDs',
    description: '‡πÉ‡∏ä‡πâ @id ‡πÅ‡∏•‡∏∞ @default(autoincrement()) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö primary key',
    examples: [
      'id Int @id @default(autoincrement())',
      'uuid String @id @default(uuid())',
      '‡∏£‡∏ß‡∏° composite key: @@id([userId, postId])'
    ]
  },
  {
    title: 'üìÖ Timestamps',
    description: '‡πÄ‡∏û‡∏¥‡πà‡∏° createdAt ‡πÅ‡∏•‡∏∞ updatedAt ‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å Model',
    examples: [
      'createdAt DateTime @default(now())',
      'updatedAt DateTime @updatedAt',
      'publishedAt DateTime? // ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô null'
    ]
  },
  {
    title: 'üîç Indexes ‡πÅ‡∏•‡∏∞ Performance',
    description: '‡πÄ‡∏û‡∏¥‡πà‡∏° index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö fields ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ query ‡∏ö‡πà‡∏≠‡∏¢',
    examples: [
      '@@index([email]) // single field',
      '@@index([userId, status]) // composite',
      '@@unique([slug]) // unique constraint'
    ]
  }
];

export default function PrismaLesson2Page() {
  const [activeStep, setActiveStep] = useState(0);
  const [tabValue, setTabValue] = useState(0);
  const [copiedCode, setCopiedCode] = useState<string | null>(null);

  const handleNext = () => {
    setActiveStep((prevActiveStep) => prevActiveStep + 1);
  };

  const handleBack = () => {
    setActiveStep((prevActiveStep) => prevActiveStep - 1);
  };

  const handleReset = () => {
    setActiveStep(0);
  };

  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };

  const handleCopyCode = (code: string, codeType: string) => {
    navigator.clipboard.writeText(code);
    setCopiedCode(codeType);
    setTimeout(() => setCopiedCode(null), 2000);
  };

  return (
    <Container maxWidth="lg">
      <Box sx={{ py: 4 }}>
        {/* Header */}
        <Box sx={{ mb: 4 }}>
          <Button
            startIcon={<ArrowBack />}
            component={Link}
            href="/prisma-tutorial"
            sx={{ mb: 2 }}
          >
            ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
          </Button>
          
          <Typography variant="h1" sx={{ mb: 2, display: 'flex', alignItems: 'center', gap: 2 }}>
            <Architecture color="primary" sx={{ fontSize: '3rem' }} />
            ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 2: ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö Prisma Schema
          </Typography>
          
          <Typography variant="h5" color="text.secondary" sx={{ mb: 3 }}>
            ‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢ Prisma Schema Language ‡πÅ‡∏ö‡∏ö‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û! üèóÔ∏è
          </Typography>
          
          <Box sx={{ display: 'flex', gap: 2, mb: 3, flexWrap: 'wrap' }}>
            <Chip icon={<Timer />} label="45 ‡∏ô‡∏≤‡∏ó‡∏µ" color="primary" />
            <Chip icon={<Assignment />} label="‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏•‡∏≤‡∏á" color="warning" />
            <Chip icon={<Code />} label="Hands-on" color="secondary" />
          </Box>
          
          <Alert severity="info" sx={{ mb: 3 }}>
            <Typography variant="body2">
              üéØ <strong>‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ô‡∏µ‡πâ:</strong> ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö database schema ‡∏î‡πâ‡∏ß‡∏¢ Prisma ‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Models ‡∏ó‡∏µ‡πà‡∏°‡∏µ relations ‡πÑ‡∏î‡πâ
              <br />
              üìã <strong>‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ:</strong> Prisma ‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß (‡∏à‡∏≤‡∏Å‡∏ö‡∏ó‡∏ó‡∏µ‡πà 1) ‡πÅ‡∏•‡∏∞‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ
            </Typography>
          </Alert>

          {/* Learning Progress */}
          <Paper sx={{ p: 3, mb: 4, bgcolor: 'secondary.50', border: '2px solid', borderColor: 'secondary.200' }}>
            <Typography variant="h6" sx={{ mb: 2, display: 'flex', alignItems: 'center', gap: 1 }}>
              <Psychology color="secondary" /> üß† ‡∏ó‡∏≥‡πÑ‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö Schema ‡πÉ‡∏´‡πâ‡∏î‡∏µ?
            </Typography>
            
            <Box sx={{ pl: 2, borderLeft: '3px solid', borderColor: 'secondary.main', mb: 2 }}>
              <Typography variant="body2" sx={{ mb: 1 }}>
                ‚Ä¢ üèóÔ∏è <strong>Foundation ‡∏ó‡∏µ‡πà‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á:</strong> Schema ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏ô‡∏¢‡∏≤‡∏ß
              </Typography>
              <Typography variant="body2" sx={{ mb: 1 }}>
                ‚Ä¢ ‚ö° <strong>Performance:</strong> Index ‡πÅ‡∏•‡∏∞ relation ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡πÉ‡∏´‡πâ query ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
              </Typography>
              <Typography variant="body2" sx={{ mb: 1 }}>
                ‚Ä¢ üîí <strong>Data Integrity:</strong> Constraints ‡πÅ‡∏•‡∏∞ validation ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
              </Typography>
              <Typography variant="body2">
                ‚Ä¢ üöÄ <strong>Scalability:</strong> Schema ‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
              </Typography>
            </Box>

            <Alert severity="success" sx={{ mt: 2 }}>
              <Typography variant="body2">
                ‚ú® <strong>‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:</strong> ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÉ‡∏´‡∏ç‡πà!
              </Typography>
            </Alert>
          </Paper>
        </Box>

        {/* Field Types Overview */}
        <Typography variant="h4" sx={{ mb: 3 }}>üìä ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á Fields ‡πÉ‡∏ô Prisma</Typography>

        <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', md: 'repeat(2, 1fr)' }, gap: 3, mb: 4 }}>
          {fieldTypes.map((category, index) => (
            <Card key={index}>
              <CardContent>
                <Typography variant="h6" sx={{ mb: 2, color: 'primary.main' }}>
                  {category.category}
                </Typography>
                <Stack spacing={1}>
                  {category.types.map((type, idx) => (
                    <Box key={idx} sx={{ p: 2, bgcolor: 'grey.50', borderRadius: 1 }}>
                      <Typography variant="subtitle2" sx={{ fontWeight: 600, fontFamily: 'monospace' }}>
                        {type.name}
                      </Typography>
                      <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
                        {type.description}
                      </Typography>
                      <Typography variant="body2" sx={{ fontFamily: 'monospace', fontSize: '0.8rem', color: 'primary.main' }}>
                        {type.example}
                      </Typography>
                    </Box>
                  ))}
                </Stack>
              </CardContent>
            </Card>
          ))}
        </Box>

        {/* Schema Design Steps */}
        <Typography variant="h4" sx={{ mb: 3 }}>üõ†Ô∏è ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö Schema</Typography>
        
        <Paper sx={{ p: 3, mb: 4 }}>
          <Stepper activeStep={activeStep} orientation="vertical">
            {schemaSteps.map((step, index) => (
              <Step key={step.label}>
                <StepLabel
                  optional={
                    index === schemaSteps.length - 1 ? (
                      <Typography variant="caption">‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢</Typography>
                    ) : null
                  }
                >
                  <Typography variant="h6">{step.label}</Typography>
                </StepLabel>
                <StepContent>
                  <Typography variant="body2" sx={{ mb: 2 }}>
                    {step.description}
                  </Typography>
                  
                  {/* Sub Steps */}
                  {step.subSteps && (
                    <Box sx={{ mb: 3 }}>
                      <Typography variant="subtitle2" sx={{ mb: 2, fontWeight: 600 }}>
                        üìã ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏¢‡πà‡∏≠‡∏¢:
                      </Typography>
                      <List dense>
                        {step.subSteps.map((subStep, idx) => (
                          <ListItem key={idx} sx={{ py: 0.5 }}>
                            <ListItemIcon sx={{ minWidth: 32 }}>
                              <CheckCircle color="primary" sx={{ fontSize: 16 }} />
                            </ListItemIcon>
                            <ListItemText 
                              primary={subStep}
                              primaryTypographyProps={{ variant: 'body2' }}
                            />
                          </ListItem>
                        ))}
                      </List>
                    </Box>
                  )}
                  
                  <Alert severity="info" sx={{ mb: 2 }}>
                    <Typography variant="body2">
                      üí° <strong>‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥:</strong> {step.command}
                    </Typography>
                  </Alert>
                  
                  <Alert severity="success" sx={{ mb: 2 }}>
                    <Typography variant="body2">
                      ‚úÖ <strong>‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:</strong> {step.expectedOutput}
                    </Typography>
                  </Alert>
                  
                  {/* Code Example */}
                  {step.codeExample && (
                    <Box sx={{ mb: 3 }}>
                      <Typography variant="subtitle2" sx={{ mb: 1, fontWeight: 600 }}>
                        üíª ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î:
                      </Typography>
                      <Box className="code-block" sx={{ p: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>
                        <pre style={{ 
                          fontSize: '0.75rem',
                          flex: 1,
                          margin: 0,
                          whiteSpace: 'pre-wrap',
                          lineHeight: 1.4
                        }}>
                          {step.codeExample}
                        </pre>
                        <Button
                          size="small"
                          onClick={() => handleCopyCode(step.codeExample, `step-${index}`)}
                          sx={{ color: 'white', minWidth: 'auto', ml: 1 }}
                        >
                          <ContentCopy sx={{ fontSize: 16 }} />
                        </Button>
                      </Box>
                      
                      {copiedCode === `step-${index}` && (
                        <Alert severity="success" sx={{ mt: 2 }}>
                          ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏•‡πâ‡∏ß!
                        </Alert>
                      )}
                    </Box>
                  )}
                  
                  {/* Tips */}
                  {step.tips && (
                    <Box sx={{ mb: 3 }}>
                      <Typography variant="subtitle2" sx={{ mb: 2, fontWeight: 600 }}>
                        üí° ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:
                      </Typography>
                      <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
                        {step.tips.map((tip, idx) => (
                          <Chip 
                            key={idx}
                            label={tip} 
                            size="small" 
                            variant="outlined"
                            color="secondary"
                            sx={{ 
                              fontSize: '0.75rem', 
                              alignSelf: 'flex-start',
                              '& .MuiChip-label': {
                                whiteSpace: 'normal',
                                lineHeight: 1.2
                              }
                            }}
                          />
                        ))}
                      </Box>
                    </Box>
                  )}
                  
                  <Box sx={{ mb: 1 }}>
                    <Button
                      variant="contained"
                      onClick={handleNext}
                      sx={{ mt: 1, mr: 1 }}
                    >
                      {index === schemaSteps.length - 1 ? '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô' : '‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ'}
                    </Button>
                    <Button
                      disabled={index === 0}
                      onClick={handleBack}
                      sx={{ mt: 1, mr: 1 }}
                    >
                      ‡∏Å‡∏•‡∏±‡∏ö
                    </Button>
                  </Box>
                </StepContent>
              </Step>
            ))}
          </Stepper>
          
          {activeStep === schemaSteps.length && (
            <Paper square elevation={0} sx={{ p: 3, bgcolor: 'success.light' }}>
              <Typography variant="h6" sx={{ mb: 2 }}>
                üéâ ‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö Schema ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!
              </Typography>
              <Typography variant="body2" sx={{ mb: 2 }}>
                ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ Schema ‡∏ó‡∏µ‡πà‡∏°‡∏µ Models ‡πÅ‡∏•‡∏∞ Relations ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô application ‡∏£‡∏∞‡∏î‡∏±‡∏ö production
              </Typography>
              
              <Alert severity="success" sx={{ mb: 3 }}>
                <Typography variant="body2">
                  üöÄ <strong>‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:</strong> ‡∏ô‡∏≥ Schema ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö Prisma Client ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á API endpoints
                </Typography>
              </Alert>
              
              <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>
                <Button onClick={handleReset} variant="outlined" sx={{ mt: 1 }}>
                  ‡∏î‡∏π‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                </Button>

              </Box>
            </Paper>
          )}
        </Paper>

        {/* Relations Types */}
        <Typography variant="h4" sx={{ mb: 3 }}>üîó ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á Relations</Typography>

        <Stack spacing={3} sx={{ mb: 4 }}>
          {relationTypes.map((relation, index) => (
            <Card key={index}>
              <CardContent>
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                  <Box sx={{ 
                    bgcolor: 'primary.light', 
                    color: 'primary.main', 
                    p: 1, 
                    borderRadius: 1, 
                    mr: 2,
                    fontSize: '1.5rem'
                  }}>
                    {relation.icon}
                  </Box>
                  <Box>
                    <Typography variant="h6" sx={{ fontWeight: 600 }}>
                      {relation.title}
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      {relation.description}
                    </Typography>
                  </Box>
                </Box>
                
                <Typography variant="subtitle2" sx={{ mb: 1 }}>
                  üíª ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î:
                </Typography>
                <Box className="code-block" sx={{ p: 2, mb: 2 }}>
                  <pre style={{ 
                    fontSize: '0.875rem',
                    margin: 0,
                    whiteSpace: 'pre-wrap'
                  }}>
                    {relation.example}
                  </pre>
                </Box>
                
                <Alert severity="info">
                  <Typography variant="body2">
                    üí° <strong>‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢:</strong> {relation.explanation}
                  </Typography>
                </Alert>
              </CardContent>
            </Card>
          ))}
        </Stack>

        {/* Best Practices */}
        <Typography variant="h4" sx={{ mb: 3 }}>‚≠ê Best Practices</Typography>

        <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', md: 'repeat(2, 1fr)' }, gap: 3, mb: 4 }}>
          {bestPractices.map((practice, index) => (
            <Card key={index} sx={{ height: '100%' }}>
              <CardContent>
                <Typography variant="h6" sx={{ mb: 2 }}>
                  {practice.title}
                </Typography>
                <Typography variant="body2" sx={{ mb: 2 }}>
                  {practice.description}
                </Typography>
                <Typography variant="subtitle2" sx={{ mb: 1 }}>
                  ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
                </Typography>
                <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
                  {practice.examples.map((example, idx) => (
                    <Chip 
                      key={idx}
                      label={example} 
                      size="small" 
                      variant="outlined"
                      sx={{ fontSize: '0.75rem', alignSelf: 'flex-start' }}
                    />
                  ))}
                </Box>
              </CardContent>
            </Card>
          ))}
        </Box>

        {/* Code Examples Tabs */}
        <Typography variant="h4" sx={{ mb: 3 }}>üíª ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Schema ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏£‡∏¥‡∏á</Typography>

        {/* Tabs */}
        <Box sx={{ width: '100%', mb: 4 }}>
          <Tabs 
            value={tabValue} 
            onChange={handleTabChange}
            variant="scrollable"
            scrollButtons="auto"
            sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}
          >
            <Tab 
              label="üìù Blog Schema" 
              icon={<Assignment />}
              iconPosition="start"
            />
            <Tab 
              label="üõí E-commerce Schema" 
              icon={<Category />}
              iconPosition="start"
            />
            <Tab 
              label="üöÄ Migration Commands" 
              icon={<Build />}
              iconPosition="start"
            />
            <Tab 
              label="üé® Prisma Studio" 
              icon={<Storage />}
              iconPosition="start"
            />
          </Tabs>
        </Box>

        <TabPanel value={tabValue} index={0}>
          <Typography variant="h6" sx={{ mb: 2, pl: 2 }}>
            Schema ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏•‡πá‡∏≠‡∏Å
          </Typography>
          <Typography variant="body2" sx={{ mb: 2, pl: 2 }}>
            Schema ‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏° Users, Posts, Comments, Tags ‡πÅ‡∏•‡∏∞ Profiles ‡∏û‡∏£‡πâ‡∏≠‡∏° relations ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
          </Typography>
          
          <Box className="code-block" sx={{ p: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>
            <pre style={{ 
              fontSize: '0.875rem',
              flex: 1,
              margin: 0,
              whiteSpace: 'pre-wrap'
            }}>
              {codeExamples.basicSchema}
            </pre>
            <Button
              size="small"
              onClick={() => handleCopyCode(codeExamples.basicSchema, 'basicSchema')}
              sx={{ color: 'white', minWidth: 'auto', ml: 1 }}
            >
              <ContentCopy sx={{ fontSize: 16 }} />
            </Button>
          </Box>
          
          {copiedCode === 'basicSchema' && (
            <Alert severity="success" sx={{ mb: 2 }}>
              ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å Blog Schema ‡πÅ‡∏•‡πâ‡∏ß!
            </Alert>
          )}
          
          <Alert severity="info">
            <Typography variant="body2">
              üí° <strong>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</strong> Schema ‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ö‡∏•‡πá‡∏≠‡∏Å CMS ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£
            </Typography>
          </Alert>
        </TabPanel>
        
        <TabPanel value={tabValue} index={1}>
          <Typography variant="h6" sx={{ mb: 2, pl: 2 }}>
            Schema ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö E-commerce
          </Typography>
          <Typography variant="body2" sx={{ mb: 2, pl: 2 }}>
            Schema ‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏ß‡πà‡∏≤ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ ‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
          </Typography>
          
          <Box className="code-block" sx={{ p: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>
            <pre style={{ 
              fontSize: '0.875rem',
              flex: 1,
              margin: 0,
              whiteSpace: 'pre-wrap'
            }}>
              {codeExamples.advancedSchema}
            </pre>
            <Button
              size="small"
              onClick={() => handleCopyCode(codeExamples.advancedSchema, 'advancedSchema')}
              sx={{ color: 'white', minWidth: 'auto', ml: 1 }}
            >
              <ContentCopy sx={{ fontSize: 16 }} />
            </Button>
          </Box>
          
          {copiedCode === 'advancedSchema' && (
            <Alert severity="success" sx={{ mb: 2 }}>
              ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å E-commerce Schema ‡πÅ‡∏•‡πâ‡∏ß!
            </Alert>
          )}
          
          <Alert severity="warning">
            <Typography variant="body2">
              ‚ö†Ô∏è <strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> Schema ‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ features ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á ‡πÄ‡∏ä‡πà‡∏ô Decimal, Arrays, JSON ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
            </Typography>
          </Alert>
        </TabPanel>
        
        <TabPanel value={tabValue} index={2}>
          <Typography variant="h6" sx={{ mb: 2, pl: 2 }}>
            ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Migration ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
          </Typography>
          <Typography variant="body2" sx={{ mb: 2, pl: 2 }}>
            ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ database migrations ‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå
          </Typography>
          
          <Box className="code-block" sx={{ p: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>
            <pre style={{ 
              fontSize: '0.875rem',
              flex: 1,
              margin: 0,
              whiteSpace: 'pre-wrap'
            }}>
              {codeExamples.migrations}
            </pre>
            <Button
              size="small"
              onClick={() => handleCopyCode(codeExamples.migrations, 'migrations')}
              sx={{ color: 'white', minWidth: 'auto', ml: 1 }}
            >
              <ContentCopy sx={{ fontSize: 16 }} />
            </Button>
          </Box>
          
          {copiedCode === 'migrations' && (
            <Alert severity="success" sx={{ mb: 2 }}>
              ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Migration ‡πÅ‡∏•‡πâ‡∏ß!
            </Alert>
          )}
          
          <Alert severity="error">
            <Typography variant="body2">
              ‚ö†Ô∏è <strong>‡∏£‡∏∞‡∏ß‡∏±‡∏á:</strong> ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á migrate reset ‡∏à‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô development ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!
            </Typography>
          </Alert>
        </TabPanel>
        
        <TabPanel value={tabValue} index={3}>
          <Typography variant="h6" sx={{ mb: 2, pl: 2 }}>
            ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Prisma Studio
          </Typography>
          <Typography variant="body2" sx={{ mb: 2, pl: 2 }}>
            GUI tool ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö visual
          </Typography>
          
          <Box className="code-block" sx={{ p: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>
            <pre style={{ 
              fontSize: '0.875rem',
              flex: 1,
              margin: 0,
              whiteSpace: 'pre-wrap'
            }}>
              {codeExamples.studioUsage}
            </pre>
            <Button
              size="small"
              onClick={() => handleCopyCode(codeExamples.studioUsage, 'studioUsage')}
              sx={{ color: 'white', minWidth: 'auto', ml: 1 }}
            >
              <ContentCopy sx={{ fontSize: 16 }} />
            </Button>
          </Box>
          
          {copiedCode === 'studioUsage' && (
            <Alert severity="success" sx={{ mb: 2 }}>
              ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Studio ‡πÅ‡∏•‡πâ‡∏ß!
            </Alert>
          )}
          
          <Alert severity="success">
            <Typography variant="body2">
              ‚ú® <strong>‡∏Ç‡πâ‡∏≠‡∏î‡∏µ:</strong> Prisma Studio ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ debug ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡∏Å ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö development
            </Typography>
          </Alert>
        </TabPanel>

        {/* Quick Reference Table */}
        <Typography variant="h4" sx={{ mb: 3 }}>üìã ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÄ‡∏£‡πá‡∏ß: Attributes ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡πà‡∏≠‡∏¢</Typography>
        
        <TableContainer component={Paper} sx={{ mb: 4 }}>
          <Table>
            <TableHead>
              <TableRow sx={{ bgcolor: 'primary.main' }}>
                <TableCell sx={{ color: 'black', fontWeight: 600 }}>Attribute</TableCell>
                <TableCell sx={{ color: 'black', fontWeight: 600 }}>‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</TableCell>
                <TableCell sx={{ color: 'black', fontWeight: 600 }}>‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              <TableRow sx={{ '&:nth-of-type(odd)': { bgcolor: 'grey.50' } }}>
                <TableCell sx={{ fontFamily: 'monospace', fontWeight: 600 }}>@id</TableCell>
                <TableCell>‡∏Å‡∏≥‡∏´‡∏ô‡∏î Primary Key</TableCell>
                <TableCell sx={{ fontFamily: 'monospace' }}>id Int @id @default(autoincrement())</TableCell>
              </TableRow>
              <TableRow sx={{ '&:nth-of-type(odd)': { bgcolor: 'grey.50' } }}>
                <TableCell sx={{ fontFamily: 'monospace', fontWeight: 600 }}>@unique</TableCell>
                <TableCell>‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥</TableCell>
                <TableCell sx={{ fontFamily: 'monospace' }}>email String @unique</TableCell>
              </TableRow>
              <TableRow sx={{ '&:nth-of-type(odd)': { bgcolor: 'grey.50' } }}>
                <TableCell sx={{ fontFamily: 'monospace', fontWeight: 600 }}>@default()</TableCell>
                <TableCell>‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô</TableCell>
                <TableCell sx={{ fontFamily: 'monospace' }}>createdAt DateTime @default(now())</TableCell>
              </TableRow>
              <TableRow sx={{ '&:nth-of-type(odd)': { bgcolor: 'grey.50' } }}>
                <TableCell sx={{ fontFamily: 'monospace', fontWeight: 600 }}>@relation</TableCell>
                <TableCell>‡∏Å‡∏≥‡∏´‡∏ô‡∏î Foreign Key</TableCell>
                <TableCell sx={{ fontFamily: 'monospace' }}>author User @relation(fields: [authorId], references: [id])</TableCell>
              </TableRow>
              <TableRow sx={{ '&:nth-of-type(odd)': { bgcolor: 'grey.50' } }}>
                <TableCell sx={{ fontFamily: 'monospace', fontWeight: 600 }}>@@index</TableCell>
                <TableCell>‡∏™‡∏£‡πâ‡∏≤‡∏á Database Index</TableCell>
                <TableCell sx={{ fontFamily: 'monospace' }}>@@index([email, status])</TableCell>
              </TableRow>
              <TableRow sx={{ '&:nth-of-type(odd)': { bgcolor: 'grey.50' } }}>
                <TableCell sx={{ fontFamily: 'monospace', fontWeight: 600 }}>@@map</TableCell>
                <TableCell>‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠ Table</TableCell>
                <TableCell sx={{ fontFamily: 'monospace' }}>@@map("users")</TableCell>
              </TableRow>
            </TableBody>
          </Table>
        </TableContainer>

        {/* Navigation */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mt: 6 }}>
          <Button
            startIcon={<ArrowBack />}
            component={Link}
            href="/prisma-tutorial/lesson-1"
            variant="outlined"
          >
            ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 1: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Prisma
          </Button>
          
          <Chip 
            label="2 / 12"
            color="primary"
            variant="filled"
          />
          
          <Button
            endIcon={<ArrowForward />}
            component={Link}
            href="/prisma-tutorial/lesson-3"
            variant="contained"
          >
            ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 3: Prisma Client
          </Button>
        </Box>
      </Box>
    </Container>
  );
} 